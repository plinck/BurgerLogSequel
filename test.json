Using Local DB
{ burgers:
   { [Function: burgers]
     sequelize:
      Sequelize {
        options:
         { dialect: 'mysql',
           dialectModulePath: null,
           host: 'localhost',
           protocol: 'tcp',
           define:
            { underscored: false, freezeTableName: true, timestamps: true },
           query: {},
           sync: {},
           timezone: '+00:00',
           logging: false,
           omitNull: false,
           native: false,
           replication: false,
           ssl: undefined,
           pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
           quoteIdentifiers: true,
           hooks: {},
           retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
           transactionType: 'DEFERRED',
           isolationLevel: null,
           databaseVersion: 0,
           typeValidation: false,
           benchmark: false,
           operatorsAliases: false,
           username: 'root',
           password: 'password',
           database: 'burger_db',
           port: 3306 },
        config:
         { database: 'burger_db',
           username: 'root',
           password: 'password',
           host: 'localhost',
           port: 3306,
           pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
           protocol: 'tcp',
           native: false,
           ssl: undefined,
           replication: false,
           dialectModulePath: null,
           keepDefaultTimezone: undefined,
           dialectOptions: undefined },
        dialect:
         MysqlDialect {
           sequelize: [Circular],
           connectionManager:
            ConnectionManager {
              sequelize: [Circular],
              config:
               { database: 'burger_db',
                 username: 'root',
                 password: 'password',
                 host: 'localhost',
                 port: 3306,
                 pool:
                  { max: 5,
                    min: 0,
                    acquire: 30000,
                    idle: 10000,
                    evict: 10000,
                    handleDisconnects: true,
                    validate: [Function: bound _validate],
                    Promise:
                     { [Function: Promise]
                       TypeError: [Function: TypeError],
                       RangeError: [Function: RangeError],
                       CancellationError: [Function: SubError],
                       TimeoutError: [Function: SubError],
                       OperationalError: [Function: OperationalError],
                       RejectionError: [Function: OperationalError],
                       AggregateError: [Function: SubError],
                       _peekContext: [Function],
                       onPossiblyUnhandledRejection: [Function],
                       onUnhandledRejectionHandled: [Function],
                       longStackTraces: [Function],
                       hasLongStackTraces: [Function],
                       config: [Function],
                       getNewLibraryCopy: [Function],
                       is: [Function],
                       fromCallback: [Function],
                       fromNode: [Function],
                       all: [Function],
                       cast: [Function],
                       fulfilled: [Function],
                       resolve: [Function],
                       rejected: [Function],
                       reject: [Function],
                       setScheduler: [Function],
                       pending: [Function],
                       defer: [Function],
                       method: [Function],
                       try: [Function],
                       attempt: [Function],
                       bind: [Function],
                       PromiseInspection: [Function: PromiseInspection],
                       join: [Function],
                       Promise: [Circular],
                       version: '3.5.3',
                       map: [Function],
                       using: [Function],
                       delay: [Function],
                       coroutine: { [Function] addYieldHandler: [Function] },
                       spawn: [Function],
                       promisify: [Function],
                       promisifyAll: [Function],
                       props: [Function],
                       race: [Function],
                       reduce: [Function],
                       settle: [Function],
                       some: [Function],
                       _SomePromiseArray: [Function: SomePromiseArray],
                       filter: [Function],
                       each: [Function],
                       mapSeries: [Function: PromiseMapSeries],
                       any: [Function],
                       default: [Circular] } },
                 protocol: 'tcp',
                 native: false,
                 ssl: undefined,
                 replication: false,
                 dialectModulePath: null,
                 keepDefaultTimezone: undefined,
                 dialectOptions: undefined },
              dialect: [Circular],
              versionPromise: null,
              dialectName: 'mysql',
              pool:
               Pool {
                 _events: [Object: null prototype] {},
                 _eventsCount: 0,
                 _maxListeners: undefined,
                 _config:
                  PoolOptions {
                    fifo: true,
                    priorityRange: 1,
                    testOnBorrow: true,
                    testOnReturn: false,
                    autostart: false,
                    acquireTimeoutMillis: 30000,
                    max: 5,
                    min: 0,
                    evictionRunIntervalMillis: 10000,
                    numTestsPerEvictionRun: 3,
                    softIdleTimeoutMillis: -1,
                    idleTimeoutMillis: 10000,
                    Promise:
                     { [Function: Promise]
                       TypeError: [Function: TypeError],
                       RangeError: [Function: RangeError],
                       CancellationError: [Function: SubError],
                       TimeoutError: [Function: SubError],
                       OperationalError: [Function: OperationalError],
                       RejectionError: [Function: OperationalError],
                       AggregateError: [Function: SubError],
                       _peekContext: [Function],
                       onPossiblyUnhandledRejection: [Function],
                       onUnhandledRejectionHandled: [Function],
                       longStackTraces: [Function],
                       hasLongStackTraces: [Function],
                       config: [Function],
                       getNewLibraryCopy: [Function],
                       is: [Function],
                       fromCallback: [Function],
                       fromNode: [Function],
                       all: [Function],
                       cast: [Function],
                       fulfilled: [Function],
                       resolve: [Function],
                       rejected: [Function],
                       reject: [Function],
                       setScheduler: [Function],
                       pending: [Function],
                       defer: [Function],
                       method: [Function],
                       try: [Function],
                       attempt: [Function],
                       bind: [Function],
                       PromiseInspection: [Function: PromiseInspection],
                       join: [Function],
                       Promise: [Circular],
                       version: '3.5.3',
                       map: [Function],
                       using: [Function],
                       delay: [Function],
                       coroutine: { [Function] addYieldHandler: [Function] },
                       spawn: [Function],
                       promisify: [Function],
                       promisifyAll: [Function],
                       props: [Function],
                       race: [Function],
                       reduce: [Function],
                       settle: [Function],
                       some: [Function],
                       _SomePromiseArray: [Function: SomePromiseArray],
                       filter: [Function],
                       each: [Function],
                       mapSeries: [Function: PromiseMapSeries],
                       any: [Function],
                       default: [Circular] } },
                 _Promise:
                  { [Function: Promise]
                    TypeError: [Function: TypeError],
                    RangeError: [Function: RangeError],
                    CancellationError: [Function: SubError],
                    TimeoutError: [Function: SubError],
                    OperationalError: [Function: OperationalError],
                    RejectionError: [Function: OperationalError],
                    AggregateError: [Function: SubError],
                    _peekContext: [Function],
                    onPossiblyUnhandledRejection: [Function],
                    onUnhandledRejectionHandled: [Function],
                    longStackTraces: [Function],
                    hasLongStackTraces: [Function],
                    config: [Function],
                    getNewLibraryCopy: [Function],
                    is: [Function],
                    fromCallback: [Function],
                    fromNode: [Function],
                    all: [Function],
                    cast: [Function],
                    fulfilled: [Function],
                    resolve: [Function],
                    rejected: [Function],
                    reject: [Function],
                    setScheduler: [Function],
                    pending: [Function],
                    defer: [Function],
                    method: [Function],
                    try: [Function],
                    attempt: [Function],
                    bind: [Function],
                    PromiseInspection: [Function: PromiseInspection],
                    join: [Function],
                    Promise: [Circular],
                    version: '3.5.3',
                    map: [Function],
                    using: [Function],
                    delay: [Function],
                    coroutine: { [Function] addYieldHandler: [Function] },
                    spawn: [Function],
                    promisify: [Function],
                    promisifyAll: [Function],
                    props: [Function],
                    race: [Function],
                    reduce: [Function],
                    settle: [Function],
                    some: [Function],
                    _SomePromiseArray: [Function: SomePromiseArray],
                    filter: [Function],
                    each: [Function],
                    mapSeries: [Function: PromiseMapSeries],
                    any: [Function],
                    default: [Circular] },
                 _factory:
                  { create: [Function: create],
                    destroy: [Function: destroy],
                    validate: [Function: bound _validate] },
                 _draining: false,
                 _started: false,
                 _waitingClientsQueue:
                  PriorityQueue {
                    _size: 1,
                    _slots:
                     [ Queue {
                         _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
                 _factoryCreateOperations: Set {},
                 _factoryDestroyOperations: Set {},
                 _availableObjects:
                  Deque {
                    _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
                 _testOnBorrowResources: Set {},
                 _testOnReturnResources: Set {},
                 _validationOperations: Set {},
                 _allObjects: Set {},
                 _resourceLoans: Map {},
                 _evictionIterator:
                  DequeIterator {
                    _list: DoublyLinkedList { head: null, tail: null, length: 0 },
                    _direction: 'next',
                    _startPosition: 'head',
                    _started: false,
                    _cursor: null,
                    _done: false },
                 _evictor: DefaultEvictor {},
                 _scheduledEviction: null },
              lib:
               { createConnection: [Function],
                 connect: [Function],
                 Connection: [Function: Connection],
                 createPool: [Function],
                 createPoolCluster: [Function],
                 createQuery: [Function: createQuery],
                 Pool: [Function: Pool],
                 createServer: [Function],
                 PoolConnection:
                  { [Function: PoolConnection] statementKey: [Function: statementKey] },
                 escape: [Function: escape],
                 escapeId: [Function: escapeId],
                 format: [Function: format],
                 raw: [Function: raw],
                 createConnectionPromise: [Getter],
                 createPoolPromise: [Getter],
                 createPoolClusterPromise: [Getter],
                 Types: [Getter],
                 Charsets: [Getter],
                 CharsetToEncoding: [Getter],
                 setMaxParserCache: [Function],
                 clearParserCache: [Function] } },
           QueryGenerator:
            { dialect: 'mysql',
              OperatorMap:
               { [Symbol(eq)]: '=',
                 [Symbol(ne)]: '!=',
                 [Symbol(gte)]: '>=',
                 [Symbol(gt)]: '>',
                 [Symbol(lte)]: '<=',
                 [Symbol(lt)]: '<',
                 [Symbol(not)]: 'IS NOT',
                 [Symbol(is)]: 'IS',
                 [Symbol(in)]: 'IN',
                 [Symbol(notIn)]: 'NOT IN',
                 [Symbol(like)]: 'LIKE',
                 [Symbol(notLike)]: 'NOT LIKE',
                 [Symbol(iLike)]: 'ILIKE',
                 [Symbol(notILike)]: 'NOT ILIKE',
                 [Symbol(regexp)]: 'REGEXP',
                 [Symbol(notRegexp)]: 'NOT REGEXP',
                 [Symbol(iRegexp)]: '~*',
                 [Symbol(notIRegexp)]: '!~*',
                 [Symbol(between)]: 'BETWEEN',
                 [Symbol(notBetween)]: 'NOT BETWEEN',
                 [Symbol(overlap)]: '&&',
                 [Symbol(contains)]: '@>',
                 [Symbol(contained)]: '<@',
                 [Symbol(adjacent)]: '-|-',
                 [Symbol(strictLeft)]: '<<',
                 [Symbol(strictRight)]: '>>',
                 [Symbol(noExtendRight)]: '&<',
                 [Symbol(noExtendLeft)]: '&>',
                 [Symbol(any)]: 'ANY',
                 [Symbol(all)]: 'ALL',
                 [Symbol(and)]: ' AND ',
                 [Symbol(or)]: ' OR ',
                 [Symbol(col)]: 'COL',
                 [Symbol(placeholder)]: '$$PLACEHOLDER$$',
                 [Symbol(raw)]: 'DEPRECATED' },
              createSchema: [Function: createSchema],
              showSchemasQuery: [Function: showSchemasQuery],
              versionQuery: [Function: versionQuery],
              createTableQuery: [Function: createTableQuery],
              showTablesQuery: [Function: showTablesQuery],
              addColumnQuery: [Function: addColumnQuery],
              removeColumnQuery: [Function: removeColumnQuery],
              changeColumnQuery: [Function: changeColumnQuery],
              renameColumnQuery: [Function: renameColumnQuery],
              handleSequelizeMethod: [Function: handleSequelizeMethod],
              _toJSONValue: [Function: _toJSONValue],
              upsertQuery: [Function: upsertQuery],
              deleteQuery: [Function: deleteQuery],
              showIndexesQuery: [Function: showIndexesQuery],
              showConstraintsQuery: [Function: showConstraintsQuery],
              removeIndexQuery: [Function: removeIndexQuery],
              attributeToSQL: [Function: attributeToSQL],
              attributesToSQL: [Function: attributesToSQL],
              quoteIdentifier: [Function: quoteIdentifier],
              _checkValidJsonStatement: [Function: _checkValidJsonStatement],
              jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
              _getForeignKeysQueryFields: [Function: _getForeignKeysQueryFields],
              getForeignKeysQuery: [Function: getForeignKeysQuery],
              getForeignKeyQuery: [Function: getForeignKeyQuery],
              dropForeignKeyQuery: [Function: dropForeignKeyQuery],
              _templateSettings:
               { escape: /<%-([\s\S]+?)%>/g,
                 evaluate: /<%([\s\S]+?)%>/g,
                 interpolate: /<%=([\s\S]+?)%>/g,
                 variable: '',
                 imports:
                  { _:
                     { [Function: lodash]
                       templateSettings: [Circular],
                       after: [Function: after],
                       ary: [Function: ary],
                       assign: [Function],
                       assignIn: [Function],
                       assignInWith: [Function],
                       assignWith: [Function],
                       at: [Function],
                       before: [Function: before],
                       bind: { [Function] placeholder: [Circular] },
                       bindAll: [Function],
                       bindKey: { [Function] placeholder: [Circular] },
                       castArray: [Function: castArray],
                       chain: [Function: chain],
                       chunk: [Function: chunk],
                       compact: [Function: compact],
                       concat: [Function: concat],
                       cond: [Function: cond],
                       conforms: [Function: conforms],
                       constant: [Function: constant],
                       countBy: [Function],
                       create: [Function: create],
                       curry: { [Function: curry] placeholder: [Circular] },
                       curryRight: { [Function: curryRight] placeholder: [Circular] },
                       debounce: [Function: debounce],
                       defaults: [Function],
                       defaultsDeep: [Function],
                       defer: [Function],
                       delay: [Function],
                       difference: [Function],
                       differenceBy: [Function],
                       differenceWith: [Function],
                       drop: [Function: drop],
                       dropRight: [Function: dropRight],
                       dropRightWhile: [Function: dropRightWhile],
                       dropWhile: [Function: dropWhile],
                       fill: [Function: fill],
                       filter: [Function: filter],
                       flatMap: [Function: flatMap],
                       flatMapDeep: [Function: flatMapDeep],
                       flatMapDepth: [Function: flatMapDepth],
                       flatten: [Function: flatten],
                       flattenDeep: [Function: flattenDeep],
                       flattenDepth: [Function: flattenDepth],
                       flip: [Function: flip],
                       flow: [Function],
                       flowRight: [Function],
                       fromPairs: [Function: fromPairs],
                       functions: [Function: functions],
                       functionsIn: [Function: functionsIn],
                       groupBy: [Function],
                       initial: [Function: initial],
                       intersection: [Function],
                       intersectionBy: [Function],
                       intersectionWith: [Function],
                       invert: [Function],
                       invertBy: [Function],
                       invokeMap: [Function],
                       iteratee: [Function: iteratee],
                       keyBy: [Function],
                       keys: [Function: keys],
                       keysIn: [Function: keysIn],
                       map: [Function: map],
                       mapKeys: [Function: mapKeys],
                       mapValues: [Function: mapValues],
                       matches: [Function: matches],
                       matchesProperty: [Function: matchesProperty],
                       memoize: { [Function: memoize] Cache: [Function: MapCache] },
                       merge: [Function],
                       mergeWith: [Function],
                       method: [Function],
                       methodOf: [Function],
                       mixin: [Function: mixin],
                       negate: [Function: negate],
                       nthArg: [Function: nthArg],
                       omit: [Function],
                       omitBy: [Function: omitBy],
                       once: [Function: once],
                       orderBy: [Function: orderBy],
                       over: [Function],
                       overArgs: [Function],
                       overEvery: [Function],
                       overSome: [Function],
                       partial: { [Function] placeholder: [Circular] },
                       partialRight: { [Function] placeholder: [Circular] },
                       partition: [Function],
                       pick: [Function],
                       pickBy: [Function: pickBy],
                       property: [Function: property],
                       propertyOf: [Function: propertyOf],
                       pull: [Function],
                       pullAll: [Function: pullAll],
                       pullAllBy: [Function: pullAllBy],
                       pullAllWith: [Function: pullAllWith],
                       pullAt: [Function],
                       range: [Function],
                       rangeRight: [Function],
                       rearg: [Function],
                       reject: [Function: reject],
                       remove: [Function: remove],
                       rest: [Function: rest],
                       reverse: [Function: reverse],
                       sampleSize: [Function: sampleSize],
                       set: [Function: set],
                       setWith: [Function: setWith],
                       shuffle: [Function: shuffle],
                       slice: [Function: slice],
                       sortBy: [Function],
                       sortedUniq: [Function: sortedUniq],
                       sortedUniqBy: [Function: sortedUniqBy],
                       split: [Function: split],
                       spread: [Function: spread],
                       tail: [Function: tail],
                       take: [Function: take],
                       takeRight: [Function: takeRight],
                       takeRightWhile: [Function: takeRightWhile],
                       takeWhile: [Function: takeWhile],
                       tap: [Function: tap],
                       throttle: [Function: throttle],
                       thru: [Function: thru],
                       toArray: [Function: toArray],
                       toPairs: [Function],
                       toPairsIn: [Function],
                       toPath: [Function: toPath],
                       toPlainObject: [Function: toPlainObject],
                       transform: [Function: transform],
                       unary: [Function: unary],
                       union: [Function],
                       unionBy: [Function],
                       unionWith: [Function],
                       uniq: [Function: uniq],
                       uniqBy: [Function: uniqBy],
                       uniqWith: [Function: uniqWith],
                       unset: [Function: unset],
                       unzip: [Function: unzip],
                       unzipWith: [Function: unzipWith],
                       update: [Function: update],
                       updateWith: [Function: updateWith],
                       values: [Function: values],
                       valuesIn: [Function: valuesIn],
                       without: [Function],
                       words: [Function: words],
                       wrap: [Function: wrap],
                       xor: [Function],
                       xorBy: [Function],
                       xorWith: [Function],
                       zip: [Function],
                       zipObject: [Function: zipObject],
                       zipObjectDeep: [Function: zipObjectDeep],
                       zipWith: [Function],
                       entries: [Function],
                       entriesIn: [Function],
                       extend: [Function],
                       extendWith: [Function],
                       add: [Function],
                       attempt: [Function],
                       camelCase: [Function],
                       capitalize: [Function: capitalize],
                       ceil: [Function],
                       clamp: [Function: clamp],
                       clone: [Function: clone],
                       cloneDeep: [Function: cloneDeep],
                       cloneDeepWith: [Function: cloneDeepWith],
                       cloneWith: [Function: cloneWith],
                       conformsTo: [Function: conformsTo],
                       deburr: [Function: deburr],
                       defaultTo: [Function: defaultTo],
                       divide: [Function],
                       endsWith: [Function: endsWith],
                       eq: [Function: eq],
                       escape: [Function: escape],
                       escapeRegExp: [Function: escapeRegExp],
                       every: [Function: every],
                       find: [Function],
                       findIndex: [Function: findIndex],
                       findKey: [Function: findKey],
                       findLast: [Function],
                       findLastIndex: [Function: findLastIndex],
                       findLastKey: [Function: findLastKey],
                       floor: [Function],
                       forEach: [Function: forEach],
                       forEachRight: [Function: forEachRight],
                       forIn: [Function: forIn],
                       forInRight: [Function: forInRight],
                       forOwn: [Function: forOwn],
                       forOwnRight: [Function: forOwnRight],
                       get: [Function: get],
                       gt: [Function],
                       gte: [Function],
                       has: [Function: has],
                       hasIn: [Function: hasIn],
                       head: [Function: head],
                       identity: [Function: identity],
                       includes: [Function: includes],
                       indexOf: [Function: indexOf],
                       inRange: [Function: inRange],
                       invoke: [Function],
                       isArguments: [Function: baseIsArguments],
                       isArray: [Function: isArray],
                       isArrayBuffer: [Function],
                       isArrayLike: [Function: isArrayLike],
                       isArrayLikeObject: [Function: isArrayLikeObject],
                       isBoolean: [Function: isBoolean],
                       isBuffer: [Function: isBuffer],
                       isDate: [Function],
                       isElement: [Function: isElement],
                       isEmpty: [Function: isEmpty],
                       isEqual: [Function: isEqual],
                       isEqualWith: [Function: isEqualWith],
                       isError: [Function: isError],
                       isFinite: [Function: isFinite],
                       isFunction: [Function: isFunction],
                       isInteger: [Function: isInteger],
                       isLength: [Function: isLength],
                       isMap: [Function],
                       isMatch: [Function: isMatch],
                       isMatchWith: [Function: isMatchWith],
                       isNaN: [Function: isNaN],
                       isNative: [Function: isNative],
                       isNil: [Function: isNil],
                       isNull: [Function: isNull],
                       isNumber: [Function: isNumber],
                       isObject: [Function: isObject],
                       isObjectLike: [Function: isObjectLike],
                       isPlainObject: [Function: isPlainObject],
                       isRegExp: [Function],
                       isSafeInteger: [Function: isSafeInteger],
                       isSet: [Function],
                       isString: [Function: isString],
                       isSymbol: [Function: isSymbol],
                       isTypedArray: [Function],
                       isUndefined: [Function: isUndefined],
                       isWeakMap: [Function: isWeakMap],
                       isWeakSet: [Function: isWeakSet],
                       join: [Function: join],
                       kebabCase: [Function],
                       last: [Function: last],
                       lastIndexOf: [Function: lastIndexOf],
                       lowerCase: [Function],
                       lowerFirst: [Function],
                       lt: [Function],
                       lte: [Function],
                       max: [Function: max],
                       maxBy: [Function: maxBy],
                       mean: [Function: mean],
                       meanBy: [Function: meanBy],
                       min: [Function: min],
                       minBy: [Function: minBy],
                       stubArray: [Function: stubArray],
                       stubFalse: [Function: stubFalse],
                       stubObject: [Function: stubObject],
                       stubString: [Function: stubString],
                       stubTrue: [Function: stubTrue],
                       multiply: [Function],
                       nth: [Function: nth],
                       noConflict: [Function: noConflict],
                       noop: [Function: noop],
                       now: [Function],
                       pad: [Function: pad],
                       padEnd: [Function: padEnd],
                       padStart: [Function: padStart],
                       parseInt: [Function: parseInt],
                       random: [Function: random],
                       reduce: [Function: reduce],
                       reduceRight: [Function: reduceRight],
                       repeat: [Function: repeat],
                       replace: [Function: replace],
                       result: [Function: result],
                       round: [Function],
                       runInContext: [Function: runInContext],
                       sample: [Function: sample],
                       size: [Function: size],
                       snakeCase: [Function],
                       some: [Function: some],
                       sortedIndex: [Function: sortedIndex],
                       sortedIndexBy: [Function: sortedIndexBy],
                       sortedIndexOf: [Function: sortedIndexOf],
                       sortedLastIndex: [Function: sortedLastIndex],
                       sortedLastIndexBy: [Function: sortedLastIndexBy],
                       sortedLastIndexOf: [Function: sortedLastIndexOf],
                       startCase: [Function],
                       startsWith: [Function: startsWith],
                       subtract: [Function],
                       sum: [Function: sum],
                       sumBy: [Function: sumBy],
                       template: [Function: template],
                       times: [Function: times],
                       toFinite: [Function: toFinite],
                       toInteger: [Function: toInteger],
                       toLength: [Function: toLength],
                       toLower: [Function: toLower],
                       toNumber: [Function: toNumber],
                       toSafeInteger: [Function: toSafeInteger],
                       toString: [Function: toString],
                       toUpper: [Function: toUpper],
                       trim: [Function: trim],
                       trimEnd: [Function: trimEnd],
                       trimStart: [Function: trimStart],
                       truncate: [Function: truncate],
                       unescape: [Function: unescape],
                       uniqueId: [Function: uniqueId],
                       upperCase: [Function],
                       upperFirst: [Function],
                       each: [Function: forEach],
                       eachRight: [Function: forEachRight],
                       first: [Function: head],
                       VERSION: '4.17.11' } } },
              options:
               { dialect: 'mysql',
                 dialectModulePath: null,
                 host: 'localhost',
                 protocol: 'tcp',
                 define:
                  { underscored: false, freezeTableName: true, timestamps: true },
                 query: {},
                 sync: {},
                 timezone: '+00:00',
                 logging: false,
                 omitNull: false,
                 native: false,
                 replication: false,
                 ssl: undefined,
                 pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
                 quoteIdentifiers: true,
                 hooks: {},
                 retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
                 transactionType: 'DEFERRED',
                 isolationLevel: null,
                 databaseVersion: 0,
                 typeValidation: false,
                 benchmark: false,
                 operatorsAliases: false,
                 username: 'root',
                 password: 'password',
                 database: 'burger_db',
                 port: 3306 },
              extractTableDetails: [Function: extractTableDetails],
              addSchema: [Function: addSchema],
              dropSchema: [Function: dropSchema],
              describeTableQuery: [Function: describeTableQuery],
              dropTableQuery: [Function: dropTableQuery],
              renameTableQuery: [Function: renameTableQuery],
              insertQuery: [Function: insertQuery],
              bulkInsertQuery: [Function: bulkInsertQuery],
              updateQuery: [Function: updateQuery],
              arithmeticQuery: [Function: arithmeticQuery],
              nameIndexes: [Function: nameIndexes],
              addIndexQuery: [Function: addIndexQuery],
              addConstraintQuery: [Function: addConstraintQuery],
              getConstraintSnippet: [Function: getConstraintSnippet],
              removeConstraintQuery: [Function: removeConstraintQuery],
              quoteTable: [Function: quoteTable],
              quote: [Function: quote],
              quoteIdentifiers: [Function: quoteIdentifiers],
              escape: [Function: escape],
              selectQuery: [Function: selectQuery],
              escapeAttributes: [Function: escapeAttributes],
              generateInclude: [Function: generateInclude],
              generateJoin: [Function: generateJoin],
              generateThroughJoin: [Function: generateThroughJoin],
              _generateSubQueryFilter: [Function: _generateSubQueryFilter],
              _getRequiredClosure: [Function: _getRequiredClosure],
              getQueryOrders: [Function: getQueryOrders],
              selectFromTableFragment: [Function: selectFromTableFragment],
              setAutocommitQuery: [Function: setAutocommitQuery],
              setIsolationLevelQuery: [Function: setIsolationLevelQuery],
              generateTransactionId: [Function: generateTransactionId],
              startTransactionQuery: [Function: startTransactionQuery],
              deferConstraintsQuery: [Function: deferConstraintsQuery],
              setConstraintQuery: [Function: setConstraintQuery],
              setDeferredQuery: [Function: setDeferredQuery],
              setImmediateQuery: [Function: setImmediateQuery],
              commitTransactionQuery: [Function: commitTransactionQuery],
              rollbackTransactionQuery: [Function: rollbackTransactionQuery],
              addLimitAndOffset: [Function: addLimitAndOffset],
              whereQuery: [Function: whereQuery],
              whereItemsQuery: [Function: whereItemsQuery],
              OperatorsAliasMap: false,
              setOperatorsAliases: [Function: setOperatorsAliases],
              whereItemQuery: [Function: whereItemQuery],
              _findField: [Function: _findField],
              _replaceAliases: [Function: _replaceAliases],
              _whereGroupBind: [Function: _whereGroupBind],
              _whereBind: [Function: _whereBind],
              _whereJSON: [Function: _whereJSON],
              _traverseJSON: [Function: _traverseJSON],
              _castKey: [Function: _castKey],
              _getJsonCast: [Function: _getJsonCast],
              _joinKeyValue: [Function: _joinKeyValue],
              _getSafeKey: [Function: _getSafeKey],
              _prefixKey: [Function: _prefixKey],
              _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
              getWhereConditions: [Function: getWhereConditions],
              parseConditionObject: [Function: parseConditionObject],
              isIdentifierQuoted: [Function: isIdentifierQuoted],
              booleanValue: [Function: booleanValue],
              _dialect: [Circular],
              sequelize: [Circular],
              typeValidation: undefined } },
        queryInterface:
         QueryInterface {
           sequelize: [Circular],
           QueryGenerator:
            { dialect: 'mysql',
              OperatorMap:
               { [Symbol(eq)]: '=',
                 [Symbol(ne)]: '!=',
                 [Symbol(gte)]: '>=',
                 [Symbol(gt)]: '>',
                 [Symbol(lte)]: '<=',
                 [Symbol(lt)]: '<',
                 [Symbol(not)]: 'IS NOT',
                 [Symbol(is)]: 'IS',
                 [Symbol(in)]: 'IN',
                 [Symbol(notIn)]: 'NOT IN',
                 [Symbol(like)]: 'LIKE',
                 [Symbol(notLike)]: 'NOT LIKE',
                 [Symbol(iLike)]: 'ILIKE',
                 [Symbol(notILike)]: 'NOT ILIKE',
                 [Symbol(regexp)]: 'REGEXP',
                 [Symbol(notRegexp)]: 'NOT REGEXP',
                 [Symbol(iRegexp)]: '~*',
                 [Symbol(notIRegexp)]: '!~*',
                 [Symbol(between)]: 'BETWEEN',
                 [Symbol(notBetween)]: 'NOT BETWEEN',
                 [Symbol(overlap)]: '&&',
                 [Symbol(contains)]: '@>',
                 [Symbol(contained)]: '<@',
                 [Symbol(adjacent)]: '-|-',
                 [Symbol(strictLeft)]: '<<',
                 [Symbol(strictRight)]: '>>',
                 [Symbol(noExtendRight)]: '&<',
                 [Symbol(noExtendLeft)]: '&>',
                 [Symbol(any)]: 'ANY',
                 [Symbol(all)]: 'ALL',
                 [Symbol(and)]: ' AND ',
                 [Symbol(or)]: ' OR ',
                 [Symbol(col)]: 'COL',
                 [Symbol(placeholder)]: '$$PLACEHOLDER$$',
                 [Symbol(raw)]: 'DEPRECATED' },
              createSchema: [Function: createSchema],
              showSchemasQuery: [Function: showSchemasQuery],
              versionQuery: [Function: versionQuery],
              createTableQuery: [Function: createTableQuery],
              showTablesQuery: [Function: showTablesQuery],
              addColumnQuery: [Function: addColumnQuery],
              removeColumnQuery: [Function: removeColumnQuery],
              changeColumnQuery: [Function: changeColumnQuery],
              renameColumnQuery: [Function: renameColumnQuery],
              handleSequelizeMethod: [Function: handleSequelizeMethod],
              _toJSONValue: [Function: _toJSONValue],
              upsertQuery: [Function: upsertQuery],
              deleteQuery: [Function: deleteQuery],
              showIndexesQuery: [Function: showIndexesQuery],
              showConstraintsQuery: [Function: showConstraintsQuery],
              removeIndexQuery: [Function: removeIndexQuery],
              attributeToSQL: [Function: attributeToSQL],
              attributesToSQL: [Function: attributesToSQL],
              quoteIdentifier: [Function: quoteIdentifier],
              _checkValidJsonStatement: [Function: _checkValidJsonStatement],
              jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
              _getForeignKeysQueryFields: [Function: _getForeignKeysQueryFields],
              getForeignKeysQuery: [Function: getForeignKeysQuery],
              getForeignKeyQuery: [Function: getForeignKeyQuery],
              dropForeignKeyQuery: [Function: dropForeignKeyQuery],
              _templateSettings:
               { escape: /<%-([\s\S]+?)%>/g,
                 evaluate: /<%([\s\S]+?)%>/g,
                 interpolate: /<%=([\s\S]+?)%>/g,
                 variable: '',
                 imports:
                  { _:
                     { [Function: lodash]
                       templateSettings: [Circular],
                       after: [Function: after],
                       ary: [Function: ary],
                       assign: [Function],
                       assignIn: [Function],
                       assignInWith: [Function],
                       assignWith: [Function],
                       at: [Function],
                       before: [Function: before],
                       bind: { [Function] placeholder: [Circular] },
                       bindAll: [Function],
                       bindKey: { [Function] placeholder: [Circular] },
                       castArray: [Function: castArray],
                       chain: [Function: chain],
                       chunk: [Function: chunk],
                       compact: [Function: compact],
                       concat: [Function: concat],
                       cond: [Function: cond],
                       conforms: [Function: conforms],
                       constant: [Function: constant],
                       countBy: [Function],
                       create: [Function: create],
                       curry: { [Function: curry] placeholder: [Circular] },
                       curryRight: { [Function: curryRight] placeholder: [Circular] },
                       debounce: [Function: debounce],
                       defaults: [Function],
                       defaultsDeep: [Function],
                       defer: [Function],
                       delay: [Function],
                       difference: [Function],
                       differenceBy: [Function],
                       differenceWith: [Function],
                       drop: [Function: drop],
                       dropRight: [Function: dropRight],
                       dropRightWhile: [Function: dropRightWhile],
                       dropWhile: [Function: dropWhile],
                       fill: [Function: fill],
                       filter: [Function: filter],
                       flatMap: [Function: flatMap],
                       flatMapDeep: [Function: flatMapDeep],
                       flatMapDepth: [Function: flatMapDepth],
                       flatten: [Function: flatten],
                       flattenDeep: [Function: flattenDeep],
                       flattenDepth: [Function: flattenDepth],
                       flip: [Function: flip],
                       flow: [Function],
                       flowRight: [Function],
                       fromPairs: [Function: fromPairs],
                       functions: [Function: functions],
                       functionsIn: [Function: functionsIn],
                       groupBy: [Function],
                       initial: [Function: initial],
                       intersection: [Function],
                       intersectionBy: [Function],
                       intersectionWith: [Function],
                       invert: [Function],
                       invertBy: [Function],
                       invokeMap: [Function],
                       iteratee: [Function: iteratee],
                       keyBy: [Function],
                       keys: [Function: keys],
                       keysIn: [Function: keysIn],
                       map: [Function: map],
                       mapKeys: [Function: mapKeys],
                       mapValues: [Function: mapValues],
                       matches: [Function: matches],
                       matchesProperty: [Function: matchesProperty],
                       memoize: { [Function: memoize] Cache: [Function: MapCache] },
                       merge: [Function],
                       mergeWith: [Function],
                       method: [Function],
                       methodOf: [Function],
                       mixin: [Function: mixin],
                       negate: [Function: negate],
                       nthArg: [Function: nthArg],
                       omit: [Function],
                       omitBy: [Function: omitBy],
                       once: [Function: once],
                       orderBy: [Function: orderBy],
                       over: [Function],
                       overArgs: [Function],
                       overEvery: [Function],
                       overSome: [Function],
                       partial: { [Function] placeholder: [Circular] },
                       partialRight: { [Function] placeholder: [Circular] },
                       partition: [Function],
                       pick: [Function],
                       pickBy: [Function: pickBy],
                       property: [Function: property],
                       propertyOf: [Function: propertyOf],
                       pull: [Function],
                       pullAll: [Function: pullAll],
                       pullAllBy: [Function: pullAllBy],
                       pullAllWith: [Function: pullAllWith],
                       pullAt: [Function],
                       range: [Function],
                       rangeRight: [Function],
                       rearg: [Function],
                       reject: [Function: reject],
                       remove: [Function: remove],
                       rest: [Function: rest],
                       reverse: [Function: reverse],
                       sampleSize: [Function: sampleSize],
                       set: [Function: set],
                       setWith: [Function: setWith],
                       shuffle: [Function: shuffle],
                       slice: [Function: slice],
                       sortBy: [Function],
                       sortedUniq: [Function: sortedUniq],
                       sortedUniqBy: [Function: sortedUniqBy],
                       split: [Function: split],
                       spread: [Function: spread],
                       tail: [Function: tail],
                       take: [Function: take],
                       takeRight: [Function: takeRight],
                       takeRightWhile: [Function: takeRightWhile],
                       takeWhile: [Function: takeWhile],
                       tap: [Function: tap],
                       throttle: [Function: throttle],
                       thru: [Function: thru],
                       toArray: [Function: toArray],
                       toPairs: [Function],
                       toPairsIn: [Function],
                       toPath: [Function: toPath],
                       toPlainObject: [Function: toPlainObject],
                       transform: [Function: transform],
                       unary: [Function: unary],
                       union: [Function],
                       unionBy: [Function],
                       unionWith: [Function],
                       uniq: [Function: uniq],
                       uniqBy: [Function: uniqBy],
                       uniqWith: [Function: uniqWith],
                       unset: [Function: unset],
                       unzip: [Function: unzip],
                       unzipWith: [Function: unzipWith],
                       update: [Function: update],
                       updateWith: [Function: updateWith],
                       values: [Function: values],
                       valuesIn: [Function: valuesIn],
                       without: [Function],
                       words: [Function: words],
                       wrap: [Function: wrap],
                       xor: [Function],
                       xorBy: [Function],
                       xorWith: [Function],
                       zip: [Function],
                       zipObject: [Function: zipObject],
                       zipObjectDeep: [Function: zipObjectDeep],
                       zipWith: [Function],
                       entries: [Function],
                       entriesIn: [Function],
                       extend: [Function],
                       extendWith: [Function],
                       add: [Function],
                       attempt: [Function],
                       camelCase: [Function],
                       capitalize: [Function: capitalize],
                       ceil: [Function],
                       clamp: [Function: clamp],
                       clone: [Function: clone],
                       cloneDeep: [Function: cloneDeep],
                       cloneDeepWith: [Function: cloneDeepWith],
                       cloneWith: [Function: cloneWith],
                       conformsTo: [Function: conformsTo],
                       deburr: [Function: deburr],
                       defaultTo: [Function: defaultTo],
                       divide: [Function],
                       endsWith: [Function: endsWith],
                       eq: [Function: eq],
                       escape: [Function: escape],
                       escapeRegExp: [Function: escapeRegExp],
                       every: [Function: every],
                       find: [Function],
                       findIndex: [Function: findIndex],
                       findKey: [Function: findKey],
                       findLast: [Function],
                       findLastIndex: [Function: findLastIndex],
                       findLastKey: [Function: findLastKey],
                       floor: [Function],
                       forEach: [Function: forEach],
                       forEachRight: [Function: forEachRight],
                       forIn: [Function: forIn],
                       forInRight: [Function: forInRight],
                       forOwn: [Function: forOwn],
                       forOwnRight: [Function: forOwnRight],
                       get: [Function: get],
                       gt: [Function],
                       gte: [Function],
                       has: [Function: has],
                       hasIn: [Function: hasIn],
                       head: [Function: head],
                       identity: [Function: identity],
                       includes: [Function: includes],
                       indexOf: [Function: indexOf],
                       inRange: [Function: inRange],
                       invoke: [Function],
                       isArguments: [Function: baseIsArguments],
                       isArray: [Function: isArray],
                       isArrayBuffer: [Function],
                       isArrayLike: [Function: isArrayLike],
                       isArrayLikeObject: [Function: isArrayLikeObject],
                       isBoolean: [Function: isBoolean],
                       isBuffer: [Function: isBuffer],
                       isDate: [Function],
                       isElement: [Function: isElement],
                       isEmpty: [Function: isEmpty],
                       isEqual: [Function: isEqual],
                       isEqualWith: [Function: isEqualWith],
                       isError: [Function: isError],
                       isFinite: [Function: isFinite],
                       isFunction: [Function: isFunction],
                       isInteger: [Function: isInteger],
                       isLength: [Function: isLength],
                       isMap: [Function],
                       isMatch: [Function: isMatch],
                       isMatchWith: [Function: isMatchWith],
                       isNaN: [Function: isNaN],
                       isNative: [Function: isNative],
                       isNil: [Function: isNil],
                       isNull: [Function: isNull],
                       isNumber: [Function: isNumber],
                       isObject: [Function: isObject],
                       isObjectLike: [Function: isObjectLike],
                       isPlainObject: [Function: isPlainObject],
                       isRegExp: [Function],
                       isSafeInteger: [Function: isSafeInteger],
                       isSet: [Function],
                       isString: [Function: isString],
                       isSymbol: [Function: isSymbol],
                       isTypedArray: [Function],
                       isUndefined: [Function: isUndefined],
                       isWeakMap: [Function: isWeakMap],
                       isWeakSet: [Function: isWeakSet],
                       join: [Function: join],
                       kebabCase: [Function],
                       last: [Function: last],
                       lastIndexOf: [Function: lastIndexOf],
                       lowerCase: [Function],
                       lowerFirst: [Function],
                       lt: [Function],
                       lte: [Function],
                       max: [Function: max],
                       maxBy: [Function: maxBy],
                       mean: [Function: mean],
                       meanBy: [Function: meanBy],
                       min: [Function: min],
                       minBy: [Function: minBy],
                       stubArray: [Function: stubArray],
                       stubFalse: [Function: stubFalse],
                       stubObject: [Function: stubObject],
                       stubString: [Function: stubString],
                       stubTrue: [Function: stubTrue],
                       multiply: [Function],
                       nth: [Function: nth],
                       noConflict: [Function: noConflict],
                       noop: [Function: noop],
                       now: [Function],
                       pad: [Function: pad],
                       padEnd: [Function: padEnd],
                       padStart: [Function: padStart],
                       parseInt: [Function: parseInt],
                       random: [Function: random],
                       reduce: [Function: reduce],
                       reduceRight: [Function: reduceRight],
                       repeat: [Function: repeat],
                       replace: [Function: replace],
                       result: [Function: result],
                       round: [Function],
                       runInContext: [Function: runInContext],
                       sample: [Function: sample],
                       size: [Function: size],
                       snakeCase: [Function],
                       some: [Function: some],
                       sortedIndex: [Function: sortedIndex],
                       sortedIndexBy: [Function: sortedIndexBy],
                       sortedIndexOf: [Function: sortedIndexOf],
                       sortedLastIndex: [Function: sortedLastIndex],
                       sortedLastIndexBy: [Function: sortedLastIndexBy],
                       sortedLastIndexOf: [Function: sortedLastIndexOf],
                       startCase: [Function],
                       startsWith: [Function: startsWith],
                       subtract: [Function],
                       sum: [Function: sum],
                       sumBy: [Function: sumBy],
                       template: [Function: template],
                       times: [Function: times],
                       toFinite: [Function: toFinite],
                       toInteger: [Function: toInteger],
                       toLength: [Function: toLength],
                       toLower: [Function: toLower],
                       toNumber: [Function: toNumber],
                       toSafeInteger: [Function: toSafeInteger],
                       toString: [Function: toString],
                       toUpper: [Function: toUpper],
                       trim: [Function: trim],
                       trimEnd: [Function: trimEnd],
                       trimStart: [Function: trimStart],
                       truncate: [Function: truncate],
                       unescape: [Function: unescape],
                       uniqueId: [Function: uniqueId],
                       upperCase: [Function],
                       upperFirst: [Function],
                       each: [Function: forEach],
                       eachRight: [Function: forEachRight],
                       first: [Function: head],
                       VERSION: '4.17.11' } } },
              options:
               { dialect: 'mysql',
                 dialectModulePath: null,
                 host: 'localhost',
                 protocol: 'tcp',
                 define:
                  { underscored: false, freezeTableName: true, timestamps: true },
                 query: {},
                 sync: {},
                 timezone: '+00:00',
                 logging: false,
                 omitNull: false,
                 native: false,
                 replication: false,
                 ssl: undefined,
                 pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
                 quoteIdentifiers: true,
                 hooks: {},
                 retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
                 transactionType: 'DEFERRED',
                 isolationLevel: null,
                 databaseVersion: 0,
                 typeValidation: false,
                 benchmark: false,
                 operatorsAliases: false,
                 username: 'root',
                 password: 'password',
                 database: 'burger_db',
                 port: 3306 },
              extractTableDetails: [Function: extractTableDetails],
              addSchema: [Function: addSchema],
              dropSchema: [Function: dropSchema],
              describeTableQuery: [Function: describeTableQuery],
              dropTableQuery: [Function: dropTableQuery],
              renameTableQuery: [Function: renameTableQuery],
              insertQuery: [Function: insertQuery],
              bulkInsertQuery: [Function: bulkInsertQuery],
              updateQuery: [Function: updateQuery],
              arithmeticQuery: [Function: arithmeticQuery],
              nameIndexes: [Function: nameIndexes],
              addIndexQuery: [Function: addIndexQuery],
              addConstraintQuery: [Function: addConstraintQuery],
              getConstraintSnippet: [Function: getConstraintSnippet],
              removeConstraintQuery: [Function: removeConstraintQuery],
              quoteTable: [Function: quoteTable],
              quote: [Function: quote],
              quoteIdentifiers: [Function: quoteIdentifiers],
              escape: [Function: escape],
              selectQuery: [Function: selectQuery],
              escapeAttributes: [Function: escapeAttributes],
              generateInclude: [Function: generateInclude],
              generateJoin: [Function: generateJoin],
              generateThroughJoin: [Function: generateThroughJoin],
              _generateSubQueryFilter: [Function: _generateSubQueryFilter],
              _getRequiredClosure: [Function: _getRequiredClosure],
              getQueryOrders: [Function: getQueryOrders],
              selectFromTableFragment: [Function: selectFromTableFragment],
              setAutocommitQuery: [Function: setAutocommitQuery],
              setIsolationLevelQuery: [Function: setIsolationLevelQuery],
              generateTransactionId: [Function: generateTransactionId],
              startTransactionQuery: [Function: startTransactionQuery],
              deferConstraintsQuery: [Function: deferConstraintsQuery],
              setConstraintQuery: [Function: setConstraintQuery],
              setDeferredQuery: [Function: setDeferredQuery],
              setImmediateQuery: [Function: setImmediateQuery],
              commitTransactionQuery: [Function: commitTransactionQuery],
              rollbackTransactionQuery: [Function: rollbackTransactionQuery],
              addLimitAndOffset: [Function: addLimitAndOffset],
              whereQuery: [Function: whereQuery],
              whereItemsQuery: [Function: whereItemsQuery],
              OperatorsAliasMap: false,
              setOperatorsAliases: [Function: setOperatorsAliases],
              whereItemQuery: [Function: whereItemQuery],
              _findField: [Function: _findField],
              _replaceAliases: [Function: _replaceAliases],
              _whereGroupBind: [Function: _whereGroupBind],
              _whereBind: [Function: _whereBind],
              _whereJSON: [Function: _whereJSON],
              _traverseJSON: [Function: _traverseJSON],
              _castKey: [Function: _castKey],
              _getJsonCast: [Function: _getJsonCast],
              _joinKeyValue: [Function: _joinKeyValue],
              _getSafeKey: [Function: _getSafeKey],
              _prefixKey: [Function: _prefixKey],
              _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
              getWhereConditions: [Function: getWhereConditions],
              parseConditionObject: [Function: parseConditionObject],
              isIdentifierQuoted: [Function: isIdentifierQuoted],
              booleanValue: [Function: booleanValue],
              _dialect:
               MysqlDialect {
                 sequelize: [Circular],
                 connectionManager:
                  ConnectionManager {
                    sequelize: [Circular],
                    config:
                     { database: 'burger_db',
                       username: 'root',
                       password: 'password',
                       host: 'localhost',
                       port: 3306,
                       pool:
                        { max: 5,
                          min: 0,
                          acquire: 30000,
                          idle: 10000,
                          evict: 10000,
                          handleDisconnects: true,
                          validate: [Function: bound _validate],
                          Promise:
                           { [Function: Promise]
                             TypeError: [Function: TypeError],
                             RangeError: [Function: RangeError],
                             CancellationError: [Function: SubError],
                             TimeoutError: [Function: SubError],
                             OperationalError: [Function: OperationalError],
                             RejectionError: [Function: OperationalError],
                             AggregateError: [Function: SubError],
                             _peekContext: [Function],
                             onPossiblyUnhandledRejection: [Function],
                             onUnhandledRejectionHandled: [Function],
                             longStackTraces: [Function],
                             hasLongStackTraces: [Function],
                             config: [Function],
                             getNewLibraryCopy: [Function],
                             is: [Function],
                             fromCallback: [Function],
                             fromNode: [Function],
                             all: [Function],
                             cast: [Function],
                             fulfilled: [Function],
                             resolve: [Function],
                             rejected: [Function],
                             reject: [Function],
                             setScheduler: [Function],
                             pending: [Function],
                             defer: [Function],
                             method: [Function],
                             try: [Function],
                             attempt: [Function],
                             bind: [Function],
                             PromiseInspection: [Function: PromiseInspection],
                             join: [Function],
                             Promise: [Circular],
                             version: '3.5.3',
                             map: [Function],
                             using: [Function],
                             delay: [Function],
                             coroutine: { [Function] addYieldHandler: [Function] },
                             spawn: [Function],
                             promisify: [Function],
                             promisifyAll: [Function],
                             props: [Function],
                             race: [Function],
                             reduce: [Function],
                             settle: [Function],
                             some: [Function],
                             _SomePromiseArray: [Function: SomePromiseArray],
                             filter: [Function],
                             each: [Function],
                             mapSeries: [Function: PromiseMapSeries],
                             any: [Function],
                             default: [Circular] } },
                       protocol: 'tcp',
                       native: false,
                       ssl: undefined,
                       replication: false,
                       dialectModulePath: null,
                       keepDefaultTimezone: undefined,
                       dialectOptions: undefined },
                    dialect: [Circular],
                    versionPromise: null,
                    dialectName: 'mysql',
                    pool:
                     Pool {
                       _events: [Object: null prototype] {},
                       _eventsCount: 0,
                       _maxListeners: undefined,
                       _config:
                        PoolOptions {
                          fifo: true,
                          priorityRange: 1,
                          testOnBorrow: true,
                          testOnReturn: false,
                          autostart: false,
                          acquireTimeoutMillis: 30000,
                          max: 5,
                          min: 0,
                          evictionRunIntervalMillis: 10000,
                          numTestsPerEvictionRun: 3,
                          softIdleTimeoutMillis: -1,
                          idleTimeoutMillis: 10000,
                          Promise:
                           { [Function: Promise]
                             TypeError: [Function: TypeError],
                             RangeError: [Function: RangeError],
                             CancellationError: [Function: SubError],
                             TimeoutError: [Function: SubError],
                             OperationalError: [Function: OperationalError],
                             RejectionError: [Function: OperationalError],
                             AggregateError: [Function: SubError],
                             _peekContext: [Function],
                             onPossiblyUnhandledRejection: [Function],
                             onUnhandledRejectionHandled: [Function],
                             longStackTraces: [Function],
                             hasLongStackTraces: [Function],
                             config: [Function],
                             getNewLibraryCopy: [Function],
                             is: [Function],
                             fromCallback: [Function],
                             fromNode: [Function],
                             all: [Function],
                             cast: [Function],
                             fulfilled: [Function],
                             resolve: [Function],
                             rejected: [Function],
                             reject: [Function],
                             setScheduler: [Function],
                             pending: [Function],
                             defer: [Function],
                             method: [Function],
                             try: [Function],
                             attempt: [Function],
                             bind: [Function],
                             PromiseInspection: [Function: PromiseInspection],
                             join: [Function],
                             Promise: [Circular],
                             version: '3.5.3',
                             map: [Function],
                             using: [Function],
                             delay: [Function],
                             coroutine: { [Function] addYieldHandler: [Function] },
                             spawn: [Function],
                             promisify: [Function],
                             promisifyAll: [Function],
                             props: [Function],
                             race: [Function],
                             reduce: [Function],
                             settle: [Function],
                             some: [Function],
                             _SomePromiseArray: [Function: SomePromiseArray],
                             filter: [Function],
                             each: [Function],
                             mapSeries: [Function: PromiseMapSeries],
                             any: [Function],
                             default: [Circular] } },
                       _Promise:
                        { [Function: Promise]
                          TypeError: [Function: TypeError],
                          RangeError: [Function: RangeError],
                          CancellationError: [Function: SubError],
                          TimeoutError: [Function: SubError],
                          OperationalError: [Function: OperationalError],
                          RejectionError: [Function: OperationalError],
                          AggregateError: [Function: SubError],
                          _peekContext: [Function],
                          onPossiblyUnhandledRejection: [Function],
                          onUnhandledRejectionHandled: [Function],
                          longStackTraces: [Function],
                          hasLongStackTraces: [Function],
                          config: [Function],
                          getNewLibraryCopy: [Function],
                          is: [Function],
                          fromCallback: [Function],
                          fromNode: [Function],
                          all: [Function],
                          cast: [Function],
                          fulfilled: [Function],
                          resolve: [Function],
                          rejected: [Function],
                          reject: [Function],
                          setScheduler: [Function],
                          pending: [Function],
                          defer: [Function],
                          method: [Function],
                          try: [Function],
                          attempt: [Function],
                          bind: [Function],
                          PromiseInspection: [Function: PromiseInspection],
                          join: [Function],
                          Promise: [Circular],
                          version: '3.5.3',
                          map: [Function],
                          using: [Function],
                          delay: [Function],
                          coroutine: { [Function] addYieldHandler: [Function] },
                          spawn: [Function],
                          promisify: [Function],
                          promisifyAll: [Function],
                          props: [Function],
                          race: [Function],
                          reduce: [Function],
                          settle: [Function],
                          some: [Function],
                          _SomePromiseArray: [Function: SomePromiseArray],
                          filter: [Function],
                          each: [Function],
                          mapSeries: [Function: PromiseMapSeries],
                          any: [Function],
                          default: [Circular] },
                       _factory:
                        { create: [Function: create],
                          destroy: [Function: destroy],
                          validate: [Function: bound _validate] },
                       _draining: false,
                       _started: false,
                       _waitingClientsQueue:
                        PriorityQueue {
                          _size: 1,
                          _slots:
                           [ Queue {
                               _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
                       _factoryCreateOperations: Set {},
                       _factoryDestroyOperations: Set {},
                       _availableObjects:
                        Deque {
                          _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
                       _testOnBorrowResources: Set {},
                       _testOnReturnResources: Set {},
                       _validationOperations: Set {},
                       _allObjects: Set {},
                       _resourceLoans: Map {},
                       _evictionIterator:
                        DequeIterator {
                          _list: DoublyLinkedList { head: null, tail: null, length: 0 },
                          _direction: 'next',
                          _startPosition: 'head',
                          _started: false,
                          _cursor: null,
                          _done: false },
                       _evictor: DefaultEvictor {},
                       _scheduledEviction: null },
                    lib:
                     { createConnection: [Function],
                       connect: [Function],
                       Connection: [Function: Connection],
                       createPool: [Function],
                       createPoolCluster: [Function],
                       createQuery: [Function: createQuery],
                       Pool: [Function: Pool],
                       createServer: [Function],
                       PoolConnection:
                        { [Function: PoolConnection] statementKey: [Function: statementKey] },
                       escape: [Function: escape],
                       escapeId: [Function: escapeId],
                       format: [Function: format],
                       raw: [Function: raw],
                       createConnectionPromise: [Getter],
                       createPoolPromise: [Getter],
                       createPoolClusterPromise: [Getter],
                       Types: [Getter],
                       Charsets: [Getter],
                       CharsetToEncoding: [Getter],
                       setMaxParserCache: [Function],
                       clearParserCache: [Function] } },
                 QueryGenerator: [Circular] },
              sequelize: [Circular],
              typeValidation: undefined } },
        models: { burgers: [Circular] },
        modelManager:
         ModelManager { models: [ [Circular] ], sequelize: [Circular] },
        connectionManager:
         ConnectionManager {
           sequelize: [Circular],
           config:
            { database: 'burger_db',
              username: 'root',
              password: 'password',
              host: 'localhost',
              port: 3306,
              pool:
               { max: 5,
                 min: 0,
                 acquire: 30000,
                 idle: 10000,
                 evict: 10000,
                 handleDisconnects: true,
                 validate: [Function: bound _validate],
                 Promise:
                  { [Function: Promise]
                    TypeError: [Function: TypeError],
                    RangeError: [Function: RangeError],
                    CancellationError: [Function: SubError],
                    TimeoutError: [Function: SubError],
                    OperationalError: [Function: OperationalError],
                    RejectionError: [Function: OperationalError],
                    AggregateError: [Function: SubError],
                    _peekContext: [Function],
                    onPossiblyUnhandledRejection: [Function],
                    onUnhandledRejectionHandled: [Function],
                    longStackTraces: [Function],
                    hasLongStackTraces: [Function],
                    config: [Function],
                    getNewLibraryCopy: [Function],
                    is: [Function],
                    fromCallback: [Function],
                    fromNode: [Function],
                    all: [Function],
                    cast: [Function],
                    fulfilled: [Function],
                    resolve: [Function],
                    rejected: [Function],
                    reject: [Function],
                    setScheduler: [Function],
                    pending: [Function],
                    defer: [Function],
                    method: [Function],
                    try: [Function],
                    attempt: [Function],
                    bind: [Function],
                    PromiseInspection: [Function: PromiseInspection],
                    join: [Function],
                    Promise: [Circular],
                    version: '3.5.3',
                    map: [Function],
                    using: [Function],
                    delay: [Function],
                    coroutine: { [Function] addYieldHandler: [Function] },
                    spawn: [Function],
                    promisify: [Function],
                    promisifyAll: [Function],
                    props: [Function],
                    race: [Function],
                    reduce: [Function],
                    settle: [Function],
                    some: [Function],
                    _SomePromiseArray: [Function: SomePromiseArray],
                    filter: [Function],
                    each: [Function],
                    mapSeries: [Function: PromiseMapSeries],
                    any: [Function],
                    default: [Circular] } },
              protocol: 'tcp',
              native: false,
              ssl: undefined,
              replication: false,
              dialectModulePath: null,
              keepDefaultTimezone: undefined,
              dialectOptions: undefined },
           dialect:
            MysqlDialect {
              sequelize: [Circular],
              connectionManager: [Circular],
              QueryGenerator:
               { dialect: 'mysql',
                 OperatorMap:
                  { [Symbol(eq)]: '=',
                    [Symbol(ne)]: '!=',
                    [Symbol(gte)]: '>=',
                    [Symbol(gt)]: '>',
                    [Symbol(lte)]: '<=',
                    [Symbol(lt)]: '<',
                    [Symbol(not)]: 'IS NOT',
                    [Symbol(is)]: 'IS',
                    [Symbol(in)]: 'IN',
                    [Symbol(notIn)]: 'NOT IN',
                    [Symbol(like)]: 'LIKE',
                    [Symbol(notLike)]: 'NOT LIKE',
                    [Symbol(iLike)]: 'ILIKE',
                    [Symbol(notILike)]: 'NOT ILIKE',
                    [Symbol(regexp)]: 'REGEXP',
                    [Symbol(notRegexp)]: 'NOT REGEXP',
                    [Symbol(iRegexp)]: '~*',
                    [Symbol(notIRegexp)]: '!~*',
                    [Symbol(between)]: 'BETWEEN',
                    [Symbol(notBetween)]: 'NOT BETWEEN',
                    [Symbol(overlap)]: '&&',
                    [Symbol(contains)]: '@>',
                    [Symbol(contained)]: '<@',
                    [Symbol(adjacent)]: '-|-',
                    [Symbol(strictLeft)]: '<<',
                    [Symbol(strictRight)]: '>>',
                    [Symbol(noExtendRight)]: '&<',
                    [Symbol(noExtendLeft)]: '&>',
                    [Symbol(any)]: 'ANY',
                    [Symbol(all)]: 'ALL',
                    [Symbol(and)]: ' AND ',
                    [Symbol(or)]: ' OR ',
                    [Symbol(col)]: 'COL',
                    [Symbol(placeholder)]: '$$PLACEHOLDER$$',
                    [Symbol(raw)]: 'DEPRECATED' },
                 createSchema: [Function: createSchema],
                 showSchemasQuery: [Function: showSchemasQuery],
                 versionQuery: [Function: versionQuery],
                 createTableQuery: [Function: createTableQuery],
                 showTablesQuery: [Function: showTablesQuery],
                 addColumnQuery: [Function: addColumnQuery],
                 removeColumnQuery: [Function: removeColumnQuery],
                 changeColumnQuery: [Function: changeColumnQuery],
                 renameColumnQuery: [Function: renameColumnQuery],
                 handleSequelizeMethod: [Function: handleSequelizeMethod],
                 _toJSONValue: [Function: _toJSONValue],
                 upsertQuery: [Function: upsertQuery],
                 deleteQuery: [Function: deleteQuery],
                 showIndexesQuery: [Function: showIndexesQuery],
                 showConstraintsQuery: [Function: showConstraintsQuery],
                 removeIndexQuery: [Function: removeIndexQuery],
                 attributeToSQL: [Function: attributeToSQL],
                 attributesToSQL: [Function: attributesToSQL],
                 quoteIdentifier: [Function: quoteIdentifier],
                 _checkValidJsonStatement: [Function: _checkValidJsonStatement],
                 jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
                 _getForeignKeysQueryFields: [Function: _getForeignKeysQueryFields],
                 getForeignKeysQuery: [Function: getForeignKeysQuery],
                 getForeignKeyQuery: [Function: getForeignKeyQuery],
                 dropForeignKeyQuery: [Function: dropForeignKeyQuery],
                 _templateSettings:
                  { escape: /<%-([\s\S]+?)%>/g,
                    evaluate: /<%([\s\S]+?)%>/g,
                    interpolate: /<%=([\s\S]+?)%>/g,
                    variable: '',
                    imports:
                     { _:
                        { [Function: lodash]
                          templateSettings: [Circular],
                          after: [Function: after],
                          ary: [Function: ary],
                          assign: [Function],
                          assignIn: [Function],
                          assignInWith: [Function],
                          assignWith: [Function],
                          at: [Function],
                          before: [Function: before],
                          bind: { [Function] placeholder: [Circular] },
                          bindAll: [Function],
                          bindKey: { [Function] placeholder: [Circular] },
                          castArray: [Function: castArray],
                          chain: [Function: chain],
                          chunk: [Function: chunk],
                          compact: [Function: compact],
                          concat: [Function: concat],
                          cond: [Function: cond],
                          conforms: [Function: conforms],
                          constant: [Function: constant],
                          countBy: [Function],
                          create: [Function: create],
                          curry: { [Function: curry] placeholder: [Circular] },
                          curryRight: { [Function: curryRight] placeholder: [Circular] },
                          debounce: [Function: debounce],
                          defaults: [Function],
                          defaultsDeep: [Function],
                          defer: [Function],
                          delay: [Function],
                          difference: [Function],
                          differenceBy: [Function],
                          differenceWith: [Function],
                          drop: [Function: drop],
                          dropRight: [Function: dropRight],
                          dropRightWhile: [Function: dropRightWhile],
                          dropWhile: [Function: dropWhile],
                          fill: [Function: fill],
                          filter: [Function: filter],
                          flatMap: [Function: flatMap],
                          flatMapDeep: [Function: flatMapDeep],
                          flatMapDepth: [Function: flatMapDepth],
                          flatten: [Function: flatten],
                          flattenDeep: [Function: flattenDeep],
                          flattenDepth: [Function: flattenDepth],
                          flip: [Function: flip],
                          flow: [Function],
                          flowRight: [Function],
                          fromPairs: [Function: fromPairs],
                          functions: [Function: functions],
                          functionsIn: [Function: functionsIn],
                          groupBy: [Function],
                          initial: [Function: initial],
                          intersection: [Function],
                          intersectionBy: [Function],
                          intersectionWith: [Function],
                          invert: [Function],
                          invertBy: [Function],
                          invokeMap: [Function],
                          iteratee: [Function: iteratee],
                          keyBy: [Function],
                          keys: [Function: keys],
                          keysIn: [Function: keysIn],
                          map: [Function: map],
                          mapKeys: [Function: mapKeys],
                          mapValues: [Function: mapValues],
                          matches: [Function: matches],
                          matchesProperty: [Function: matchesProperty],
                          memoize: { [Function: memoize] Cache: [Function: MapCache] },
                          merge: [Function],
                          mergeWith: [Function],
                          method: [Function],
                          methodOf: [Function],
                          mixin: [Function: mixin],
                          negate: [Function: negate],
                          nthArg: [Function: nthArg],
                          omit: [Function],
                          omitBy: [Function: omitBy],
                          once: [Function: once],
                          orderBy: [Function: orderBy],
                          over: [Function],
                          overArgs: [Function],
                          overEvery: [Function],
                          overSome: [Function],
                          partial: { [Function] placeholder: [Circular] },
                          partialRight: { [Function] placeholder: [Circular] },
                          partition: [Function],
                          pick: [Function],
                          pickBy: [Function: pickBy],
                          property: [Function: property],
                          propertyOf: [Function: propertyOf],
                          pull: [Function],
                          pullAll: [Function: pullAll],
                          pullAllBy: [Function: pullAllBy],
                          pullAllWith: [Function: pullAllWith],
                          pullAt: [Function],
                          range: [Function],
                          rangeRight: [Function],
                          rearg: [Function],
                          reject: [Function: reject],
                          remove: [Function: remove],
                          rest: [Function: rest],
                          reverse: [Function: reverse],
                          sampleSize: [Function: sampleSize],
                          set: [Function: set],
                          setWith: [Function: setWith],
                          shuffle: [Function: shuffle],
                          slice: [Function: slice],
                          sortBy: [Function],
                          sortedUniq: [Function: sortedUniq],
                          sortedUniqBy: [Function: sortedUniqBy],
                          split: [Function: split],
                          spread: [Function: spread],
                          tail: [Function: tail],
                          take: [Function: take],
                          takeRight: [Function: takeRight],
                          takeRightWhile: [Function: takeRightWhile],
                          takeWhile: [Function: takeWhile],
                          tap: [Function: tap],
                          throttle: [Function: throttle],
                          thru: [Function: thru],
                          toArray: [Function: toArray],
                          toPairs: [Function],
                          toPairsIn: [Function],
                          toPath: [Function: toPath],
                          toPlainObject: [Function: toPlainObject],
                          transform: [Function: transform],
                          unary: [Function: unary],
                          union: [Function],
                          unionBy: [Function],
                          unionWith: [Function],
                          uniq: [Function: uniq],
                          uniqBy: [Function: uniqBy],
                          uniqWith: [Function: uniqWith],
                          unset: [Function: unset],
                          unzip: [Function: unzip],
                          unzipWith: [Function: unzipWith],
                          update: [Function: update],
                          updateWith: [Function: updateWith],
                          values: [Function: values],
                          valuesIn: [Function: valuesIn],
                          without: [Function],
                          words: [Function: words],
                          wrap: [Function: wrap],
                          xor: [Function],
                          xorBy: [Function],
                          xorWith: [Function],
                          zip: [Function],
                          zipObject: [Function: zipObject],
                          zipObjectDeep: [Function: zipObjectDeep],
                          zipWith: [Function],
                          entries: [Function],
                          entriesIn: [Function],
                          extend: [Function],
                          extendWith: [Function],
                          add: [Function],
                          attempt: [Function],
                          camelCase: [Function],
                          capitalize: [Function: capitalize],
                          ceil: [Function],
                          clamp: [Function: clamp],
                          clone: [Function: clone],
                          cloneDeep: [Function: cloneDeep],
                          cloneDeepWith: [Function: cloneDeepWith],
                          cloneWith: [Function: cloneWith],
                          conformsTo: [Function: conformsTo],
                          deburr: [Function: deburr],
                          defaultTo: [Function: defaultTo],
                          divide: [Function],
                          endsWith: [Function: endsWith],
                          eq: [Function: eq],
                          escape: [Function: escape],
                          escapeRegExp: [Function: escapeRegExp],
                          every: [Function: every],
                          find: [Function],
                          findIndex: [Function: findIndex],
                          findKey: [Function: findKey],
                          findLast: [Function],
                          findLastIndex: [Function: findLastIndex],
                          findLastKey: [Function: findLastKey],
                          floor: [Function],
                          forEach: [Function: forEach],
                          forEachRight: [Function: forEachRight],
                          forIn: [Function: forIn],
                          forInRight: [Function: forInRight],
                          forOwn: [Function: forOwn],
                          forOwnRight: [Function: forOwnRight],
                          get: [Function: get],
                          gt: [Function],
                          gte: [Function],
                          has: [Function: has],
                          hasIn: [Function: hasIn],
                          head: [Function: head],
                          identity: [Function: identity],
                          includes: [Function: includes],
                          indexOf: [Function: indexOf],
                          inRange: [Function: inRange],
                          invoke: [Function],
                          isArguments: [Function: baseIsArguments],
                          isArray: [Function: isArray],
                          isArrayBuffer: [Function],
                          isArrayLike: [Function: isArrayLike],
                          isArrayLikeObject: [Function: isArrayLikeObject],
                          isBoolean: [Function: isBoolean],
                          isBuffer: [Function: isBuffer],
                          isDate: [Function],
                          isElement: [Function: isElement],
                          isEmpty: [Function: isEmpty],
                          isEqual: [Function: isEqual],
                          isEqualWith: [Function: isEqualWith],
                          isError: [Function: isError],
                          isFinite: [Function: isFinite],
                          isFunction: [Function: isFunction],
                          isInteger: [Function: isInteger],
                          isLength: [Function: isLength],
                          isMap: [Function],
                          isMatch: [Function: isMatch],
                          isMatchWith: [Function: isMatchWith],
                          isNaN: [Function: isNaN],
                          isNative: [Function: isNative],
                          isNil: [Function: isNil],
                          isNull: [Function: isNull],
                          isNumber: [Function: isNumber],
                          isObject: [Function: isObject],
                          isObjectLike: [Function: isObjectLike],
                          isPlainObject: [Function: isPlainObject],
                          isRegExp: [Function],
                          isSafeInteger: [Function: isSafeInteger],
                          isSet: [Function],
                          isString: [Function: isString],
                          isSymbol: [Function: isSymbol],
                          isTypedArray: [Function],
                          isUndefined: [Function: isUndefined],
                          isWeakMap: [Function: isWeakMap],
                          isWeakSet: [Function: isWeakSet],
                          join: [Function: join],
                          kebabCase: [Function],
                          last: [Function: last],
                          lastIndexOf: [Function: lastIndexOf],
                          lowerCase: [Function],
                          lowerFirst: [Function],
                          lt: [Function],
                          lte: [Function],
                          max: [Function: max],
                          maxBy: [Function: maxBy],
                          mean: [Function: mean],
                          meanBy: [Function: meanBy],
                          min: [Function: min],
                          minBy: [Function: minBy],
                          stubArray: [Function: stubArray],
                          stubFalse: [Function: stubFalse],
                          stubObject: [Function: stubObject],
                          stubString: [Function: stubString],
                          stubTrue: [Function: stubTrue],
                          multiply: [Function],
                          nth: [Function: nth],
                          noConflict: [Function: noConflict],
                          noop: [Function: noop],
                          now: [Function],
                          pad: [Function: pad],
                          padEnd: [Function: padEnd],
                          padStart: [Function: padStart],
                          parseInt: [Function: parseInt],
                          random: [Function: random],
                          reduce: [Function: reduce],
                          reduceRight: [Function: reduceRight],
                          repeat: [Function: repeat],
                          replace: [Function: replace],
                          result: [Function: result],
                          round: [Function],
                          runInContext: [Function: runInContext],
                          sample: [Function: sample],
                          size: [Function: size],
                          snakeCase: [Function],
                          some: [Function: some],
                          sortedIndex: [Function: sortedIndex],
                          sortedIndexBy: [Function: sortedIndexBy],
                          sortedIndexOf: [Function: sortedIndexOf],
                          sortedLastIndex: [Function: sortedLastIndex],
                          sortedLastIndexBy: [Function: sortedLastIndexBy],
                          sortedLastIndexOf: [Function: sortedLastIndexOf],
                          startCase: [Function],
                          startsWith: [Function: startsWith],
                          subtract: [Function],
                          sum: [Function: sum],
                          sumBy: [Function: sumBy],
                          template: [Function: template],
                          times: [Function: times],
                          toFinite: [Function: toFinite],
                          toInteger: [Function: toInteger],
                          toLength: [Function: toLength],
                          toLower: [Function: toLower],
                          toNumber: [Function: toNumber],
                          toSafeInteger: [Function: toSafeInteger],
                          toString: [Function: toString],
                          toUpper: [Function: toUpper],
                          trim: [Function: trim],
                          trimEnd: [Function: trimEnd],
                          trimStart: [Function: trimStart],
                          truncate: [Function: truncate],
                          unescape: [Function: unescape],
                          uniqueId: [Function: uniqueId],
                          upperCase: [Function],
                          upperFirst: [Function],
                          each: [Function: forEach],
                          eachRight: [Function: forEachRight],
                          first: [Function: head],
                          VERSION: '4.17.11' } } },
                 options:
                  { dialect: 'mysql',
                    dialectModulePath: null,
                    host: 'localhost',
                    protocol: 'tcp',
                    define:
                     { underscored: false, freezeTableName: true, timestamps: true },
                    query: {},
                    sync: {},
                    timezone: '+00:00',
                    logging: false,
                    omitNull: false,
                    native: false,
                    replication: false,
                    ssl: undefined,
                    pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
                    quoteIdentifiers: true,
                    hooks: {},
                    retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
                    transactionType: 'DEFERRED',
                    isolationLevel: null,
                    databaseVersion: 0,
                    typeValidation: false,
                    benchmark: false,
                    operatorsAliases: false,
                    username: 'root',
                    password: 'password',
                    database: 'burger_db',
                    port: 3306 },
                 extractTableDetails: [Function: extractTableDetails],
                 addSchema: [Function: addSchema],
                 dropSchema: [Function: dropSchema],
                 describeTableQuery: [Function: describeTableQuery],
                 dropTableQuery: [Function: dropTableQuery],
                 renameTableQuery: [Function: renameTableQuery],
                 insertQuery: [Function: insertQuery],
                 bulkInsertQuery: [Function: bulkInsertQuery],
                 updateQuery: [Function: updateQuery],
                 arithmeticQuery: [Function: arithmeticQuery],
                 nameIndexes: [Function: nameIndexes],
                 addIndexQuery: [Function: addIndexQuery],
                 addConstraintQuery: [Function: addConstraintQuery],
                 getConstraintSnippet: [Function: getConstraintSnippet],
                 removeConstraintQuery: [Function: removeConstraintQuery],
                 quoteTable: [Function: quoteTable],
                 quote: [Function: quote],
                 quoteIdentifiers: [Function: quoteIdentifiers],
                 escape: [Function: escape],
                 selectQuery: [Function: selectQuery],
                 escapeAttributes: [Function: escapeAttributes],
                 generateInclude: [Function: generateInclude],
                 generateJoin: [Function: generateJoin],
                 generateThroughJoin: [Function: generateThroughJoin],
                 _generateSubQueryFilter: [Function: _generateSubQueryFilter],
                 _getRequiredClosure: [Function: _getRequiredClosure],
                 getQueryOrders: [Function: getQueryOrders],
                 selectFromTableFragment: [Function: selectFromTableFragment],
                 setAutocommitQuery: [Function: setAutocommitQuery],
                 setIsolationLevelQuery: [Function: setIsolationLevelQuery],
                 generateTransactionId: [Function: generateTransactionId],
                 startTransactionQuery: [Function: startTransactionQuery],
                 deferConstraintsQuery: [Function: deferConstraintsQuery],
                 setConstraintQuery: [Function: setConstraintQuery],
                 setDeferredQuery: [Function: setDeferredQuery],
                 setImmediateQuery: [Function: setImmediateQuery],
                 commitTransactionQuery: [Function: commitTransactionQuery],
                 rollbackTransactionQuery: [Function: rollbackTransactionQuery],
                 addLimitAndOffset: [Function: addLimitAndOffset],
                 whereQuery: [Function: whereQuery],
                 whereItemsQuery: [Function: whereItemsQuery],
                 OperatorsAliasMap: false,
                 setOperatorsAliases: [Function: setOperatorsAliases],
                 whereItemQuery: [Function: whereItemQuery],
                 _findField: [Function: _findField],
                 _replaceAliases: [Function: _replaceAliases],
                 _whereGroupBind: [Function: _whereGroupBind],
                 _whereBind: [Function: _whereBind],
                 _whereJSON: [Function: _whereJSON],
                 _traverseJSON: [Function: _traverseJSON],
                 _castKey: [Function: _castKey],
                 _getJsonCast: [Function: _getJsonCast],
                 _joinKeyValue: [Function: _joinKeyValue],
                 _getSafeKey: [Function: _getSafeKey],
                 _prefixKey: [Function: _prefixKey],
                 _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
                 getWhereConditions: [Function: getWhereConditions],
                 parseConditionObject: [Function: parseConditionObject],
                 isIdentifierQuoted: [Function: isIdentifierQuoted],
                 booleanValue: [Function: booleanValue],
                 _dialect: [Circular],
                 sequelize: [Circular],
                 typeValidation: undefined } },
           versionPromise: null,
           dialectName: 'mysql',
           pool:
            Pool {
              _events: [Object: null prototype] {},
              _eventsCount: 0,
              _maxListeners: undefined,
              _config:
               PoolOptions {
                 fifo: true,
                 priorityRange: 1,
                 testOnBorrow: true,
                 testOnReturn: false,
                 autostart: false,
                 acquireTimeoutMillis: 30000,
                 max: 5,
                 min: 0,
                 evictionRunIntervalMillis: 10000,
                 numTestsPerEvictionRun: 3,
                 softIdleTimeoutMillis: -1,
                 idleTimeoutMillis: 10000,
                 Promise:
                  { [Function: Promise]
                    TypeError: [Function: TypeError],
                    RangeError: [Function: RangeError],
                    CancellationError: [Function: SubError],
                    TimeoutError: [Function: SubError],
                    OperationalError: [Function: OperationalError],
                    RejectionError: [Function: OperationalError],
                    AggregateError: [Function: SubError],
                    _peekContext: [Function],
                    onPossiblyUnhandledRejection: [Function],
                    onUnhandledRejectionHandled: [Function],
                    longStackTraces: [Function],
                    hasLongStackTraces: [Function],
                    config: [Function],
                    getNewLibraryCopy: [Function],
                    is: [Function],
                    fromCallback: [Function],
                    fromNode: [Function],
                    all: [Function],
                    cast: [Function],
                    fulfilled: [Function],
                    resolve: [Function],
                    rejected: [Function],
                    reject: [Function],
                    setScheduler: [Function],
                    pending: [Function],
                    defer: [Function],
                    method: [Function],
                    try: [Function],
                    attempt: [Function],
                    bind: [Function],
                    PromiseInspection: [Function: PromiseInspection],
                    join: [Function],
                    Promise: [Circular],
                    version: '3.5.3',
                    map: [Function],
                    using: [Function],
                    delay: [Function],
                    coroutine: { [Function] addYieldHandler: [Function] },
                    spawn: [Function],
                    promisify: [Function],
                    promisifyAll: [Function],
                    props: [Function],
                    race: [Function],
                    reduce: [Function],
                    settle: [Function],
                    some: [Function],
                    _SomePromiseArray: [Function: SomePromiseArray],
                    filter: [Function],
                    each: [Function],
                    mapSeries: [Function: PromiseMapSeries],
                    any: [Function],
                    default: [Circular] } },
              _Promise:
               { [Function: Promise]
                 TypeError: [Function: TypeError],
                 RangeError: [Function: RangeError],
                 CancellationError: [Function: SubError],
                 TimeoutError: [Function: SubError],
                 OperationalError: [Function: OperationalError],
                 RejectionError: [Function: OperationalError],
                 AggregateError: [Function: SubError],
                 _peekContext: [Function],
                 onPossiblyUnhandledRejection: [Function],
                 onUnhandledRejectionHandled: [Function],
                 longStackTraces: [Function],
                 hasLongStackTraces: [Function],
                 config: [Function],
                 getNewLibraryCopy: [Function],
                 is: [Function],
                 fromCallback: [Function],
                 fromNode: [Function],
                 all: [Function],
                 cast: [Function],
                 fulfilled: [Function],
                 resolve: [Function],
                 rejected: [Function],
                 reject: [Function],
                 setScheduler: [Function],
                 pending: [Function],
                 defer: [Function],
                 method: [Function],
                 try: [Function],
                 attempt: [Function],
                 bind: [Function],
                 PromiseInspection: [Function: PromiseInspection],
                 join: [Function],
                 Promise: [Circular],
                 version: '3.5.3',
                 map: [Function],
                 using: [Function],
                 delay: [Function],
                 coroutine: { [Function] addYieldHandler: [Function] },
                 spawn: [Function],
                 promisify: [Function],
                 promisifyAll: [Function],
                 props: [Function],
                 race: [Function],
                 reduce: [Function],
                 settle: [Function],
                 some: [Function],
                 _SomePromiseArray: [Function: SomePromiseArray],
                 filter: [Function],
                 each: [Function],
                 mapSeries: [Function: PromiseMapSeries],
                 any: [Function],
                 default: [Circular] },
              _factory:
               { create: [Function: create],
                 destroy: [Function: destroy],
                 validate: [Function: bound _validate] },
              _draining: false,
              _started: false,
              _waitingClientsQueue:
               PriorityQueue {
                 _size: 1,
                 _slots:
                  [ Queue {
                      _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
              _factoryCreateOperations: Set {},
              _factoryDestroyOperations: Set {},
              _availableObjects:
               Deque {
                 _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
              _testOnBorrowResources: Set {},
              _testOnReturnResources: Set {},
              _validationOperations: Set {},
              _allObjects: Set {},
              _resourceLoans: Map {},
              _evictionIterator:
               DequeIterator {
                 _list: DoublyLinkedList { head: null, tail: null, length: 0 },
                 _direction: 'next',
                 _startPosition: 'head',
                 _started: false,
                 _cursor: null,
                 _done: false },
              _evictor: DefaultEvictor {},
              _scheduledEviction: null },
           lib:
            { createConnection: [Function],
              connect: [Function],
              Connection: [Function: Connection],
              createPool: [Function],
              createPoolCluster: [Function],
              createQuery: [Function: createQuery],
              Pool: [Function: Pool],
              createServer: [Function],
              PoolConnection:
               { [Function: PoolConnection] statementKey: [Function: statementKey] },
              escape: [Function: escape],
              escapeId: [Function: escapeId],
              format: [Function: format],
              raw: [Function: raw],
              createConnectionPromise: [Getter],
              createPoolPromise: [Getter],
              createPoolClusterPromise: [Getter],
              Types: [Getter],
              Charsets: [Getter],
              CharsetToEncoding: [Getter],
              setMaxParserCache: [Function],
              clearParserCache: [Function] } },
        importCache:
         { '/Users/paullinck/GitHub/GTPE/BurgerLogSequel/models/burger.js': [Circular] },
        test:
         { _trackRunningQueries: false,
           _runningQueries: 0,
           trackRunningQueries: [Function: trackRunningQueries],
           verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
     options:
      { timestamps: true,
        validate: {},
        freezeTableName: true,
        underscored: false,
        underscoredAll: false,
        paranoid: false,
        rejectOnEmpty: false,
        whereCollection: null,
        schema: null,
        schemaDelimiter: '',
        defaultScope: {},
        scopes: [],
        indexes: [],
        name: { plural: 'burgers', singular: 'burger' },
        omitNull: false,
        sequelize:
         Sequelize {
           options:
            { dialect: 'mysql',
              dialectModulePath: null,
              host: 'localhost',
              protocol: 'tcp',
              define:
               { underscored: false, freezeTableName: true, timestamps: true },
              query: {},
              sync: {},
              timezone: '+00:00',
              logging: false,
              omitNull: false,
              native: false,
              replication: false,
              ssl: undefined,
              pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
              quoteIdentifiers: true,
              hooks: {},
              retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
              transactionType: 'DEFERRED',
              isolationLevel: null,
              databaseVersion: 0,
              typeValidation: false,
              benchmark: false,
              operatorsAliases: false,
              username: 'root',
              password: 'password',
              database: 'burger_db',
              port: 3306 },
           config:
            { database: 'burger_db',
              username: 'root',
              password: 'password',
              host: 'localhost',
              port: 3306,
              pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
              protocol: 'tcp',
              native: false,
              ssl: undefined,
              replication: false,
              dialectModulePath: null,
              keepDefaultTimezone: undefined,
              dialectOptions: undefined },
           dialect:
            MysqlDialect {
              sequelize: [Circular],
              connectionManager:
               ConnectionManager {
                 sequelize: [Circular],
                 config:
                  { database: 'burger_db',
                    username: 'root',
                    password: 'password',
                    host: 'localhost',
                    port: 3306,
                    pool:
                     { max: 5,
                       min: 0,
                       acquire: 30000,
                       idle: 10000,
                       evict: 10000,
                       handleDisconnects: true,
                       validate: [Function: bound _validate],
                       Promise:
                        { [Function: Promise]
                          TypeError: [Function: TypeError],
                          RangeError: [Function: RangeError],
                          CancellationError: [Function: SubError],
                          TimeoutError: [Function: SubError],
                          OperationalError: [Function: OperationalError],
                          RejectionError: [Function: OperationalError],
                          AggregateError: [Function: SubError],
                          _peekContext: [Function],
                          onPossiblyUnhandledRejection: [Function],
                          onUnhandledRejectionHandled: [Function],
                          longStackTraces: [Function],
                          hasLongStackTraces: [Function],
                          config: [Function],
                          getNewLibraryCopy: [Function],
                          is: [Function],
                          fromCallback: [Function],
                          fromNode: [Function],
                          all: [Function],
                          cast: [Function],
                          fulfilled: [Function],
                          resolve: [Function],
                          rejected: [Function],
                          reject: [Function],
                          setScheduler: [Function],
                          pending: [Function],
                          defer: [Function],
                          method: [Function],
                          try: [Function],
                          attempt: [Function],
                          bind: [Function],
                          PromiseInspection: [Function: PromiseInspection],
                          join: [Function],
                          Promise: [Circular],
                          version: '3.5.3',
                          map: [Function],
                          using: [Function],
                          delay: [Function],
                          coroutine: { [Function] addYieldHandler: [Function] },
                          spawn: [Function],
                          promisify: [Function],
                          promisifyAll: [Function],
                          props: [Function],
                          race: [Function],
                          reduce: [Function],
                          settle: [Function],
                          some: [Function],
                          _SomePromiseArray: [Function: SomePromiseArray],
                          filter: [Function],
                          each: [Function],
                          mapSeries: [Function: PromiseMapSeries],
                          any: [Function],
                          default: [Circular] } },
                    protocol: 'tcp',
                    native: false,
                    ssl: undefined,
                    replication: false,
                    dialectModulePath: null,
                    keepDefaultTimezone: undefined,
                    dialectOptions: undefined },
                 dialect: [Circular],
                 versionPromise: null,
                 dialectName: 'mysql',
                 pool:
                  Pool {
                    _events: [Object: null prototype] {},
                    _eventsCount: 0,
                    _maxListeners: undefined,
                    _config:
                     PoolOptions {
                       fifo: true,
                       priorityRange: 1,
                       testOnBorrow: true,
                       testOnReturn: false,
                       autostart: false,
                       acquireTimeoutMillis: 30000,
                       max: 5,
                       min: 0,
                       evictionRunIntervalMillis: 10000,
                       numTestsPerEvictionRun: 3,
                       softIdleTimeoutMillis: -1,
                       idleTimeoutMillis: 10000,
                       Promise:
                        { [Function: Promise]
                          TypeError: [Function: TypeError],
                          RangeError: [Function: RangeError],
                          CancellationError: [Function: SubError],
                          TimeoutError: [Function: SubError],
                          OperationalError: [Function: OperationalError],
                          RejectionError: [Function: OperationalError],
                          AggregateError: [Function: SubError],
                          _peekContext: [Function],
                          onPossiblyUnhandledRejection: [Function],
                          onUnhandledRejectionHandled: [Function],
                          longStackTraces: [Function],
                          hasLongStackTraces: [Function],
                          config: [Function],
                          getNewLibraryCopy: [Function],
                          is: [Function],
                          fromCallback: [Function],
                          fromNode: [Function],
                          all: [Function],
                          cast: [Function],
                          fulfilled: [Function],
                          resolve: [Function],
                          rejected: [Function],
                          reject: [Function],
                          setScheduler: [Function],
                          pending: [Function],
                          defer: [Function],
                          method: [Function],
                          try: [Function],
                          attempt: [Function],
                          bind: [Function],
                          PromiseInspection: [Function: PromiseInspection],
                          join: [Function],
                          Promise: [Circular],
                          version: '3.5.3',
                          map: [Function],
                          using: [Function],
                          delay: [Function],
                          coroutine: { [Function] addYieldHandler: [Function] },
                          spawn: [Function],
                          promisify: [Function],
                          promisifyAll: [Function],
                          props: [Function],
                          race: [Function],
                          reduce: [Function],
                          settle: [Function],
                          some: [Function],
                          _SomePromiseArray: [Function: SomePromiseArray],
                          filter: [Function],
                          each: [Function],
                          mapSeries: [Function: PromiseMapSeries],
                          any: [Function],
                          default: [Circular] } },
                    _Promise:
                     { [Function: Promise]
                       TypeError: [Function: TypeError],
                       RangeError: [Function: RangeError],
                       CancellationError: [Function: SubError],
                       TimeoutError: [Function: SubError],
                       OperationalError: [Function: OperationalError],
                       RejectionError: [Function: OperationalError],
                       AggregateError: [Function: SubError],
                       _peekContext: [Function],
                       onPossiblyUnhandledRejection: [Function],
                       onUnhandledRejectionHandled: [Function],
                       longStackTraces: [Function],
                       hasLongStackTraces: [Function],
                       config: [Function],
                       getNewLibraryCopy: [Function],
                       is: [Function],
                       fromCallback: [Function],
                       fromNode: [Function],
                       all: [Function],
                       cast: [Function],
                       fulfilled: [Function],
                       resolve: [Function],
                       rejected: [Function],
                       reject: [Function],
                       setScheduler: [Function],
                       pending: [Function],
                       defer: [Function],
                       method: [Function],
                       try: [Function],
                       attempt: [Function],
                       bind: [Function],
                       PromiseInspection: [Function: PromiseInspection],
                       join: [Function],
                       Promise: [Circular],
                       version: '3.5.3',
                       map: [Function],
                       using: [Function],
                       delay: [Function],
                       coroutine: { [Function] addYieldHandler: [Function] },
                       spawn: [Function],
                       promisify: [Function],
                       promisifyAll: [Function],
                       props: [Function],
                       race: [Function],
                       reduce: [Function],
                       settle: [Function],
                       some: [Function],
                       _SomePromiseArray: [Function: SomePromiseArray],
                       filter: [Function],
                       each: [Function],
                       mapSeries: [Function: PromiseMapSeries],
                       any: [Function],
                       default: [Circular] },
                    _factory:
                     { create: [Function: create],
                       destroy: [Function: destroy],
                       validate: [Function: bound _validate] },
                    _draining: false,
                    _started: false,
                    _waitingClientsQueue:
                     PriorityQueue {
                       _size: 1,
                       _slots:
                        [ Queue {
                            _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
                    _factoryCreateOperations: Set {},
                    _factoryDestroyOperations: Set {},
                    _availableObjects:
                     Deque {
                       _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
                    _testOnBorrowResources: Set {},
                    _testOnReturnResources: Set {},
                    _validationOperations: Set {},
                    _allObjects: Set {},
                    _resourceLoans: Map {},
                    _evictionIterator:
                     DequeIterator {
                       _list: DoublyLinkedList { head: null, tail: null, length: 0 },
                       _direction: 'next',
                       _startPosition: 'head',
                       _started: false,
                       _cursor: null,
                       _done: false },
                    _evictor: DefaultEvictor {},
                    _scheduledEviction: null },
                 lib:
                  { createConnection: [Function],
                    connect: [Function],
                    Connection: [Function: Connection],
                    createPool: [Function],
                    createPoolCluster: [Function],
                    createQuery: [Function: createQuery],
                    Pool: [Function: Pool],
                    createServer: [Function],
                    PoolConnection:
                     { [Function: PoolConnection] statementKey: [Function: statementKey] },
                    escape: [Function: escape],
                    escapeId: [Function: escapeId],
                    format: [Function: format],
                    raw: [Function: raw],
                    createConnectionPromise: [Getter],
                    createPoolPromise: [Getter],
                    createPoolClusterPromise: [Getter],
                    Types: [Getter],
                    Charsets: [Getter],
                    CharsetToEncoding: [Getter],
                    setMaxParserCache: [Function],
                    clearParserCache: [Function] } },
              QueryGenerator:
               { dialect: 'mysql',
                 OperatorMap:
                  { [Symbol(eq)]: '=',
                    [Symbol(ne)]: '!=',
                    [Symbol(gte)]: '>=',
                    [Symbol(gt)]: '>',
                    [Symbol(lte)]: '<=',
                    [Symbol(lt)]: '<',
                    [Symbol(not)]: 'IS NOT',
                    [Symbol(is)]: 'IS',
                    [Symbol(in)]: 'IN',
                    [Symbol(notIn)]: 'NOT IN',
                    [Symbol(like)]: 'LIKE',
                    [Symbol(notLike)]: 'NOT LIKE',
                    [Symbol(iLike)]: 'ILIKE',
                    [Symbol(notILike)]: 'NOT ILIKE',
                    [Symbol(regexp)]: 'REGEXP',
                    [Symbol(notRegexp)]: 'NOT REGEXP',
                    [Symbol(iRegexp)]: '~*',
                    [Symbol(notIRegexp)]: '!~*',
                    [Symbol(between)]: 'BETWEEN',
                    [Symbol(notBetween)]: 'NOT BETWEEN',
                    [Symbol(overlap)]: '&&',
                    [Symbol(contains)]: '@>',
                    [Symbol(contained)]: '<@',
                    [Symbol(adjacent)]: '-|-',
                    [Symbol(strictLeft)]: '<<',
                    [Symbol(strictRight)]: '>>',
                    [Symbol(noExtendRight)]: '&<',
                    [Symbol(noExtendLeft)]: '&>',
                    [Symbol(any)]: 'ANY',
                    [Symbol(all)]: 'ALL',
                    [Symbol(and)]: ' AND ',
                    [Symbol(or)]: ' OR ',
                    [Symbol(col)]: 'COL',
                    [Symbol(placeholder)]: '$$PLACEHOLDER$$',
                    [Symbol(raw)]: 'DEPRECATED' },
                 createSchema: [Function: createSchema],
                 showSchemasQuery: [Function: showSchemasQuery],
                 versionQuery: [Function: versionQuery],
                 createTableQuery: [Function: createTableQuery],
                 showTablesQuery: [Function: showTablesQuery],
                 addColumnQuery: [Function: addColumnQuery],
                 removeColumnQuery: [Function: removeColumnQuery],
                 changeColumnQuery: [Function: changeColumnQuery],
                 renameColumnQuery: [Function: renameColumnQuery],
                 handleSequelizeMethod: [Function: handleSequelizeMethod],
                 _toJSONValue: [Function: _toJSONValue],
                 upsertQuery: [Function: upsertQuery],
                 deleteQuery: [Function: deleteQuery],
                 showIndexesQuery: [Function: showIndexesQuery],
                 showConstraintsQuery: [Function: showConstraintsQuery],
                 removeIndexQuery: [Function: removeIndexQuery],
                 attributeToSQL: [Function: attributeToSQL],
                 attributesToSQL: [Function: attributesToSQL],
                 quoteIdentifier: [Function: quoteIdentifier],
                 _checkValidJsonStatement: [Function: _checkValidJsonStatement],
                 jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
                 _getForeignKeysQueryFields: [Function: _getForeignKeysQueryFields],
                 getForeignKeysQuery: [Function: getForeignKeysQuery],
                 getForeignKeyQuery: [Function: getForeignKeyQuery],
                 dropForeignKeyQuery: [Function: dropForeignKeyQuery],
                 _templateSettings:
                  { escape: /<%-([\s\S]+?)%>/g,
                    evaluate: /<%([\s\S]+?)%>/g,
                    interpolate: /<%=([\s\S]+?)%>/g,
                    variable: '',
                    imports:
                     { _:
                        { [Function: lodash]
                          templateSettings: [Circular],
                          after: [Function: after],
                          ary: [Function: ary],
                          assign: [Function],
                          assignIn: [Function],
                          assignInWith: [Function],
                          assignWith: [Function],
                          at: [Function],
                          before: [Function: before],
                          bind: { [Function] placeholder: [Circular] },
                          bindAll: [Function],
                          bindKey: { [Function] placeholder: [Circular] },
                          castArray: [Function: castArray],
                          chain: [Function: chain],
                          chunk: [Function: chunk],
                          compact: [Function: compact],
                          concat: [Function: concat],
                          cond: [Function: cond],
                          conforms: [Function: conforms],
                          constant: [Function: constant],
                          countBy: [Function],
                          create: [Function: create],
                          curry: { [Function: curry] placeholder: [Circular] },
                          curryRight: { [Function: curryRight] placeholder: [Circular] },
                          debounce: [Function: debounce],
                          defaults: [Function],
                          defaultsDeep: [Function],
                          defer: [Function],
                          delay: [Function],
                          difference: [Function],
                          differenceBy: [Function],
                          differenceWith: [Function],
                          drop: [Function: drop],
                          dropRight: [Function: dropRight],
                          dropRightWhile: [Function: dropRightWhile],
                          dropWhile: [Function: dropWhile],
                          fill: [Function: fill],
                          filter: [Function: filter],
                          flatMap: [Function: flatMap],
                          flatMapDeep: [Function: flatMapDeep],
                          flatMapDepth: [Function: flatMapDepth],
                          flatten: [Function: flatten],
                          flattenDeep: [Function: flattenDeep],
                          flattenDepth: [Function: flattenDepth],
                          flip: [Function: flip],
                          flow: [Function],
                          flowRight: [Function],
                          fromPairs: [Function: fromPairs],
                          functions: [Function: functions],
                          functionsIn: [Function: functionsIn],
                          groupBy: [Function],
                          initial: [Function: initial],
                          intersection: [Function],
                          intersectionBy: [Function],
                          intersectionWith: [Function],
                          invert: [Function],
                          invertBy: [Function],
                          invokeMap: [Function],
                          iteratee: [Function: iteratee],
                          keyBy: [Function],
                          keys: [Function: keys],
                          keysIn: [Function: keysIn],
                          map: [Function: map],
                          mapKeys: [Function: mapKeys],
                          mapValues: [Function: mapValues],
                          matches: [Function: matches],
                          matchesProperty: [Function: matchesProperty],
                          memoize: { [Function: memoize] Cache: [Function: MapCache] },
                          merge: [Function],
                          mergeWith: [Function],
                          method: [Function],
                          methodOf: [Function],
                          mixin: [Function: mixin],
                          negate: [Function: negate],
                          nthArg: [Function: nthArg],
                          omit: [Function],
                          omitBy: [Function: omitBy],
                          once: [Function: once],
                          orderBy: [Function: orderBy],
                          over: [Function],
                          overArgs: [Function],
                          overEvery: [Function],
                          overSome: [Function],
                          partial: { [Function] placeholder: [Circular] },
                          partialRight: { [Function] placeholder: [Circular] },
                          partition: [Function],
                          pick: [Function],
                          pickBy: [Function: pickBy],
                          property: [Function: property],
                          propertyOf: [Function: propertyOf],
                          pull: [Function],
                          pullAll: [Function: pullAll],
                          pullAllBy: [Function: pullAllBy],
                          pullAllWith: [Function: pullAllWith],
                          pullAt: [Function],
                          range: [Function],
                          rangeRight: [Function],
                          rearg: [Function],
                          reject: [Function: reject],
                          remove: [Function: remove],
                          rest: [Function: rest],
                          reverse: [Function: reverse],
                          sampleSize: [Function: sampleSize],
                          set: [Function: set],
                          setWith: [Function: setWith],
                          shuffle: [Function: shuffle],
                          slice: [Function: slice],
                          sortBy: [Function],
                          sortedUniq: [Function: sortedUniq],
                          sortedUniqBy: [Function: sortedUniqBy],
                          split: [Function: split],
                          spread: [Function: spread],
                          tail: [Function: tail],
                          take: [Function: take],
                          takeRight: [Function: takeRight],
                          takeRightWhile: [Function: takeRightWhile],
                          takeWhile: [Function: takeWhile],
                          tap: [Function: tap],
                          throttle: [Function: throttle],
                          thru: [Function: thru],
                          toArray: [Function: toArray],
                          toPairs: [Function],
                          toPairsIn: [Function],
                          toPath: [Function: toPath],
                          toPlainObject: [Function: toPlainObject],
                          transform: [Function: transform],
                          unary: [Function: unary],
                          union: [Function],
                          unionBy: [Function],
                          unionWith: [Function],
                          uniq: [Function: uniq],
                          uniqBy: [Function: uniqBy],
                          uniqWith: [Function: uniqWith],
                          unset: [Function: unset],
                          unzip: [Function: unzip],
                          unzipWith: [Function: unzipWith],
                          update: [Function: update],
                          updateWith: [Function: updateWith],
                          values: [Function: values],
                          valuesIn: [Function: valuesIn],
                          without: [Function],
                          words: [Function: words],
                          wrap: [Function: wrap],
                          xor: [Function],
                          xorBy: [Function],
                          xorWith: [Function],
                          zip: [Function],
                          zipObject: [Function: zipObject],
                          zipObjectDeep: [Function: zipObjectDeep],
                          zipWith: [Function],
                          entries: [Function],
                          entriesIn: [Function],
                          extend: [Function],
                          extendWith: [Function],
                          add: [Function],
                          attempt: [Function],
                          camelCase: [Function],
                          capitalize: [Function: capitalize],
                          ceil: [Function],
                          clamp: [Function: clamp],
                          clone: [Function: clone],
                          cloneDeep: [Function: cloneDeep],
                          cloneDeepWith: [Function: cloneDeepWith],
                          cloneWith: [Function: cloneWith],
                          conformsTo: [Function: conformsTo],
                          deburr: [Function: deburr],
                          defaultTo: [Function: defaultTo],
                          divide: [Function],
                          endsWith: [Function: endsWith],
                          eq: [Function: eq],
                          escape: [Function: escape],
                          escapeRegExp: [Function: escapeRegExp],
                          every: [Function: every],
                          find: [Function],
                          findIndex: [Function: findIndex],
                          findKey: [Function: findKey],
                          findLast: [Function],
                          findLastIndex: [Function: findLastIndex],
                          findLastKey: [Function: findLastKey],
                          floor: [Function],
                          forEach: [Function: forEach],
                          forEachRight: [Function: forEachRight],
                          forIn: [Function: forIn],
                          forInRight: [Function: forInRight],
                          forOwn: [Function: forOwn],
                          forOwnRight: [Function: forOwnRight],
                          get: [Function: get],
                          gt: [Function],
                          gte: [Function],
                          has: [Function: has],
                          hasIn: [Function: hasIn],
                          head: [Function: head],
                          identity: [Function: identity],
                          includes: [Function: includes],
                          indexOf: [Function: indexOf],
                          inRange: [Function: inRange],
                          invoke: [Function],
                          isArguments: [Function: baseIsArguments],
                          isArray: [Function: isArray],
                          isArrayBuffer: [Function],
                          isArrayLike: [Function: isArrayLike],
                          isArrayLikeObject: [Function: isArrayLikeObject],
                          isBoolean: [Function: isBoolean],
                          isBuffer: [Function: isBuffer],
                          isDate: [Function],
                          isElement: [Function: isElement],
                          isEmpty: [Function: isEmpty],
                          isEqual: [Function: isEqual],
                          isEqualWith: [Function: isEqualWith],
                          isError: [Function: isError],
                          isFinite: [Function: isFinite],
                          isFunction: [Function: isFunction],
                          isInteger: [Function: isInteger],
                          isLength: [Function: isLength],
                          isMap: [Function],
                          isMatch: [Function: isMatch],
                          isMatchWith: [Function: isMatchWith],
                          isNaN: [Function: isNaN],
                          isNative: [Function: isNative],
                          isNil: [Function: isNil],
                          isNull: [Function: isNull],
                          isNumber: [Function: isNumber],
                          isObject: [Function: isObject],
                          isObjectLike: [Function: isObjectLike],
                          isPlainObject: [Function: isPlainObject],
                          isRegExp: [Function],
                          isSafeInteger: [Function: isSafeInteger],
                          isSet: [Function],
                          isString: [Function: isString],
                          isSymbol: [Function: isSymbol],
                          isTypedArray: [Function],
                          isUndefined: [Function: isUndefined],
                          isWeakMap: [Function: isWeakMap],
                          isWeakSet: [Function: isWeakSet],
                          join: [Function: join],
                          kebabCase: [Function],
                          last: [Function: last],
                          lastIndexOf: [Function: lastIndexOf],
                          lowerCase: [Function],
                          lowerFirst: [Function],
                          lt: [Function],
                          lte: [Function],
                          max: [Function: max],
                          maxBy: [Function: maxBy],
                          mean: [Function: mean],
                          meanBy: [Function: meanBy],
                          min: [Function: min],
                          minBy: [Function: minBy],
                          stubArray: [Function: stubArray],
                          stubFalse: [Function: stubFalse],
                          stubObject: [Function: stubObject],
                          stubString: [Function: stubString],
                          stubTrue: [Function: stubTrue],
                          multiply: [Function],
                          nth: [Function: nth],
                          noConflict: [Function: noConflict],
                          noop: [Function: noop],
                          now: [Function],
                          pad: [Function: pad],
                          padEnd: [Function: padEnd],
                          padStart: [Function: padStart],
                          parseInt: [Function: parseInt],
                          random: [Function: random],
                          reduce: [Function: reduce],
                          reduceRight: [Function: reduceRight],
                          repeat: [Function: repeat],
                          replace: [Function: replace],
                          result: [Function: result],
                          round: [Function],
                          runInContext: [Function: runInContext],
                          sample: [Function: sample],
                          size: [Function: size],
                          snakeCase: [Function],
                          some: [Function: some],
                          sortedIndex: [Function: sortedIndex],
                          sortedIndexBy: [Function: sortedIndexBy],
                          sortedIndexOf: [Function: sortedIndexOf],
                          sortedLastIndex: [Function: sortedLastIndex],
                          sortedLastIndexBy: [Function: sortedLastIndexBy],
                          sortedLastIndexOf: [Function: sortedLastIndexOf],
                          startCase: [Function],
                          startsWith: [Function: startsWith],
                          subtract: [Function],
                          sum: [Function: sum],
                          sumBy: [Function: sumBy],
                          template: [Function: template],
                          times: [Function: times],
                          toFinite: [Function: toFinite],
                          toInteger: [Function: toInteger],
                          toLength: [Function: toLength],
                          toLower: [Function: toLower],
                          toNumber: [Function: toNumber],
                          toSafeInteger: [Function: toSafeInteger],
                          toString: [Function: toString],
                          toUpper: [Function: toUpper],
                          trim: [Function: trim],
                          trimEnd: [Function: trimEnd],
                          trimStart: [Function: trimStart],
                          truncate: [Function: truncate],
                          unescape: [Function: unescape],
                          uniqueId: [Function: uniqueId],
                          upperCase: [Function],
                          upperFirst: [Function],
                          each: [Function: forEach],
                          eachRight: [Function: forEachRight],
                          first: [Function: head],
                          VERSION: '4.17.11' } } },
                 options:
                  { dialect: 'mysql',
                    dialectModulePath: null,
                    host: 'localhost',
                    protocol: 'tcp',
                    define:
                     { underscored: false, freezeTableName: true, timestamps: true },
                    query: {},
                    sync: {},
                    timezone: '+00:00',
                    logging: false,
                    omitNull: false,
                    native: false,
                    replication: false,
                    ssl: undefined,
                    pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
                    quoteIdentifiers: true,
                    hooks: {},
                    retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
                    transactionType: 'DEFERRED',
                    isolationLevel: null,
                    databaseVersion: 0,
                    typeValidation: false,
                    benchmark: false,
                    operatorsAliases: false,
                    username: 'root',
                    password: 'password',
                    database: 'burger_db',
                    port: 3306 },
                 extractTableDetails: [Function: extractTableDetails],
                 addSchema: [Function: addSchema],
                 dropSchema: [Function: dropSchema],
                 describeTableQuery: [Function: describeTableQuery],
                 dropTableQuery: [Function: dropTableQuery],
                 renameTableQuery: [Function: renameTableQuery],
                 insertQuery: [Function: insertQuery],
                 bulkInsertQuery: [Function: bulkInsertQuery],
                 updateQuery: [Function: updateQuery],
                 arithmeticQuery: [Function: arithmeticQuery],
                 nameIndexes: [Function: nameIndexes],
                 addIndexQuery: [Function: addIndexQuery],
                 addConstraintQuery: [Function: addConstraintQuery],
                 getConstraintSnippet: [Function: getConstraintSnippet],
                 removeConstraintQuery: [Function: removeConstraintQuery],
                 quoteTable: [Function: quoteTable],
                 quote: [Function: quote],
                 quoteIdentifiers: [Function: quoteIdentifiers],
                 escape: [Function: escape],
                 selectQuery: [Function: selectQuery],
                 escapeAttributes: [Function: escapeAttributes],
                 generateInclude: [Function: generateInclude],
                 generateJoin: [Function: generateJoin],
                 generateThroughJoin: [Function: generateThroughJoin],
                 _generateSubQueryFilter: [Function: _generateSubQueryFilter],
                 _getRequiredClosure: [Function: _getRequiredClosure],
                 getQueryOrders: [Function: getQueryOrders],
                 selectFromTableFragment: [Function: selectFromTableFragment],
                 setAutocommitQuery: [Function: setAutocommitQuery],
                 setIsolationLevelQuery: [Function: setIsolationLevelQuery],
                 generateTransactionId: [Function: generateTransactionId],
                 startTransactionQuery: [Function: startTransactionQuery],
                 deferConstraintsQuery: [Function: deferConstraintsQuery],
                 setConstraintQuery: [Function: setConstraintQuery],
                 setDeferredQuery: [Function: setDeferredQuery],
                 setImmediateQuery: [Function: setImmediateQuery],
                 commitTransactionQuery: [Function: commitTransactionQuery],
                 rollbackTransactionQuery: [Function: rollbackTransactionQuery],
                 addLimitAndOffset: [Function: addLimitAndOffset],
                 whereQuery: [Function: whereQuery],
                 whereItemsQuery: [Function: whereItemsQuery],
                 OperatorsAliasMap: false,
                 setOperatorsAliases: [Function: setOperatorsAliases],
                 whereItemQuery: [Function: whereItemQuery],
                 _findField: [Function: _findField],
                 _replaceAliases: [Function: _replaceAliases],
                 _whereGroupBind: [Function: _whereGroupBind],
                 _whereBind: [Function: _whereBind],
                 _whereJSON: [Function: _whereJSON],
                 _traverseJSON: [Function: _traverseJSON],
                 _castKey: [Function: _castKey],
                 _getJsonCast: [Function: _getJsonCast],
                 _joinKeyValue: [Function: _joinKeyValue],
                 _getSafeKey: [Function: _getSafeKey],
                 _prefixKey: [Function: _prefixKey],
                 _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
                 getWhereConditions: [Function: getWhereConditions],
                 parseConditionObject: [Function: parseConditionObject],
                 isIdentifierQuoted: [Function: isIdentifierQuoted],
                 booleanValue: [Function: booleanValue],
                 _dialect: [Circular],
                 sequelize: [Circular],
                 typeValidation: undefined } },
           queryInterface:
            QueryInterface {
              sequelize: [Circular],
              QueryGenerator:
               { dialect: 'mysql',
                 OperatorMap:
                  { [Symbol(eq)]: '=',
                    [Symbol(ne)]: '!=',
                    [Symbol(gte)]: '>=',
                    [Symbol(gt)]: '>',
                    [Symbol(lte)]: '<=',
                    [Symbol(lt)]: '<',
                    [Symbol(not)]: 'IS NOT',
                    [Symbol(is)]: 'IS',
                    [Symbol(in)]: 'IN',
                    [Symbol(notIn)]: 'NOT IN',
                    [Symbol(like)]: 'LIKE',
                    [Symbol(notLike)]: 'NOT LIKE',
                    [Symbol(iLike)]: 'ILIKE',
                    [Symbol(notILike)]: 'NOT ILIKE',
                    [Symbol(regexp)]: 'REGEXP',
                    [Symbol(notRegexp)]: 'NOT REGEXP',
                    [Symbol(iRegexp)]: '~*',
                    [Symbol(notIRegexp)]: '!~*',
                    [Symbol(between)]: 'BETWEEN',
                    [Symbol(notBetween)]: 'NOT BETWEEN',
                    [Symbol(overlap)]: '&&',
                    [Symbol(contains)]: '@>',
                    [Symbol(contained)]: '<@',
                    [Symbol(adjacent)]: '-|-',
                    [Symbol(strictLeft)]: '<<',
                    [Symbol(strictRight)]: '>>',
                    [Symbol(noExtendRight)]: '&<',
                    [Symbol(noExtendLeft)]: '&>',
                    [Symbol(any)]: 'ANY',
                    [Symbol(all)]: 'ALL',
                    [Symbol(and)]: ' AND ',
                    [Symbol(or)]: ' OR ',
                    [Symbol(col)]: 'COL',
                    [Symbol(placeholder)]: '$$PLACEHOLDER$$',
                    [Symbol(raw)]: 'DEPRECATED' },
                 createSchema: [Function: createSchema],
                 showSchemasQuery: [Function: showSchemasQuery],
                 versionQuery: [Function: versionQuery],
                 createTableQuery: [Function: createTableQuery],
                 showTablesQuery: [Function: showTablesQuery],
                 addColumnQuery: [Function: addColumnQuery],
                 removeColumnQuery: [Function: removeColumnQuery],
                 changeColumnQuery: [Function: changeColumnQuery],
                 renameColumnQuery: [Function: renameColumnQuery],
                 handleSequelizeMethod: [Function: handleSequelizeMethod],
                 _toJSONValue: [Function: _toJSONValue],
                 upsertQuery: [Function: upsertQuery],
                 deleteQuery: [Function: deleteQuery],
                 showIndexesQuery: [Function: showIndexesQuery],
                 showConstraintsQuery: [Function: showConstraintsQuery],
                 removeIndexQuery: [Function: removeIndexQuery],
                 attributeToSQL: [Function: attributeToSQL],
                 attributesToSQL: [Function: attributesToSQL],
                 quoteIdentifier: [Function: quoteIdentifier],
                 _checkValidJsonStatement: [Function: _checkValidJsonStatement],
                 jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
                 _getForeignKeysQueryFields: [Function: _getForeignKeysQueryFields],
                 getForeignKeysQuery: [Function: getForeignKeysQuery],
                 getForeignKeyQuery: [Function: getForeignKeyQuery],
                 dropForeignKeyQuery: [Function: dropForeignKeyQuery],
                 _templateSettings:
                  { escape: /<%-([\s\S]+?)%>/g,
                    evaluate: /<%([\s\S]+?)%>/g,
                    interpolate: /<%=([\s\S]+?)%>/g,
                    variable: '',
                    imports:
                     { _:
                        { [Function: lodash]
                          templateSettings: [Circular],
                          after: [Function: after],
                          ary: [Function: ary],
                          assign: [Function],
                          assignIn: [Function],
                          assignInWith: [Function],
                          assignWith: [Function],
                          at: [Function],
                          before: [Function: before],
                          bind: { [Function] placeholder: [Circular] },
                          bindAll: [Function],
                          bindKey: { [Function] placeholder: [Circular] },
                          castArray: [Function: castArray],
                          chain: [Function: chain],
                          chunk: [Function: chunk],
                          compact: [Function: compact],
                          concat: [Function: concat],
                          cond: [Function: cond],
                          conforms: [Function: conforms],
                          constant: [Function: constant],
                          countBy: [Function],
                          create: [Function: create],
                          curry: { [Function: curry] placeholder: [Circular] },
                          curryRight: { [Function: curryRight] placeholder: [Circular] },
                          debounce: [Function: debounce],
                          defaults: [Function],
                          defaultsDeep: [Function],
                          defer: [Function],
                          delay: [Function],
                          difference: [Function],
                          differenceBy: [Function],
                          differenceWith: [Function],
                          drop: [Function: drop],
                          dropRight: [Function: dropRight],
                          dropRightWhile: [Function: dropRightWhile],
                          dropWhile: [Function: dropWhile],
                          fill: [Function: fill],
                          filter: [Function: filter],
                          flatMap: [Function: flatMap],
                          flatMapDeep: [Function: flatMapDeep],
                          flatMapDepth: [Function: flatMapDepth],
                          flatten: [Function: flatten],
                          flattenDeep: [Function: flattenDeep],
                          flattenDepth: [Function: flattenDepth],
                          flip: [Function: flip],
                          flow: [Function],
                          flowRight: [Function],
                          fromPairs: [Function: fromPairs],
                          functions: [Function: functions],
                          functionsIn: [Function: functionsIn],
                          groupBy: [Function],
                          initial: [Function: initial],
                          intersection: [Function],
                          intersectionBy: [Function],
                          intersectionWith: [Function],
                          invert: [Function],
                          invertBy: [Function],
                          invokeMap: [Function],
                          iteratee: [Function: iteratee],
                          keyBy: [Function],
                          keys: [Function: keys],
                          keysIn: [Function: keysIn],
                          map: [Function: map],
                          mapKeys: [Function: mapKeys],
                          mapValues: [Function: mapValues],
                          matches: [Function: matches],
                          matchesProperty: [Function: matchesProperty],
                          memoize: { [Function: memoize] Cache: [Function: MapCache] },
                          merge: [Function],
                          mergeWith: [Function],
                          method: [Function],
                          methodOf: [Function],
                          mixin: [Function: mixin],
                          negate: [Function: negate],
                          nthArg: [Function: nthArg],
                          omit: [Function],
                          omitBy: [Function: omitBy],
                          once: [Function: once],
                          orderBy: [Function: orderBy],
                          over: [Function],
                          overArgs: [Function],
                          overEvery: [Function],
                          overSome: [Function],
                          partial: { [Function] placeholder: [Circular] },
                          partialRight: { [Function] placeholder: [Circular] },
                          partition: [Function],
                          pick: [Function],
                          pickBy: [Function: pickBy],
                          property: [Function: property],
                          propertyOf: [Function: propertyOf],
                          pull: [Function],
                          pullAll: [Function: pullAll],
                          pullAllBy: [Function: pullAllBy],
                          pullAllWith: [Function: pullAllWith],
                          pullAt: [Function],
                          range: [Function],
                          rangeRight: [Function],
                          rearg: [Function],
                          reject: [Function: reject],
                          remove: [Function: remove],
                          rest: [Function: rest],
                          reverse: [Function: reverse],
                          sampleSize: [Function: sampleSize],
                          set: [Function: set],
                          setWith: [Function: setWith],
                          shuffle: [Function: shuffle],
                          slice: [Function: slice],
                          sortBy: [Function],
                          sortedUniq: [Function: sortedUniq],
                          sortedUniqBy: [Function: sortedUniqBy],
                          split: [Function: split],
                          spread: [Function: spread],
                          tail: [Function: tail],
                          take: [Function: take],
                          takeRight: [Function: takeRight],
                          takeRightWhile: [Function: takeRightWhile],
                          takeWhile: [Function: takeWhile],
                          tap: [Function: tap],
                          throttle: [Function: throttle],
                          thru: [Function: thru],
                          toArray: [Function: toArray],
                          toPairs: [Function],
                          toPairsIn: [Function],
                          toPath: [Function: toPath],
                          toPlainObject: [Function: toPlainObject],
                          transform: [Function: transform],
                          unary: [Function: unary],
                          union: [Function],
                          unionBy: [Function],
                          unionWith: [Function],
                          uniq: [Function: uniq],
                          uniqBy: [Function: uniqBy],
                          uniqWith: [Function: uniqWith],
                          unset: [Function: unset],
                          unzip: [Function: unzip],
                          unzipWith: [Function: unzipWith],
                          update: [Function: update],
                          updateWith: [Function: updateWith],
                          values: [Function: values],
                          valuesIn: [Function: valuesIn],
                          without: [Function],
                          words: [Function: words],
                          wrap: [Function: wrap],
                          xor: [Function],
                          xorBy: [Function],
                          xorWith: [Function],
                          zip: [Function],
                          zipObject: [Function: zipObject],
                          zipObjectDeep: [Function: zipObjectDeep],
                          zipWith: [Function],
                          entries: [Function],
                          entriesIn: [Function],
                          extend: [Function],
                          extendWith: [Function],
                          add: [Function],
                          attempt: [Function],
                          camelCase: [Function],
                          capitalize: [Function: capitalize],
                          ceil: [Function],
                          clamp: [Function: clamp],
                          clone: [Function: clone],
                          cloneDeep: [Function: cloneDeep],
                          cloneDeepWith: [Function: cloneDeepWith],
                          cloneWith: [Function: cloneWith],
                          conformsTo: [Function: conformsTo],
                          deburr: [Function: deburr],
                          defaultTo: [Function: defaultTo],
                          divide: [Function],
                          endsWith: [Function: endsWith],
                          eq: [Function: eq],
                          escape: [Function: escape],
                          escapeRegExp: [Function: escapeRegExp],
                          every: [Function: every],
                          find: [Function],
                          findIndex: [Function: findIndex],
                          findKey: [Function: findKey],
                          findLast: [Function],
                          findLastIndex: [Function: findLastIndex],
                          findLastKey: [Function: findLastKey],
                          floor: [Function],
                          forEach: [Function: forEach],
                          forEachRight: [Function: forEachRight],
                          forIn: [Function: forIn],
                          forInRight: [Function: forInRight],
                          forOwn: [Function: forOwn],
                          forOwnRight: [Function: forOwnRight],
                          get: [Function: get],
                          gt: [Function],
                          gte: [Function],
                          has: [Function: has],
                          hasIn: [Function: hasIn],
                          head: [Function: head],
                          identity: [Function: identity],
                          includes: [Function: includes],
                          indexOf: [Function: indexOf],
                          inRange: [Function: inRange],
                          invoke: [Function],
                          isArguments: [Function: baseIsArguments],
                          isArray: [Function: isArray],
                          isArrayBuffer: [Function],
                          isArrayLike: [Function: isArrayLike],
                          isArrayLikeObject: [Function: isArrayLikeObject],
                          isBoolean: [Function: isBoolean],
                          isBuffer: [Function: isBuffer],
                          isDate: [Function],
                          isElement: [Function: isElement],
                          isEmpty: [Function: isEmpty],
                          isEqual: [Function: isEqual],
                          isEqualWith: [Function: isEqualWith],
                          isError: [Function: isError],
                          isFinite: [Function: isFinite],
                          isFunction: [Function: isFunction],
                          isInteger: [Function: isInteger],
                          isLength: [Function: isLength],
                          isMap: [Function],
                          isMatch: [Function: isMatch],
                          isMatchWith: [Function: isMatchWith],
                          isNaN: [Function: isNaN],
                          isNative: [Function: isNative],
                          isNil: [Function: isNil],
                          isNull: [Function: isNull],
                          isNumber: [Function: isNumber],
                          isObject: [Function: isObject],
                          isObjectLike: [Function: isObjectLike],
                          isPlainObject: [Function: isPlainObject],
                          isRegExp: [Function],
                          isSafeInteger: [Function: isSafeInteger],
                          isSet: [Function],
                          isString: [Function: isString],
                          isSymbol: [Function: isSymbol],
                          isTypedArray: [Function],
                          isUndefined: [Function: isUndefined],
                          isWeakMap: [Function: isWeakMap],
                          isWeakSet: [Function: isWeakSet],
                          join: [Function: join],
                          kebabCase: [Function],
                          last: [Function: last],
                          lastIndexOf: [Function: lastIndexOf],
                          lowerCase: [Function],
                          lowerFirst: [Function],
                          lt: [Function],
                          lte: [Function],
                          max: [Function: max],
                          maxBy: [Function: maxBy],
                          mean: [Function: mean],
                          meanBy: [Function: meanBy],
                          min: [Function: min],
                          minBy: [Function: minBy],
                          stubArray: [Function: stubArray],
                          stubFalse: [Function: stubFalse],
                          stubObject: [Function: stubObject],
                          stubString: [Function: stubString],
                          stubTrue: [Function: stubTrue],
                          multiply: [Function],
                          nth: [Function: nth],
                          noConflict: [Function: noConflict],
                          noop: [Function: noop],
                          now: [Function],
                          pad: [Function: pad],
                          padEnd: [Function: padEnd],
                          padStart: [Function: padStart],
                          parseInt: [Function: parseInt],
                          random: [Function: random],
                          reduce: [Function: reduce],
                          reduceRight: [Function: reduceRight],
                          repeat: [Function: repeat],
                          replace: [Function: replace],
                          result: [Function: result],
                          round: [Function],
                          runInContext: [Function: runInContext],
                          sample: [Function: sample],
                          size: [Function: size],
                          snakeCase: [Function],
                          some: [Function: some],
                          sortedIndex: [Function: sortedIndex],
                          sortedIndexBy: [Function: sortedIndexBy],
                          sortedIndexOf: [Function: sortedIndexOf],
                          sortedLastIndex: [Function: sortedLastIndex],
                          sortedLastIndexBy: [Function: sortedLastIndexBy],
                          sortedLastIndexOf: [Function: sortedLastIndexOf],
                          startCase: [Function],
                          startsWith: [Function: startsWith],
                          subtract: [Function],
                          sum: [Function: sum],
                          sumBy: [Function: sumBy],
                          template: [Function: template],
                          times: [Function: times],
                          toFinite: [Function: toFinite],
                          toInteger: [Function: toInteger],
                          toLength: [Function: toLength],
                          toLower: [Function: toLower],
                          toNumber: [Function: toNumber],
                          toSafeInteger: [Function: toSafeInteger],
                          toString: [Function: toString],
                          toUpper: [Function: toUpper],
                          trim: [Function: trim],
                          trimEnd: [Function: trimEnd],
                          trimStart: [Function: trimStart],
                          truncate: [Function: truncate],
                          unescape: [Function: unescape],
                          uniqueId: [Function: uniqueId],
                          upperCase: [Function],
                          upperFirst: [Function],
                          each: [Function: forEach],
                          eachRight: [Function: forEachRight],
                          first: [Function: head],
                          VERSION: '4.17.11' } } },
                 options:
                  { dialect: 'mysql',
                    dialectModulePath: null,
                    host: 'localhost',
                    protocol: 'tcp',
                    define:
                     { underscored: false, freezeTableName: true, timestamps: true },
                    query: {},
                    sync: {},
                    timezone: '+00:00',
                    logging: false,
                    omitNull: false,
                    native: false,
                    replication: false,
                    ssl: undefined,
                    pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
                    quoteIdentifiers: true,
                    hooks: {},
                    retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
                    transactionType: 'DEFERRED',
                    isolationLevel: null,
                    databaseVersion: 0,
                    typeValidation: false,
                    benchmark: false,
                    operatorsAliases: false,
                    username: 'root',
                    password: 'password',
                    database: 'burger_db',
                    port: 3306 },
                 extractTableDetails: [Function: extractTableDetails],
                 addSchema: [Function: addSchema],
                 dropSchema: [Function: dropSchema],
                 describeTableQuery: [Function: describeTableQuery],
                 dropTableQuery: [Function: dropTableQuery],
                 renameTableQuery: [Function: renameTableQuery],
                 insertQuery: [Function: insertQuery],
                 bulkInsertQuery: [Function: bulkInsertQuery],
                 updateQuery: [Function: updateQuery],
                 arithmeticQuery: [Function: arithmeticQuery],
                 nameIndexes: [Function: nameIndexes],
                 addIndexQuery: [Function: addIndexQuery],
                 addConstraintQuery: [Function: addConstraintQuery],
                 getConstraintSnippet: [Function: getConstraintSnippet],
                 removeConstraintQuery: [Function: removeConstraintQuery],
                 quoteTable: [Function: quoteTable],
                 quote: [Function: quote],
                 quoteIdentifiers: [Function: quoteIdentifiers],
                 escape: [Function: escape],
                 selectQuery: [Function: selectQuery],
                 escapeAttributes: [Function: escapeAttributes],
                 generateInclude: [Function: generateInclude],
                 generateJoin: [Function: generateJoin],
                 generateThroughJoin: [Function: generateThroughJoin],
                 _generateSubQueryFilter: [Function: _generateSubQueryFilter],
                 _getRequiredClosure: [Function: _getRequiredClosure],
                 getQueryOrders: [Function: getQueryOrders],
                 selectFromTableFragment: [Function: selectFromTableFragment],
                 setAutocommitQuery: [Function: setAutocommitQuery],
                 setIsolationLevelQuery: [Function: setIsolationLevelQuery],
                 generateTransactionId: [Function: generateTransactionId],
                 startTransactionQuery: [Function: startTransactionQuery],
                 deferConstraintsQuery: [Function: deferConstraintsQuery],
                 setConstraintQuery: [Function: setConstraintQuery],
                 setDeferredQuery: [Function: setDeferredQuery],
                 setImmediateQuery: [Function: setImmediateQuery],
                 commitTransactionQuery: [Function: commitTransactionQuery],
                 rollbackTransactionQuery: [Function: rollbackTransactionQuery],
                 addLimitAndOffset: [Function: addLimitAndOffset],
                 whereQuery: [Function: whereQuery],
                 whereItemsQuery: [Function: whereItemsQuery],
                 OperatorsAliasMap: false,
                 setOperatorsAliases: [Function: setOperatorsAliases],
                 whereItemQuery: [Function: whereItemQuery],
                 _findField: [Function: _findField],
                 _replaceAliases: [Function: _replaceAliases],
                 _whereGroupBind: [Function: _whereGroupBind],
                 _whereBind: [Function: _whereBind],
                 _whereJSON: [Function: _whereJSON],
                 _traverseJSON: [Function: _traverseJSON],
                 _castKey: [Function: _castKey],
                 _getJsonCast: [Function: _getJsonCast],
                 _joinKeyValue: [Function: _joinKeyValue],
                 _getSafeKey: [Function: _getSafeKey],
                 _prefixKey: [Function: _prefixKey],
                 _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
                 getWhereConditions: [Function: getWhereConditions],
                 parseConditionObject: [Function: parseConditionObject],
                 isIdentifierQuoted: [Function: isIdentifierQuoted],
                 booleanValue: [Function: booleanValue],
                 _dialect:
                  MysqlDialect {
                    sequelize: [Circular],
                    connectionManager:
                     ConnectionManager {
                       sequelize: [Circular],
                       config:
                        { database: 'burger_db',
                          username: 'root',
                          password: 'password',
                          host: 'localhost',
                          port: 3306,
                          pool:
                           { max: 5,
                             min: 0,
                             acquire: 30000,
                             idle: 10000,
                             evict: 10000,
                             handleDisconnects: true,
                             validate: [Function: bound _validate],
                             Promise:
                              { [Function: Promise]
                                TypeError: [Function: TypeError],
                                RangeError: [Function: RangeError],
                                CancellationError: [Function: SubError],
                                TimeoutError: [Function: SubError],
                                OperationalError: [Function: OperationalError],
                                RejectionError: [Function: OperationalError],
                                AggregateError: [Function: SubError],
                                _peekContext: [Function],
                                onPossiblyUnhandledRejection: [Function],
                                onUnhandledRejectionHandled: [Function],
                                longStackTraces: [Function],
                                hasLongStackTraces: [Function],
                                config: [Function],
                                getNewLibraryCopy: [Function],
                                is: [Function],
                                fromCallback: [Function],
                                fromNode: [Function],
                                all: [Function],
                                cast: [Function],
                                fulfilled: [Function],
                                resolve: [Function],
                                rejected: [Function],
                                reject: [Function],
                                setScheduler: [Function],
                                pending: [Function],
                                defer: [Function],
                                method: [Function],
                                try: [Function],
                                attempt: [Function],
                                bind: [Function],
                                PromiseInspection: [Function: PromiseInspection],
                                join: [Function],
                                Promise: [Circular],
                                version: '3.5.3',
                                map: [Function],
                                using: [Function],
                                delay: [Function],
                                coroutine: { [Function] addYieldHandler: [Function] },
                                spawn: [Function],
                                promisify: [Function],
                                promisifyAll: [Function],
                                props: [Function],
                                race: [Function],
                                reduce: [Function],
                                settle: [Function],
                                some: [Function],
                                _SomePromiseArray: [Function: SomePromiseArray],
                                filter: [Function],
                                each: [Function],
                                mapSeries: [Function: PromiseMapSeries],
                                any: [Function],
                                default: [Circular] } },
                          protocol: 'tcp',
                          native: false,
                          ssl: undefined,
                          replication: false,
                          dialectModulePath: null,
                          keepDefaultTimezone: undefined,
                          dialectOptions: undefined },
                       dialect: [Circular],
                       versionPromise: null,
                       dialectName: 'mysql',
                       pool:
                        Pool {
                          _events: [Object: null prototype] {},
                          _eventsCount: 0,
                          _maxListeners: undefined,
                          _config:
                           PoolOptions {
                             fifo: true,
                             priorityRange: 1,
                             testOnBorrow: true,
                             testOnReturn: false,
                             autostart: false,
                             acquireTimeoutMillis: 30000,
                             max: 5,
                             min: 0,
                             evictionRunIntervalMillis: 10000,
                             numTestsPerEvictionRun: 3,
                             softIdleTimeoutMillis: -1,
                             idleTimeoutMillis: 10000,
                             Promise:
                              { [Function: Promise]
                                TypeError: [Function: TypeError],
                                RangeError: [Function: RangeError],
                                CancellationError: [Function: SubError],
                                TimeoutError: [Function: SubError],
                                OperationalError: [Function: OperationalError],
                                RejectionError: [Function: OperationalError],
                                AggregateError: [Function: SubError],
                                _peekContext: [Function],
                                onPossiblyUnhandledRejection: [Function],
                                onUnhandledRejectionHandled: [Function],
                                longStackTraces: [Function],
                                hasLongStackTraces: [Function],
                                config: [Function],
                                getNewLibraryCopy: [Function],
                                is: [Function],
                                fromCallback: [Function],
                                fromNode: [Function],
                                all: [Function],
                                cast: [Function],
                                fulfilled: [Function],
                                resolve: [Function],
                                rejected: [Function],
                                reject: [Function],
                                setScheduler: [Function],
                                pending: [Function],
                                defer: [Function],
                                method: [Function],
                                try: [Function],
                                attempt: [Function],
                                bind: [Function],
                                PromiseInspection: [Function: PromiseInspection],
                                join: [Function],
                                Promise: [Circular],
                                version: '3.5.3',
                                map: [Function],
                                using: [Function],
                                delay: [Function],
                                coroutine: { [Function] addYieldHandler: [Function] },
                                spawn: [Function],
                                promisify: [Function],
                                promisifyAll: [Function],
                                props: [Function],
                                race: [Function],
                                reduce: [Function],
                                settle: [Function],
                                some: [Function],
                                _SomePromiseArray: [Function: SomePromiseArray],
                                filter: [Function],
                                each: [Function],
                                mapSeries: [Function: PromiseMapSeries],
                                any: [Function],
                                default: [Circular] } },
                          _Promise:
                           { [Function: Promise]
                             TypeError: [Function: TypeError],
                             RangeError: [Function: RangeError],
                             CancellationError: [Function: SubError],
                             TimeoutError: [Function: SubError],
                             OperationalError: [Function: OperationalError],
                             RejectionError: [Function: OperationalError],
                             AggregateError: [Function: SubError],
                             _peekContext: [Function],
                             onPossiblyUnhandledRejection: [Function],
                             onUnhandledRejectionHandled: [Function],
                             longStackTraces: [Function],
                             hasLongStackTraces: [Function],
                             config: [Function],
                             getNewLibraryCopy: [Function],
                             is: [Function],
                             fromCallback: [Function],
                             fromNode: [Function],
                             all: [Function],
                             cast: [Function],
                             fulfilled: [Function],
                             resolve: [Function],
                             rejected: [Function],
                             reject: [Function],
                             setScheduler: [Function],
                             pending: [Function],
                             defer: [Function],
                             method: [Function],
                             try: [Function],
                             attempt: [Function],
                             bind: [Function],
                             PromiseInspection: [Function: PromiseInspection],
                             join: [Function],
                             Promise: [Circular],
                             version: '3.5.3',
                             map: [Function],
                             using: [Function],
                             delay: [Function],
                             coroutine: { [Function] addYieldHandler: [Function] },
                             spawn: [Function],
                             promisify: [Function],
                             promisifyAll: [Function],
                             props: [Function],
                             race: [Function],
                             reduce: [Function],
                             settle: [Function],
                             some: [Function],
                             _SomePromiseArray: [Function: SomePromiseArray],
                             filter: [Function],
                             each: [Function],
                             mapSeries: [Function: PromiseMapSeries],
                             any: [Function],
                             default: [Circular] },
                          _factory:
                           { create: [Function: create],
                             destroy: [Function: destroy],
                             validate: [Function: bound _validate] },
                          _draining: false,
                          _started: false,
                          _waitingClientsQueue:
                           PriorityQueue {
                             _size: 1,
                             _slots:
                              [ Queue {
                                  _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
                          _factoryCreateOperations: Set {},
                          _factoryDestroyOperations: Set {},
                          _availableObjects:
                           Deque {
                             _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
                          _testOnBorrowResources: Set {},
                          _testOnReturnResources: Set {},
                          _validationOperations: Set {},
                          _allObjects: Set {},
                          _resourceLoans: Map {},
                          _evictionIterator:
                           DequeIterator {
                             _list: DoublyLinkedList { head: null, tail: null, length: 0 },
                             _direction: 'next',
                             _startPosition: 'head',
                             _started: false,
                             _cursor: null,
                             _done: false },
                          _evictor: DefaultEvictor {},
                          _scheduledEviction: null },
                       lib:
                        { createConnection: [Function],
                          connect: [Function],
                          Connection: [Function: Connection],
                          createPool: [Function],
                          createPoolCluster: [Function],
                          createQuery: [Function: createQuery],
                          Pool: [Function: Pool],
                          createServer: [Function],
                          PoolConnection:
                           { [Function: PoolConnection] statementKey: [Function: statementKey] },
                          escape: [Function: escape],
                          escapeId: [Function: escapeId],
                          format: [Function: format],
                          raw: [Function: raw],
                          createConnectionPromise: [Getter],
                          createPoolPromise: [Getter],
                          createPoolClusterPromise: [Getter],
                          Types: [Getter],
                          Charsets: [Getter],
                          CharsetToEncoding: [Getter],
                          setMaxParserCache: [Function],
                          clearParserCache: [Function] } },
                    QueryGenerator: [Circular] },
                 sequelize: [Circular],
                 typeValidation: undefined } },
           models: { burgers: [Circular] },
           modelManager:
            ModelManager { models: [ [Circular] ], sequelize: [Circular] },
           connectionManager:
            ConnectionManager {
              sequelize: [Circular],
              config:
               { database: 'burger_db',
                 username: 'root',
                 password: 'password',
                 host: 'localhost',
                 port: 3306,
                 pool:
                  { max: 5,
                    min: 0,
                    acquire: 30000,
                    idle: 10000,
                    evict: 10000,
                    handleDisconnects: true,
                    validate: [Function: bound _validate],
                    Promise:
                     { [Function: Promise]
                       TypeError: [Function: TypeError],
                       RangeError: [Function: RangeError],
                       CancellationError: [Function: SubError],
                       TimeoutError: [Function: SubError],
                       OperationalError: [Function: OperationalError],
                       RejectionError: [Function: OperationalError],
                       AggregateError: [Function: SubError],
                       _peekContext: [Function],
                       onPossiblyUnhandledRejection: [Function],
                       onUnhandledRejectionHandled: [Function],
                       longStackTraces: [Function],
                       hasLongStackTraces: [Function],
                       config: [Function],
                       getNewLibraryCopy: [Function],
                       is: [Function],
                       fromCallback: [Function],
                       fromNode: [Function],
                       all: [Function],
                       cast: [Function],
                       fulfilled: [Function],
                       resolve: [Function],
                       rejected: [Function],
                       reject: [Function],
                       setScheduler: [Function],
                       pending: [Function],
                       defer: [Function],
                       method: [Function],
                       try: [Function],
                       attempt: [Function],
                       bind: [Function],
                       PromiseInspection: [Function: PromiseInspection],
                       join: [Function],
                       Promise: [Circular],
                       version: '3.5.3',
                       map: [Function],
                       using: [Function],
                       delay: [Function],
                       coroutine: { [Function] addYieldHandler: [Function] },
                       spawn: [Function],
                       promisify: [Function],
                       promisifyAll: [Function],
                       props: [Function],
                       race: [Function],
                       reduce: [Function],
                       settle: [Function],
                       some: [Function],
                       _SomePromiseArray: [Function: SomePromiseArray],
                       filter: [Function],
                       each: [Function],
                       mapSeries: [Function: PromiseMapSeries],
                       any: [Function],
                       default: [Circular] } },
                 protocol: 'tcp',
                 native: false,
                 ssl: undefined,
                 replication: false,
                 dialectModulePath: null,
                 keepDefaultTimezone: undefined,
                 dialectOptions: undefined },
              dialect:
               MysqlDialect {
                 sequelize: [Circular],
                 connectionManager: [Circular],
                 QueryGenerator:
                  { dialect: 'mysql',
                    OperatorMap:
                     { [Symbol(eq)]: '=',
                       [Symbol(ne)]: '!=',
                       [Symbol(gte)]: '>=',
                       [Symbol(gt)]: '>',
                       [Symbol(lte)]: '<=',
                       [Symbol(lt)]: '<',
                       [Symbol(not)]: 'IS NOT',
                       [Symbol(is)]: 'IS',
                       [Symbol(in)]: 'IN',
                       [Symbol(notIn)]: 'NOT IN',
                       [Symbol(like)]: 'LIKE',
                       [Symbol(notLike)]: 'NOT LIKE',
                       [Symbol(iLike)]: 'ILIKE',
                       [Symbol(notILike)]: 'NOT ILIKE',
                       [Symbol(regexp)]: 'REGEXP',
                       [Symbol(notRegexp)]: 'NOT REGEXP',
                       [Symbol(iRegexp)]: '~*',
                       [Symbol(notIRegexp)]: '!~*',
                       [Symbol(between)]: 'BETWEEN',
                       [Symbol(notBetween)]: 'NOT BETWEEN',
                       [Symbol(overlap)]: '&&',
                       [Symbol(contains)]: '@>',
                       [Symbol(contained)]: '<@',
                       [Symbol(adjacent)]: '-|-',
                       [Symbol(strictLeft)]: '<<',
                       [Symbol(strictRight)]: '>>',
                       [Symbol(noExtendRight)]: '&<',
                       [Symbol(noExtendLeft)]: '&>',
                       [Symbol(any)]: 'ANY',
                       [Symbol(all)]: 'ALL',
                       [Symbol(and)]: ' AND ',
                       [Symbol(or)]: ' OR ',
                       [Symbol(col)]: 'COL',
                       [Symbol(placeholder)]: '$$PLACEHOLDER$$',
                       [Symbol(raw)]: 'DEPRECATED' },
                    createSchema: [Function: createSchema],
                    showSchemasQuery: [Function: showSchemasQuery],
                    versionQuery: [Function: versionQuery],
                    createTableQuery: [Function: createTableQuery],
                    showTablesQuery: [Function: showTablesQuery],
                    addColumnQuery: [Function: addColumnQuery],
                    removeColumnQuery: [Function: removeColumnQuery],
                    changeColumnQuery: [Function: changeColumnQuery],
                    renameColumnQuery: [Function: renameColumnQuery],
                    handleSequelizeMethod: [Function: handleSequelizeMethod],
                    _toJSONValue: [Function: _toJSONValue],
                    upsertQuery: [Function: upsertQuery],
                    deleteQuery: [Function: deleteQuery],
                    showIndexesQuery: [Function: showIndexesQuery],
                    showConstraintsQuery: [Function: showConstraintsQuery],
                    removeIndexQuery: [Function: removeIndexQuery],
                    attributeToSQL: [Function: attributeToSQL],
                    attributesToSQL: [Function: attributesToSQL],
                    quoteIdentifier: [Function: quoteIdentifier],
                    _checkValidJsonStatement: [Function: _checkValidJsonStatement],
                    jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
                    _getForeignKeysQueryFields: [Function: _getForeignKeysQueryFields],
                    getForeignKeysQuery: [Function: getForeignKeysQuery],
                    getForeignKeyQuery: [Function: getForeignKeyQuery],
                    dropForeignKeyQuery: [Function: dropForeignKeyQuery],
                    _templateSettings:
                     { escape: /<%-([\s\S]+?)%>/g,
                       evaluate: /<%([\s\S]+?)%>/g,
                       interpolate: /<%=([\s\S]+?)%>/g,
                       variable: '',
                       imports:
                        { _:
                           { [Function: lodash]
                             templateSettings: [Circular],
                             after: [Function: after],
                             ary: [Function: ary],
                             assign: [Function],
                             assignIn: [Function],
                             assignInWith: [Function],
                             assignWith: [Function],
                             at: [Function],
                             before: [Function: before],
                             bind: { [Function] placeholder: [Circular] },
                             bindAll: [Function],
                             bindKey: { [Function] placeholder: [Circular] },
                             castArray: [Function: castArray],
                             chain: [Function: chain],
                             chunk: [Function: chunk],
                             compact: [Function: compact],
                             concat: [Function: concat],
                             cond: [Function: cond],
                             conforms: [Function: conforms],
                             constant: [Function: constant],
                             countBy: [Function],
                             create: [Function: create],
                             curry: { [Function: curry] placeholder: [Circular] },
                             curryRight: { [Function: curryRight] placeholder: [Circular] },
                             debounce: [Function: debounce],
                             defaults: [Function],
                             defaultsDeep: [Function],
                             defer: [Function],
                             delay: [Function],
                             difference: [Function],
                             differenceBy: [Function],
                             differenceWith: [Function],
                             drop: [Function: drop],
                             dropRight: [Function: dropRight],
                             dropRightWhile: [Function: dropRightWhile],
                             dropWhile: [Function: dropWhile],
                             fill: [Function: fill],
                             filter: [Function: filter],
                             flatMap: [Function: flatMap],
                             flatMapDeep: [Function: flatMapDeep],
                             flatMapDepth: [Function: flatMapDepth],
                             flatten: [Function: flatten],
                             flattenDeep: [Function: flattenDeep],
                             flattenDepth: [Function: flattenDepth],
                             flip: [Function: flip],
                             flow: [Function],
                             flowRight: [Function],
                             fromPairs: [Function: fromPairs],
                             functions: [Function: functions],
                             functionsIn: [Function: functionsIn],
                             groupBy: [Function],
                             initial: [Function: initial],
                             intersection: [Function],
                             intersectionBy: [Function],
                             intersectionWith: [Function],
                             invert: [Function],
                             invertBy: [Function],
                             invokeMap: [Function],
                             iteratee: [Function: iteratee],
                             keyBy: [Function],
                             keys: [Function: keys],
                             keysIn: [Function: keysIn],
                             map: [Function: map],
                             mapKeys: [Function: mapKeys],
                             mapValues: [Function: mapValues],
                             matches: [Function: matches],
                             matchesProperty: [Function: matchesProperty],
                             memoize: { [Function: memoize] Cache: [Function: MapCache] },
                             merge: [Function],
                             mergeWith: [Function],
                             method: [Function],
                             methodOf: [Function],
                             mixin: [Function: mixin],
                             negate: [Function: negate],
                             nthArg: [Function: nthArg],
                             omit: [Function],
                             omitBy: [Function: omitBy],
                             once: [Function: once],
                             orderBy: [Function: orderBy],
                             over: [Function],
                             overArgs: [Function],
                             overEvery: [Function],
                             overSome: [Function],
                             partial: { [Function] placeholder: [Circular] },
                             partialRight: { [Function] placeholder: [Circular] },
                             partition: [Function],
                             pick: [Function],
                             pickBy: [Function: pickBy],
                             property: [Function: property],
                             propertyOf: [Function: propertyOf],
                             pull: [Function],
                             pullAll: [Function: pullAll],
                             pullAllBy: [Function: pullAllBy],
                             pullAllWith: [Function: pullAllWith],
                             pullAt: [Function],
                             range: [Function],
                             rangeRight: [Function],
                             rearg: [Function],
                             reject: [Function: reject],
                             remove: [Function: remove],
                             rest: [Function: rest],
                             reverse: [Function: reverse],
                             sampleSize: [Function: sampleSize],
                             set: [Function: set],
                             setWith: [Function: setWith],
                             shuffle: [Function: shuffle],
                             slice: [Function: slice],
                             sortBy: [Function],
                             sortedUniq: [Function: sortedUniq],
                             sortedUniqBy: [Function: sortedUniqBy],
                             split: [Function: split],
                             spread: [Function: spread],
                             tail: [Function: tail],
                             take: [Function: take],
                             takeRight: [Function: takeRight],
                             takeRightWhile: [Function: takeRightWhile],
                             takeWhile: [Function: takeWhile],
                             tap: [Function: tap],
                             throttle: [Function: throttle],
                             thru: [Function: thru],
                             toArray: [Function: toArray],
                             toPairs: [Function],
                             toPairsIn: [Function],
                             toPath: [Function: toPath],
                             toPlainObject: [Function: toPlainObject],
                             transform: [Function: transform],
                             unary: [Function: unary],
                             union: [Function],
                             unionBy: [Function],
                             unionWith: [Function],
                             uniq: [Function: uniq],
                             uniqBy: [Function: uniqBy],
                             uniqWith: [Function: uniqWith],
                             unset: [Function: unset],
                             unzip: [Function: unzip],
                             unzipWith: [Function: unzipWith],
                             update: [Function: update],
                             updateWith: [Function: updateWith],
                             values: [Function: values],
                             valuesIn: [Function: valuesIn],
                             without: [Function],
                             words: [Function: words],
                             wrap: [Function: wrap],
                             xor: [Function],
                             xorBy: [Function],
                             xorWith: [Function],
                             zip: [Function],
                             zipObject: [Function: zipObject],
                             zipObjectDeep: [Function: zipObjectDeep],
                             zipWith: [Function],
                             entries: [Function],
                             entriesIn: [Function],
                             extend: [Function],
                             extendWith: [Function],
                             add: [Function],
                             attempt: [Function],
                             camelCase: [Function],
                             capitalize: [Function: capitalize],
                             ceil: [Function],
                             clamp: [Function: clamp],
                             clone: [Function: clone],
                             cloneDeep: [Function: cloneDeep],
                             cloneDeepWith: [Function: cloneDeepWith],
                             cloneWith: [Function: cloneWith],
                             conformsTo: [Function: conformsTo],
                             deburr: [Function: deburr],
                             defaultTo: [Function: defaultTo],
                             divide: [Function],
                             endsWith: [Function: endsWith],
                             eq: [Function: eq],
                             escape: [Function: escape],
                             escapeRegExp: [Function: escapeRegExp],
                             every: [Function: every],
                             find: [Function],
                             findIndex: [Function: findIndex],
                             findKey: [Function: findKey],
                             findLast: [Function],
                             findLastIndex: [Function: findLastIndex],
                             findLastKey: [Function: findLastKey],
                             floor: [Function],
                             forEach: [Function: forEach],
                             forEachRight: [Function: forEachRight],
                             forIn: [Function: forIn],
                             forInRight: [Function: forInRight],
                             forOwn: [Function: forOwn],
                             forOwnRight: [Function: forOwnRight],
                             get: [Function: get],
                             gt: [Function],
                             gte: [Function],
                             has: [Function: has],
                             hasIn: [Function: hasIn],
                             head: [Function: head],
                             identity: [Function: identity],
                             includes: [Function: includes],
                             indexOf: [Function: indexOf],
                             inRange: [Function: inRange],
                             invoke: [Function],
                             isArguments: [Function: baseIsArguments],
                             isArray: [Function: isArray],
                             isArrayBuffer: [Function],
                             isArrayLike: [Function: isArrayLike],
                             isArrayLikeObject: [Function: isArrayLikeObject],
                             isBoolean: [Function: isBoolean],
                             isBuffer: [Function: isBuffer],
                             isDate: [Function],
                             isElement: [Function: isElement],
                             isEmpty: [Function: isEmpty],
                             isEqual: [Function: isEqual],
                             isEqualWith: [Function: isEqualWith],
                             isError: [Function: isError],
                             isFinite: [Function: isFinite],
                             isFunction: [Function: isFunction],
                             isInteger: [Function: isInteger],
                             isLength: [Function: isLength],
                             isMap: [Function],
                             isMatch: [Function: isMatch],
                             isMatchWith: [Function: isMatchWith],
                             isNaN: [Function: isNaN],
                             isNative: [Function: isNative],
                             isNil: [Function: isNil],
                             isNull: [Function: isNull],
                             isNumber: [Function: isNumber],
                             isObject: [Function: isObject],
                             isObjectLike: [Function: isObjectLike],
                             isPlainObject: [Function: isPlainObject],
                             isRegExp: [Function],
                             isSafeInteger: [Function: isSafeInteger],
                             isSet: [Function],
                             isString: [Function: isString],
                             isSymbol: [Function: isSymbol],
                             isTypedArray: [Function],
                             isUndefined: [Function: isUndefined],
                             isWeakMap: [Function: isWeakMap],
                             isWeakSet: [Function: isWeakSet],
                             join: [Function: join],
                             kebabCase: [Function],
                             last: [Function: last],
                             lastIndexOf: [Function: lastIndexOf],
                             lowerCase: [Function],
                             lowerFirst: [Function],
                             lt: [Function],
                             lte: [Function],
                             max: [Function: max],
                             maxBy: [Function: maxBy],
                             mean: [Function: mean],
                             meanBy: [Function: meanBy],
                             min: [Function: min],
                             minBy: [Function: minBy],
                             stubArray: [Function: stubArray],
                             stubFalse: [Function: stubFalse],
                             stubObject: [Function: stubObject],
                             stubString: [Function: stubString],
                             stubTrue: [Function: stubTrue],
                             multiply: [Function],
                             nth: [Function: nth],
                             noConflict: [Function: noConflict],
                             noop: [Function: noop],
                             now: [Function],
                             pad: [Function: pad],
                             padEnd: [Function: padEnd],
                             padStart: [Function: padStart],
                             parseInt: [Function: parseInt],
                             random: [Function: random],
                             reduce: [Function: reduce],
                             reduceRight: [Function: reduceRight],
                             repeat: [Function: repeat],
                             replace: [Function: replace],
                             result: [Function: result],
                             round: [Function],
                             runInContext: [Function: runInContext],
                             sample: [Function: sample],
                             size: [Function: size],
                             snakeCase: [Function],
                             some: [Function: some],
                             sortedIndex: [Function: sortedIndex],
                             sortedIndexBy: [Function: sortedIndexBy],
                             sortedIndexOf: [Function: sortedIndexOf],
                             sortedLastIndex: [Function: sortedLastIndex],
                             sortedLastIndexBy: [Function: sortedLastIndexBy],
                             sortedLastIndexOf: [Function: sortedLastIndexOf],
                             startCase: [Function],
                             startsWith: [Function: startsWith],
                             subtract: [Function],
                             sum: [Function: sum],
                             sumBy: [Function: sumBy],
                             template: [Function: template],
                             times: [Function: times],
                             toFinite: [Function: toFinite],
                             toInteger: [Function: toInteger],
                             toLength: [Function: toLength],
                             toLower: [Function: toLower],
                             toNumber: [Function: toNumber],
                             toSafeInteger: [Function: toSafeInteger],
                             toString: [Function: toString],
                             toUpper: [Function: toUpper],
                             trim: [Function: trim],
                             trimEnd: [Function: trimEnd],
                             trimStart: [Function: trimStart],
                             truncate: [Function: truncate],
                             unescape: [Function: unescape],
                             uniqueId: [Function: uniqueId],
                             upperCase: [Function],
                             upperFirst: [Function],
                             each: [Function: forEach],
                             eachRight: [Function: forEachRight],
                             first: [Function: head],
                             VERSION: '4.17.11' } } },
                    options:
                     { dialect: 'mysql',
                       dialectModulePath: null,
                       host: 'localhost',
                       protocol: 'tcp',
                       define:
                        { underscored: false, freezeTableName: true, timestamps: true },
                       query: {},
                       sync: {},
                       timezone: '+00:00',
                       logging: false,
                       omitNull: false,
                       native: false,
                       replication: false,
                       ssl: undefined,
                       pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
                       quoteIdentifiers: true,
                       hooks: {},
                       retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
                       transactionType: 'DEFERRED',
                       isolationLevel: null,
                       databaseVersion: 0,
                       typeValidation: false,
                       benchmark: false,
                       operatorsAliases: false,
                       username: 'root',
                       password: 'password',
                       database: 'burger_db',
                       port: 3306 },
                    extractTableDetails: [Function: extractTableDetails],
                    addSchema: [Function: addSchema],
                    dropSchema: [Function: dropSchema],
                    describeTableQuery: [Function: describeTableQuery],
                    dropTableQuery: [Function: dropTableQuery],
                    renameTableQuery: [Function: renameTableQuery],
                    insertQuery: [Function: insertQuery],
                    bulkInsertQuery: [Function: bulkInsertQuery],
                    updateQuery: [Function: updateQuery],
                    arithmeticQuery: [Function: arithmeticQuery],
                    nameIndexes: [Function: nameIndexes],
                    addIndexQuery: [Function: addIndexQuery],
                    addConstraintQuery: [Function: addConstraintQuery],
                    getConstraintSnippet: [Function: getConstraintSnippet],
                    removeConstraintQuery: [Function: removeConstraintQuery],
                    quoteTable: [Function: quoteTable],
                    quote: [Function: quote],
                    quoteIdentifiers: [Function: quoteIdentifiers],
                    escape: [Function: escape],
                    selectQuery: [Function: selectQuery],
                    escapeAttributes: [Function: escapeAttributes],
                    generateInclude: [Function: generateInclude],
                    generateJoin: [Function: generateJoin],
                    generateThroughJoin: [Function: generateThroughJoin],
                    _generateSubQueryFilter: [Function: _generateSubQueryFilter],
                    _getRequiredClosure: [Function: _getRequiredClosure],
                    getQueryOrders: [Function: getQueryOrders],
                    selectFromTableFragment: [Function: selectFromTableFragment],
                    setAutocommitQuery: [Function: setAutocommitQuery],
                    setIsolationLevelQuery: [Function: setIsolationLevelQuery],
                    generateTransactionId: [Function: generateTransactionId],
                    startTransactionQuery: [Function: startTransactionQuery],
                    deferConstraintsQuery: [Function: deferConstraintsQuery],
                    setConstraintQuery: [Function: setConstraintQuery],
                    setDeferredQuery: [Function: setDeferredQuery],
                    setImmediateQuery: [Function: setImmediateQuery],
                    commitTransactionQuery: [Function: commitTransactionQuery],
                    rollbackTransactionQuery: [Function: rollbackTransactionQuery],
                    addLimitAndOffset: [Function: addLimitAndOffset],
                    whereQuery: [Function: whereQuery],
                    whereItemsQuery: [Function: whereItemsQuery],
                    OperatorsAliasMap: false,
                    setOperatorsAliases: [Function: setOperatorsAliases],
                    whereItemQuery: [Function: whereItemQuery],
                    _findField: [Function: _findField],
                    _replaceAliases: [Function: _replaceAliases],
                    _whereGroupBind: [Function: _whereGroupBind],
                    _whereBind: [Function: _whereBind],
                    _whereJSON: [Function: _whereJSON],
                    _traverseJSON: [Function: _traverseJSON],
                    _castKey: [Function: _castKey],
                    _getJsonCast: [Function: _getJsonCast],
                    _joinKeyValue: [Function: _joinKeyValue],
                    _getSafeKey: [Function: _getSafeKey],
                    _prefixKey: [Function: _prefixKey],
                    _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
                    getWhereConditions: [Function: getWhereConditions],
                    parseConditionObject: [Function: parseConditionObject],
                    isIdentifierQuoted: [Function: isIdentifierQuoted],
                    booleanValue: [Function: booleanValue],
                    _dialect: [Circular],
                    sequelize: [Circular],
                    typeValidation: undefined } },
              versionPromise: null,
              dialectName: 'mysql',
              pool:
               Pool {
                 _events: [Object: null prototype] {},
                 _eventsCount: 0,
                 _maxListeners: undefined,
                 _config:
                  PoolOptions {
                    fifo: true,
                    priorityRange: 1,
                    testOnBorrow: true,
                    testOnReturn: false,
                    autostart: false,
                    acquireTimeoutMillis: 30000,
                    max: 5,
                    min: 0,
                    evictionRunIntervalMillis: 10000,
                    numTestsPerEvictionRun: 3,
                    softIdleTimeoutMillis: -1,
                    idleTimeoutMillis: 10000,
                    Promise:
                     { [Function: Promise]
                       TypeError: [Function: TypeError],
                       RangeError: [Function: RangeError],
                       CancellationError: [Function: SubError],
                       TimeoutError: [Function: SubError],
                       OperationalError: [Function: OperationalError],
                       RejectionError: [Function: OperationalError],
                       AggregateError: [Function: SubError],
                       _peekContext: [Function],
                       onPossiblyUnhandledRejection: [Function],
                       onUnhandledRejectionHandled: [Function],
                       longStackTraces: [Function],
                       hasLongStackTraces: [Function],
                       config: [Function],
                       getNewLibraryCopy: [Function],
                       is: [Function],
                       fromCallback: [Function],
                       fromNode: [Function],
                       all: [Function],
                       cast: [Function],
                       fulfilled: [Function],
                       resolve: [Function],
                       rejected: [Function],
                       reject: [Function],
                       setScheduler: [Function],
                       pending: [Function],
                       defer: [Function],
                       method: [Function],
                       try: [Function],
                       attempt: [Function],
                       bind: [Function],
                       PromiseInspection: [Function: PromiseInspection],
                       join: [Function],
                       Promise: [Circular],
                       version: '3.5.3',
                       map: [Function],
                       using: [Function],
                       delay: [Function],
                       coroutine: { [Function] addYieldHandler: [Function] },
                       spawn: [Function],
                       promisify: [Function],
                       promisifyAll: [Function],
                       props: [Function],
                       race: [Function],
                       reduce: [Function],
                       settle: [Function],
                       some: [Function],
                       _SomePromiseArray: [Function: SomePromiseArray],
                       filter: [Function],
                       each: [Function],
                       mapSeries: [Function: PromiseMapSeries],
                       any: [Function],
                       default: [Circular] } },
                 _Promise:
                  { [Function: Promise]
                    TypeError: [Function: TypeError],
                    RangeError: [Function: RangeError],
                    CancellationError: [Function: SubError],
                    TimeoutError: [Function: SubError],
                    OperationalError: [Function: OperationalError],
                    RejectionError: [Function: OperationalError],
                    AggregateError: [Function: SubError],
                    _peekContext: [Function],
                    onPossiblyUnhandledRejection: [Function],
                    onUnhandledRejectionHandled: [Function],
                    longStackTraces: [Function],
                    hasLongStackTraces: [Function],
                    config: [Function],
                    getNewLibraryCopy: [Function],
                    is: [Function],
                    fromCallback: [Function],
                    fromNode: [Function],
                    all: [Function],
                    cast: [Function],
                    fulfilled: [Function],
                    resolve: [Function],
                    rejected: [Function],
                    reject: [Function],
                    setScheduler: [Function],
                    pending: [Function],
                    defer: [Function],
                    method: [Function],
                    try: [Function],
                    attempt: [Function],
                    bind: [Function],
                    PromiseInspection: [Function: PromiseInspection],
                    join: [Function],
                    Promise: [Circular],
                    version: '3.5.3',
                    map: [Function],
                    using: [Function],
                    delay: [Function],
                    coroutine: { [Function] addYieldHandler: [Function] },
                    spawn: [Function],
                    promisify: [Function],
                    promisifyAll: [Function],
                    props: [Function],
                    race: [Function],
                    reduce: [Function],
                    settle: [Function],
                    some: [Function],
                    _SomePromiseArray: [Function: SomePromiseArray],
                    filter: [Function],
                    each: [Function],
                    mapSeries: [Function: PromiseMapSeries],
                    any: [Function],
                    default: [Circular] },
                 _factory:
                  { create: [Function: create],
                    destroy: [Function: destroy],
                    validate: [Function: bound _validate] },
                 _draining: false,
                 _started: false,
                 _waitingClientsQueue:
                  PriorityQueue {
                    _size: 1,
                    _slots:
                     [ Queue {
                         _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
                 _factoryCreateOperations: Set {},
                 _factoryDestroyOperations: Set {},
                 _availableObjects:
                  Deque {
                    _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
                 _testOnBorrowResources: Set {},
                 _testOnReturnResources: Set {},
                 _validationOperations: Set {},
                 _allObjects: Set {},
                 _resourceLoans: Map {},
                 _evictionIterator:
                  DequeIterator {
                    _list: DoublyLinkedList { head: null, tail: null, length: 0 },
                    _direction: 'next',
                    _startPosition: 'head',
                    _started: false,
                    _cursor: null,
                    _done: false },
                 _evictor: DefaultEvictor {},
                 _scheduledEviction: null },
              lib:
               { createConnection: [Function],
                 connect: [Function],
                 Connection: [Function: Connection],
                 createPool: [Function],
                 createPoolCluster: [Function],
                 createQuery: [Function: createQuery],
                 Pool: [Function: Pool],
                 createServer: [Function],
                 PoolConnection:
                  { [Function: PoolConnection] statementKey: [Function: statementKey] },
                 escape: [Function: escape],
                 escapeId: [Function: escapeId],
                 format: [Function: format],
                 raw: [Function: raw],
                 createConnectionPromise: [Getter],
                 createPoolPromise: [Getter],
                 createPoolClusterPromise: [Getter],
                 Types: [Getter],
                 Charsets: [Getter],
                 CharsetToEncoding: [Getter],
                 setMaxParserCache: [Function],
                 clearParserCache: [Function] } },
           importCache:
            { '/Users/paullinck/GitHub/GTPE/BurgerLogSequel/models/burger.js': [Circular] },
           test:
            { _trackRunningQueries: false,
              _runningQueries: 0,
              trackRunningQueries: [Function: trackRunningQueries],
              verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
        hooks: {},
        uniqueKeys: {} },
     associations: {},
     underscored: undefined,
     tableName: 'burgers',
     _schema: null,
     _schemaDelimiter: '',
     rawAttributes:
      { id:
         { type:
            INTEGER {
              options: { length: undefined },
              _length: undefined,
              _zerofill: undefined,
              _decimals: undefined,
              _precision: undefined,
              _scale: undefined,
              _unsigned: undefined },
           allowNull: false,
           primaryKey: true,
           autoIncrement: true,
           _autoGenerated: true,
           Model: [Circular],
           fieldName: 'id',
           _modelAttribute: true,
           field: 'id' },
        name:
         { type:
            STRING {
              options: { length: undefined, binary: undefined },
              _binary: undefined,
              _length: 255 },
           allowNull: false,
           validate: { len: [ 1, 140 ] },
           Model: [Circular],
           fieldName: 'name',
           _modelAttribute: true,
           field: 'name' },
        isDevoured:
         { type: BOOLEAN {},
           allowNull: false,
           defaultValue: false,
           Model: [Circular],
           fieldName: 'isDevoured',
           _modelAttribute: true,
           field: 'isDevoured' },
        createdAt:
         { type: DATE { options: { length: undefined }, _length: '' },
           allowNull: false,
           _autoGenerated: true,
           Model: [Circular],
           fieldName: 'createdAt',
           _modelAttribute: true,
           field: 'createdAt' },
        updatedAt:
         { type: DATE { options: { length: undefined }, _length: '' },
           allowNull: false,
           _autoGenerated: true,
           Model: [Circular],
           fieldName: 'updatedAt',
           _modelAttribute: true,
           field: 'updatedAt' } },
     primaryKeys:
      { id:
         { type:
            INTEGER {
              options: { length: undefined },
              _length: undefined,
              _zerofill: undefined,
              _decimals: undefined,
              _precision: undefined,
              _scale: undefined,
              _unsigned: undefined },
           allowNull: false,
           primaryKey: true,
           autoIncrement: true,
           _autoGenerated: true,
           Model: [Circular],
           fieldName: 'id',
           _modelAttribute: true,
           field: 'id' } },
     _timestampAttributes: { createdAt: 'createdAt', updatedAt: 'updatedAt' },
     _readOnlyAttributes: [ 'createdAt', 'updatedAt' ],
     _hasReadOnlyAttributes: 2,
     _isReadOnlyAttribute:
      { [Function: memoized]
        cache:
         MapCache {
           size: 0,
           __data__:
            { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
              map: Map {},
              string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
     _dataTypeChanges:
      { createdAt: [Function: _isChanged],
        updatedAt: [Function: _isChanged] },
     _dataTypeSanitizers:
      { isDevoured: [Function: _sanitize],
        createdAt: [Function: _sanitize],
        updatedAt: [Function: _sanitize] },
     _booleanAttributes: [ 'isDevoured' ],
     _dateAttributes: [ 'createdAt', 'updatedAt' ],
     _hstoreAttributes: [],
     _rangeAttributes: [],
     _jsonAttributes: [],
     _geometryAttributes: [],
     _virtualAttributes: [],
     _defaultValues: { isDevoured: [Function: wrapper] },
     fieldRawAttributesMap:
      { id:
         { type:
            INTEGER {
              options: { length: undefined },
              _length: undefined,
              _zerofill: undefined,
              _decimals: undefined,
              _precision: undefined,
              _scale: undefined,
              _unsigned: undefined },
           allowNull: false,
           primaryKey: true,
           autoIncrement: true,
           _autoGenerated: true,
           Model: [Circular],
           fieldName: 'id',
           _modelAttribute: true,
           field: 'id' },
        name:
         { type:
            STRING {
              options: { length: undefined, binary: undefined },
              _binary: undefined,
              _length: 255 },
           allowNull: false,
           validate: { len: [ 1, 140 ] },
           Model: [Circular],
           fieldName: 'name',
           _modelAttribute: true,
           field: 'name' },
        isDevoured:
         { type: BOOLEAN {},
           allowNull: false,
           defaultValue: false,
           Model: [Circular],
           fieldName: 'isDevoured',
           _modelAttribute: true,
           field: 'isDevoured' },
        createdAt:
         { type: DATE { options: { length: undefined }, _length: '' },
           allowNull: false,
           _autoGenerated: true,
           Model: [Circular],
           fieldName: 'createdAt',
           _modelAttribute: true,
           field: 'createdAt' },
        updatedAt:
         { type: DATE { options: { length: undefined }, _length: '' },
           allowNull: false,
           _autoGenerated: true,
           Model: [Circular],
           fieldName: 'updatedAt',
           _modelAttribute: true,
           field: 'updatedAt' } },
     fieldAttributeMap: {},
     uniqueKeys: {},
     _hasBooleanAttributes: true,
     _isBooleanAttribute:
      { [Function: memoized]
        cache:
         MapCache {
           size: 0,
           __data__:
            { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
              map: Map {},
              string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
     _hasDateAttributes: true,
     _isDateAttribute:
      { [Function: memoized]
        cache:
         MapCache {
           size: 0,
           __data__:
            { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
              map: Map {},
              string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
     _hasHstoreAttributes: false,
     _isHstoreAttribute:
      { [Function: memoized]
        cache:
         MapCache {
           size: 0,
           __data__:
            { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
              map: Map {},
              string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
     _hasRangeAttributes: false,
     _isRangeAttribute:
      { [Function: memoized]
        cache:
         MapCache {
           size: 0,
           __data__:
            { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
              map: Map {},
              string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
     _hasJsonAttributes: false,
     _isJsonAttribute:
      { [Function: memoized]
        cache:
         MapCache {
           size: 0,
           __data__:
            { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
              map: Map {},
              string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
     _hasVirtualAttributes: false,
     _isVirtualAttribute:
      { [Function: memoized]
        cache:
         MapCache {
           size: 0,
           __data__:
            { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
              map: Map {},
              string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
     _hasGeometryAttributes: false,
     _isGeometryAttribute:
      { [Function: memoized]
        cache:
         MapCache {
           size: 0,
           __data__:
            { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
              map: Map {},
              string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
     _hasDefaultValues: true,
     attributes:
      { id:
         { type:
            INTEGER {
              options: { length: undefined },
              _length: undefined,
              _zerofill: undefined,
              _decimals: undefined,
              _precision: undefined,
              _scale: undefined,
              _unsigned: undefined },
           allowNull: false,
           primaryKey: true,
           autoIncrement: true,
           _autoGenerated: true,
           Model: [Circular],
           fieldName: 'id',
           _modelAttribute: true,
           field: 'id' },
        name:
         { type:
            STRING {
              options: { length: undefined, binary: undefined },
              _binary: undefined,
              _length: 255 },
           allowNull: false,
           validate: { len: [ 1, 140 ] },
           Model: [Circular],
           fieldName: 'name',
           _modelAttribute: true,
           field: 'name' },
        isDevoured:
         { type: BOOLEAN {},
           allowNull: false,
           defaultValue: false,
           Model: [Circular],
           fieldName: 'isDevoured',
           _modelAttribute: true,
           field: 'isDevoured' },
        createdAt:
         { type: DATE { options: { length: undefined }, _length: '' },
           allowNull: false,
           _autoGenerated: true,
           Model: [Circular],
           fieldName: 'createdAt',
           _modelAttribute: true,
           field: 'createdAt' },
        updatedAt:
         { type: DATE { options: { length: undefined }, _length: '' },
           allowNull: false,
           _autoGenerated: true,
           Model: [Circular],
           fieldName: 'updatedAt',
           _modelAttribute: true,
           field: 'updatedAt' } },
     tableAttributes:
      { id:
         { type:
            INTEGER {
              options: { length: undefined },
              _length: undefined,
              _zerofill: undefined,
              _decimals: undefined,
              _precision: undefined,
              _scale: undefined,
              _unsigned: undefined },
           allowNull: false,
           primaryKey: true,
           autoIncrement: true,
           _autoGenerated: true,
           Model: [Circular],
           fieldName: 'id',
           _modelAttribute: true,
           field: 'id' },
        name:
         { type:
            STRING {
              options: { length: undefined, binary: undefined },
              _binary: undefined,
              _length: 255 },
           allowNull: false,
           validate: { len: [ 1, 140 ] },
           Model: [Circular],
           fieldName: 'name',
           _modelAttribute: true,
           field: 'name' },
        isDevoured:
         { type: BOOLEAN {},
           allowNull: false,
           defaultValue: false,
           Model: [Circular],
           fieldName: 'isDevoured',
           _modelAttribute: true,
           field: 'isDevoured' },
        createdAt:
         { type: DATE { options: { length: undefined }, _length: '' },
           allowNull: false,
           _autoGenerated: true,
           Model: [Circular],
           fieldName: 'createdAt',
           _modelAttribute: true,
           field: 'createdAt' },
        updatedAt:
         { type: DATE { options: { length: undefined }, _length: '' },
           allowNull: false,
           _autoGenerated: true,
           Model: [Circular],
           fieldName: 'updatedAt',
           _modelAttribute: true,
           field: 'updatedAt' } },
     primaryKeyAttributes: [ 'id' ],
     primaryKeyAttribute: 'id',
     primaryKeyField: 'id',
     _hasPrimaryKeys: true,
     _isPrimaryKey:
      { [Function: memoized]
        cache:
         MapCache {
           size: 0,
           __data__:
            { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
              map: Map {},
              string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
     autoIncrementAttribute: 'id',
     _scope: {},
     _scopeNames: [ 'defaultScope' ] },
  sequelize:
   Sequelize {
     options:
      { dialect: 'mysql',
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define:
         { underscored: false, freezeTableName: true, timestamps: true },
        query: {},
        sync: {},
        timezone: '+00:00',
        logging: false,
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
        quoteIdentifiers: true,
        hooks: {},
        retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        operatorsAliases: false,
        username: 'root',
        password: 'password',
        database: 'burger_db',
        port: 3306 },
     config:
      { database: 'burger_db',
        username: 'root',
        password: 'password',
        host: 'localhost',
        port: 3306,
        pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect:
      MysqlDialect {
        sequelize: [Circular],
        connectionManager:
         ConnectionManager {
           sequelize: [Circular],
           config:
            { database: 'burger_db',
              username: 'root',
              password: 'password',
              host: 'localhost',
              port: 3306,
              pool:
               { max: 5,
                 min: 0,
                 acquire: 30000,
                 idle: 10000,
                 evict: 10000,
                 handleDisconnects: true,
                 validate: [Function: bound _validate],
                 Promise:
                  { [Function: Promise]
                    TypeError: [Function: TypeError],
                    RangeError: [Function: RangeError],
                    CancellationError: [Function: SubError],
                    TimeoutError: [Function: SubError],
                    OperationalError: [Function: OperationalError],
                    RejectionError: [Function: OperationalError],
                    AggregateError: [Function: SubError],
                    _peekContext: [Function],
                    onPossiblyUnhandledRejection: [Function],
                    onUnhandledRejectionHandled: [Function],
                    longStackTraces: [Function],
                    hasLongStackTraces: [Function],
                    config: [Function],
                    getNewLibraryCopy: [Function],
                    is: [Function],
                    fromCallback: [Function],
                    fromNode: [Function],
                    all: [Function],
                    cast: [Function],
                    fulfilled: [Function],
                    resolve: [Function],
                    rejected: [Function],
                    reject: [Function],
                    setScheduler: [Function],
                    pending: [Function],
                    defer: [Function],
                    method: [Function],
                    try: [Function],
                    attempt: [Function],
                    bind: [Function],
                    PromiseInspection: [Function: PromiseInspection],
                    join: [Function],
                    Promise: [Circular],
                    version: '3.5.3',
                    map: [Function],
                    using: [Function],
                    delay: [Function],
                    coroutine: { [Function] addYieldHandler: [Function] },
                    spawn: [Function],
                    promisify: [Function],
                    promisifyAll: [Function],
                    props: [Function],
                    race: [Function],
                    reduce: [Function],
                    settle: [Function],
                    some: [Function],
                    _SomePromiseArray: [Function: SomePromiseArray],
                    filter: [Function],
                    each: [Function],
                    mapSeries: [Function: PromiseMapSeries],
                    any: [Function],
                    default: [Circular] } },
              protocol: 'tcp',
              native: false,
              ssl: undefined,
              replication: false,
              dialectModulePath: null,
              keepDefaultTimezone: undefined,
              dialectOptions: undefined },
           dialect: [Circular],
           versionPromise: null,
           dialectName: 'mysql',
           pool:
            Pool {
              _events: [Object: null prototype] {},
              _eventsCount: 0,
              _maxListeners: undefined,
              _config:
               PoolOptions {
                 fifo: true,
                 priorityRange: 1,
                 testOnBorrow: true,
                 testOnReturn: false,
                 autostart: false,
                 acquireTimeoutMillis: 30000,
                 max: 5,
                 min: 0,
                 evictionRunIntervalMillis: 10000,
                 numTestsPerEvictionRun: 3,
                 softIdleTimeoutMillis: -1,
                 idleTimeoutMillis: 10000,
                 Promise:
                  { [Function: Promise]
                    TypeError: [Function: TypeError],
                    RangeError: [Function: RangeError],
                    CancellationError: [Function: SubError],
                    TimeoutError: [Function: SubError],
                    OperationalError: [Function: OperationalError],
                    RejectionError: [Function: OperationalError],
                    AggregateError: [Function: SubError],
                    _peekContext: [Function],
                    onPossiblyUnhandledRejection: [Function],
                    onUnhandledRejectionHandled: [Function],
                    longStackTraces: [Function],
                    hasLongStackTraces: [Function],
                    config: [Function],
                    getNewLibraryCopy: [Function],
                    is: [Function],
                    fromCallback: [Function],
                    fromNode: [Function],
                    all: [Function],
                    cast: [Function],
                    fulfilled: [Function],
                    resolve: [Function],
                    rejected: [Function],
                    reject: [Function],
                    setScheduler: [Function],
                    pending: [Function],
                    defer: [Function],
                    method: [Function],
                    try: [Function],
                    attempt: [Function],
                    bind: [Function],
                    PromiseInspection: [Function: PromiseInspection],
                    join: [Function],
                    Promise: [Circular],
                    version: '3.5.3',
                    map: [Function],
                    using: [Function],
                    delay: [Function],
                    coroutine: { [Function] addYieldHandler: [Function] },
                    spawn: [Function],
                    promisify: [Function],
                    promisifyAll: [Function],
                    props: [Function],
                    race: [Function],
                    reduce: [Function],
                    settle: [Function],
                    some: [Function],
                    _SomePromiseArray: [Function: SomePromiseArray],
                    filter: [Function],
                    each: [Function],
                    mapSeries: [Function: PromiseMapSeries],
                    any: [Function],
                    default: [Circular] } },
              _Promise:
               { [Function: Promise]
                 TypeError: [Function: TypeError],
                 RangeError: [Function: RangeError],
                 CancellationError: [Function: SubError],
                 TimeoutError: [Function: SubError],
                 OperationalError: [Function: OperationalError],
                 RejectionError: [Function: OperationalError],
                 AggregateError: [Function: SubError],
                 _peekContext: [Function],
                 onPossiblyUnhandledRejection: [Function],
                 onUnhandledRejectionHandled: [Function],
                 longStackTraces: [Function],
                 hasLongStackTraces: [Function],
                 config: [Function],
                 getNewLibraryCopy: [Function],
                 is: [Function],
                 fromCallback: [Function],
                 fromNode: [Function],
                 all: [Function],
                 cast: [Function],
                 fulfilled: [Function],
                 resolve: [Function],
                 rejected: [Function],
                 reject: [Function],
                 setScheduler: [Function],
                 pending: [Function],
                 defer: [Function],
                 method: [Function],
                 try: [Function],
                 attempt: [Function],
                 bind: [Function],
                 PromiseInspection: [Function: PromiseInspection],
                 join: [Function],
                 Promise: [Circular],
                 version: '3.5.3',
                 map: [Function],
                 using: [Function],
                 delay: [Function],
                 coroutine: { [Function] addYieldHandler: [Function] },
                 spawn: [Function],
                 promisify: [Function],
                 promisifyAll: [Function],
                 props: [Function],
                 race: [Function],
                 reduce: [Function],
                 settle: [Function],
                 some: [Function],
                 _SomePromiseArray: [Function: SomePromiseArray],
                 filter: [Function],
                 each: [Function],
                 mapSeries: [Function: PromiseMapSeries],
                 any: [Function],
                 default: [Circular] },
              _factory:
               { create: [Function: create],
                 destroy: [Function: destroy],
                 validate: [Function: bound _validate] },
              _draining: false,
              _started: false,
              _waitingClientsQueue:
               PriorityQueue {
                 _size: 1,
                 _slots:
                  [ Queue {
                      _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
              _factoryCreateOperations: Set {},
              _factoryDestroyOperations: Set {},
              _availableObjects:
               Deque {
                 _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
              _testOnBorrowResources: Set {},
              _testOnReturnResources: Set {},
              _validationOperations: Set {},
              _allObjects: Set {},
              _resourceLoans: Map {},
              _evictionIterator:
               DequeIterator {
                 _list: DoublyLinkedList { head: null, tail: null, length: 0 },
                 _direction: 'next',
                 _startPosition: 'head',
                 _started: false,
                 _cursor: null,
                 _done: false },
              _evictor: DefaultEvictor {},
              _scheduledEviction: null },
           lib:
            { createConnection: [Function],
              connect: [Function],
              Connection: [Function: Connection],
              createPool: [Function],
              createPoolCluster: [Function],
              createQuery: [Function: createQuery],
              Pool: [Function: Pool],
              createServer: [Function],
              PoolConnection:
               { [Function: PoolConnection] statementKey: [Function: statementKey] },
              escape: [Function: escape],
              escapeId: [Function: escapeId],
              format: [Function: format],
              raw: [Function: raw],
              createConnectionPromise: [Getter],
              createPoolPromise: [Getter],
              createPoolClusterPromise: [Getter],
              Types: [Getter],
              Charsets: [Getter],
              CharsetToEncoding: [Getter],
              setMaxParserCache: [Function],
              clearParserCache: [Function] } },
        QueryGenerator:
         { dialect: 'mysql',
           OperatorMap:
            { [Symbol(eq)]: '=',
              [Symbol(ne)]: '!=',
              [Symbol(gte)]: '>=',
              [Symbol(gt)]: '>',
              [Symbol(lte)]: '<=',
              [Symbol(lt)]: '<',
              [Symbol(not)]: 'IS NOT',
              [Symbol(is)]: 'IS',
              [Symbol(in)]: 'IN',
              [Symbol(notIn)]: 'NOT IN',
              [Symbol(like)]: 'LIKE',
              [Symbol(notLike)]: 'NOT LIKE',
              [Symbol(iLike)]: 'ILIKE',
              [Symbol(notILike)]: 'NOT ILIKE',
              [Symbol(regexp)]: 'REGEXP',
              [Symbol(notRegexp)]: 'NOT REGEXP',
              [Symbol(iRegexp)]: '~*',
              [Symbol(notIRegexp)]: '!~*',
              [Symbol(between)]: 'BETWEEN',
              [Symbol(notBetween)]: 'NOT BETWEEN',
              [Symbol(overlap)]: '&&',
              [Symbol(contains)]: '@>',
              [Symbol(contained)]: '<@',
              [Symbol(adjacent)]: '-|-',
              [Symbol(strictLeft)]: '<<',
              [Symbol(strictRight)]: '>>',
              [Symbol(noExtendRight)]: '&<',
              [Symbol(noExtendLeft)]: '&>',
              [Symbol(any)]: 'ANY',
              [Symbol(all)]: 'ALL',
              [Symbol(and)]: ' AND ',
              [Symbol(or)]: ' OR ',
              [Symbol(col)]: 'COL',
              [Symbol(placeholder)]: '$$PLACEHOLDER$$',
              [Symbol(raw)]: 'DEPRECATED' },
           createSchema: [Function: createSchema],
           showSchemasQuery: [Function: showSchemasQuery],
           versionQuery: [Function: versionQuery],
           createTableQuery: [Function: createTableQuery],
           showTablesQuery: [Function: showTablesQuery],
           addColumnQuery: [Function: addColumnQuery],
           removeColumnQuery: [Function: removeColumnQuery],
           changeColumnQuery: [Function: changeColumnQuery],
           renameColumnQuery: [Function: renameColumnQuery],
           handleSequelizeMethod: [Function: handleSequelizeMethod],
           _toJSONValue: [Function: _toJSONValue],
           upsertQuery: [Function: upsertQuery],
           deleteQuery: [Function: deleteQuery],
           showIndexesQuery: [Function: showIndexesQuery],
           showConstraintsQuery: [Function: showConstraintsQuery],
           removeIndexQuery: [Function: removeIndexQuery],
           attributeToSQL: [Function: attributeToSQL],
           attributesToSQL: [Function: attributesToSQL],
           quoteIdentifier: [Function: quoteIdentifier],
           _checkValidJsonStatement: [Function: _checkValidJsonStatement],
           jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
           _getForeignKeysQueryFields: [Function: _getForeignKeysQueryFields],
           getForeignKeysQuery: [Function: getForeignKeysQuery],
           getForeignKeyQuery: [Function: getForeignKeyQuery],
           dropForeignKeyQuery: [Function: dropForeignKeyQuery],
           _templateSettings:
            { escape: /<%-([\s\S]+?)%>/g,
              evaluate: /<%([\s\S]+?)%>/g,
              interpolate: /<%=([\s\S]+?)%>/g,
              variable: '',
              imports:
               { _:
                  { [Function: lodash]
                    templateSettings: [Circular],
                    after: [Function: after],
                    ary: [Function: ary],
                    assign: [Function],
                    assignIn: [Function],
                    assignInWith: [Function],
                    assignWith: [Function],
                    at: [Function],
                    before: [Function: before],
                    bind: { [Function] placeholder: [Circular] },
                    bindAll: [Function],
                    bindKey: { [Function] placeholder: [Circular] },
                    castArray: [Function: castArray],
                    chain: [Function: chain],
                    chunk: [Function: chunk],
                    compact: [Function: compact],
                    concat: [Function: concat],
                    cond: [Function: cond],
                    conforms: [Function: conforms],
                    constant: [Function: constant],
                    countBy: [Function],
                    create: [Function: create],
                    curry: { [Function: curry] placeholder: [Circular] },
                    curryRight: { [Function: curryRight] placeholder: [Circular] },
                    debounce: [Function: debounce],
                    defaults: [Function],
                    defaultsDeep: [Function],
                    defer: [Function],
                    delay: [Function],
                    difference: [Function],
                    differenceBy: [Function],
                    differenceWith: [Function],
                    drop: [Function: drop],
                    dropRight: [Function: dropRight],
                    dropRightWhile: [Function: dropRightWhile],
                    dropWhile: [Function: dropWhile],
                    fill: [Function: fill],
                    filter: [Function: filter],
                    flatMap: [Function: flatMap],
                    flatMapDeep: [Function: flatMapDeep],
                    flatMapDepth: [Function: flatMapDepth],
                    flatten: [Function: flatten],
                    flattenDeep: [Function: flattenDeep],
                    flattenDepth: [Function: flattenDepth],
                    flip: [Function: flip],
                    flow: [Function],
                    flowRight: [Function],
                    fromPairs: [Function: fromPairs],
                    functions: [Function: functions],
                    functionsIn: [Function: functionsIn],
                    groupBy: [Function],
                    initial: [Function: initial],
                    intersection: [Function],
                    intersectionBy: [Function],
                    intersectionWith: [Function],
                    invert: [Function],
                    invertBy: [Function],
                    invokeMap: [Function],
                    iteratee: [Function: iteratee],
                    keyBy: [Function],
                    keys: [Function: keys],
                    keysIn: [Function: keysIn],
                    map: [Function: map],
                    mapKeys: [Function: mapKeys],
                    mapValues: [Function: mapValues],
                    matches: [Function: matches],
                    matchesProperty: [Function: matchesProperty],
                    memoize: { [Function: memoize] Cache: [Function: MapCache] },
                    merge: [Function],
                    mergeWith: [Function],
                    method: [Function],
                    methodOf: [Function],
                    mixin: [Function: mixin],
                    negate: [Function: negate],
                    nthArg: [Function: nthArg],
                    omit: [Function],
                    omitBy: [Function: omitBy],
                    once: [Function: once],
                    orderBy: [Function: orderBy],
                    over: [Function],
                    overArgs: [Function],
                    overEvery: [Function],
                    overSome: [Function],
                    partial: { [Function] placeholder: [Circular] },
                    partialRight: { [Function] placeholder: [Circular] },
                    partition: [Function],
                    pick: [Function],
                    pickBy: [Function: pickBy],
                    property: [Function: property],
                    propertyOf: [Function: propertyOf],
                    pull: [Function],
                    pullAll: [Function: pullAll],
                    pullAllBy: [Function: pullAllBy],
                    pullAllWith: [Function: pullAllWith],
                    pullAt: [Function],
                    range: [Function],
                    rangeRight: [Function],
                    rearg: [Function],
                    reject: [Function: reject],
                    remove: [Function: remove],
                    rest: [Function: rest],
                    reverse: [Function: reverse],
                    sampleSize: [Function: sampleSize],
                    set: [Function: set],
                    setWith: [Function: setWith],
                    shuffle: [Function: shuffle],
                    slice: [Function: slice],
                    sortBy: [Function],
                    sortedUniq: [Function: sortedUniq],
                    sortedUniqBy: [Function: sortedUniqBy],
                    split: [Function: split],
                    spread: [Function: spread],
                    tail: [Function: tail],
                    take: [Function: take],
                    takeRight: [Function: takeRight],
                    takeRightWhile: [Function: takeRightWhile],
                    takeWhile: [Function: takeWhile],
                    tap: [Function: tap],
                    throttle: [Function: throttle],
                    thru: [Function: thru],
                    toArray: [Function: toArray],
                    toPairs: [Function],
                    toPairsIn: [Function],
                    toPath: [Function: toPath],
                    toPlainObject: [Function: toPlainObject],
                    transform: [Function: transform],
                    unary: [Function: unary],
                    union: [Function],
                    unionBy: [Function],
                    unionWith: [Function],
                    uniq: [Function: uniq],
                    uniqBy: [Function: uniqBy],
                    uniqWith: [Function: uniqWith],
                    unset: [Function: unset],
                    unzip: [Function: unzip],
                    unzipWith: [Function: unzipWith],
                    update: [Function: update],
                    updateWith: [Function: updateWith],
                    values: [Function: values],
                    valuesIn: [Function: valuesIn],
                    without: [Function],
                    words: [Function: words],
                    wrap: [Function: wrap],
                    xor: [Function],
                    xorBy: [Function],
                    xorWith: [Function],
                    zip: [Function],
                    zipObject: [Function: zipObject],
                    zipObjectDeep: [Function: zipObjectDeep],
                    zipWith: [Function],
                    entries: [Function],
                    entriesIn: [Function],
                    extend: [Function],
                    extendWith: [Function],
                    add: [Function],
                    attempt: [Function],
                    camelCase: [Function],
                    capitalize: [Function: capitalize],
                    ceil: [Function],
                    clamp: [Function: clamp],
                    clone: [Function: clone],
                    cloneDeep: [Function: cloneDeep],
                    cloneDeepWith: [Function: cloneDeepWith],
                    cloneWith: [Function: cloneWith],
                    conformsTo: [Function: conformsTo],
                    deburr: [Function: deburr],
                    defaultTo: [Function: defaultTo],
                    divide: [Function],
                    endsWith: [Function: endsWith],
                    eq: [Function: eq],
                    escape: [Function: escape],
                    escapeRegExp: [Function: escapeRegExp],
                    every: [Function: every],
                    find: [Function],
                    findIndex: [Function: findIndex],
                    findKey: [Function: findKey],
                    findLast: [Function],
                    findLastIndex: [Function: findLastIndex],
                    findLastKey: [Function: findLastKey],
                    floor: [Function],
                    forEach: [Function: forEach],
                    forEachRight: [Function: forEachRight],
                    forIn: [Function: forIn],
                    forInRight: [Function: forInRight],
                    forOwn: [Function: forOwn],
                    forOwnRight: [Function: forOwnRight],
                    get: [Function: get],
                    gt: [Function],
                    gte: [Function],
                    has: [Function: has],
                    hasIn: [Function: hasIn],
                    head: [Function: head],
                    identity: [Function: identity],
                    includes: [Function: includes],
                    indexOf: [Function: indexOf],
                    inRange: [Function: inRange],
                    invoke: [Function],
                    isArguments: [Function: baseIsArguments],
                    isArray: [Function: isArray],
                    isArrayBuffer: [Function],
                    isArrayLike: [Function: isArrayLike],
                    isArrayLikeObject: [Function: isArrayLikeObject],
                    isBoolean: [Function: isBoolean],
                    isBuffer: [Function: isBuffer],
                    isDate: [Function],
                    isElement: [Function: isElement],
                    isEmpty: [Function: isEmpty],
                    isEqual: [Function: isEqual],
                    isEqualWith: [Function: isEqualWith],
                    isError: [Function: isError],
                    isFinite: [Function: isFinite],
                    isFunction: [Function: isFunction],
                    isInteger: [Function: isInteger],
                    isLength: [Function: isLength],
                    isMap: [Function],
                    isMatch: [Function: isMatch],
                    isMatchWith: [Function: isMatchWith],
                    isNaN: [Function: isNaN],
                    isNative: [Function: isNative],
                    isNil: [Function: isNil],
                    isNull: [Function: isNull],
                    isNumber: [Function: isNumber],
                    isObject: [Function: isObject],
                    isObjectLike: [Function: isObjectLike],
                    isPlainObject: [Function: isPlainObject],
                    isRegExp: [Function],
                    isSafeInteger: [Function: isSafeInteger],
                    isSet: [Function],
                    isString: [Function: isString],
                    isSymbol: [Function: isSymbol],
                    isTypedArray: [Function],
                    isUndefined: [Function: isUndefined],
                    isWeakMap: [Function: isWeakMap],
                    isWeakSet: [Function: isWeakSet],
                    join: [Function: join],
                    kebabCase: [Function],
                    last: [Function: last],
                    lastIndexOf: [Function: lastIndexOf],
                    lowerCase: [Function],
                    lowerFirst: [Function],
                    lt: [Function],
                    lte: [Function],
                    max: [Function: max],
                    maxBy: [Function: maxBy],
                    mean: [Function: mean],
                    meanBy: [Function: meanBy],
                    min: [Function: min],
                    minBy: [Function: minBy],
                    stubArray: [Function: stubArray],
                    stubFalse: [Function: stubFalse],
                    stubObject: [Function: stubObject],
                    stubString: [Function: stubString],
                    stubTrue: [Function: stubTrue],
                    multiply: [Function],
                    nth: [Function: nth],
                    noConflict: [Function: noConflict],
                    noop: [Function: noop],
                    now: [Function],
                    pad: [Function: pad],
                    padEnd: [Function: padEnd],
                    padStart: [Function: padStart],
                    parseInt: [Function: parseInt],
                    random: [Function: random],
                    reduce: [Function: reduce],
                    reduceRight: [Function: reduceRight],
                    repeat: [Function: repeat],
                    replace: [Function: replace],
                    result: [Function: result],
                    round: [Function],
                    runInContext: [Function: runInContext],
                    sample: [Function: sample],
                    size: [Function: size],
                    snakeCase: [Function],
                    some: [Function: some],
                    sortedIndex: [Function: sortedIndex],
                    sortedIndexBy: [Function: sortedIndexBy],
                    sortedIndexOf: [Function: sortedIndexOf],
                    sortedLastIndex: [Function: sortedLastIndex],
                    sortedLastIndexBy: [Function: sortedLastIndexBy],
                    sortedLastIndexOf: [Function: sortedLastIndexOf],
                    startCase: [Function],
                    startsWith: [Function: startsWith],
                    subtract: [Function],
                    sum: [Function: sum],
                    sumBy: [Function: sumBy],
                    template: [Function: template],
                    times: [Function: times],
                    toFinite: [Function: toFinite],
                    toInteger: [Function: toInteger],
                    toLength: [Function: toLength],
                    toLower: [Function: toLower],
                    toNumber: [Function: toNumber],
                    toSafeInteger: [Function: toSafeInteger],
                    toString: [Function: toString],
                    toUpper: [Function: toUpper],
                    trim: [Function: trim],
                    trimEnd: [Function: trimEnd],
                    trimStart: [Function: trimStart],
                    truncate: [Function: truncate],
                    unescape: [Function: unescape],
                    uniqueId: [Function: uniqueId],
                    upperCase: [Function],
                    upperFirst: [Function],
                    each: [Function: forEach],
                    eachRight: [Function: forEachRight],
                    first: [Function: head],
                    VERSION: '4.17.11' } } },
           options:
            { dialect: 'mysql',
              dialectModulePath: null,
              host: 'localhost',
              protocol: 'tcp',
              define:
               { underscored: false, freezeTableName: true, timestamps: true },
              query: {},
              sync: {},
              timezone: '+00:00',
              logging: false,
              omitNull: false,
              native: false,
              replication: false,
              ssl: undefined,
              pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
              quoteIdentifiers: true,
              hooks: {},
              retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
              transactionType: 'DEFERRED',
              isolationLevel: null,
              databaseVersion: 0,
              typeValidation: false,
              benchmark: false,
              operatorsAliases: false,
              username: 'root',
              password: 'password',
              database: 'burger_db',
              port: 3306 },
           extractTableDetails: [Function: extractTableDetails],
           addSchema: [Function: addSchema],
           dropSchema: [Function: dropSchema],
           describeTableQuery: [Function: describeTableQuery],
           dropTableQuery: [Function: dropTableQuery],
           renameTableQuery: [Function: renameTableQuery],
           insertQuery: [Function: insertQuery],
           bulkInsertQuery: [Function: bulkInsertQuery],
           updateQuery: [Function: updateQuery],
           arithmeticQuery: [Function: arithmeticQuery],
           nameIndexes: [Function: nameIndexes],
           addIndexQuery: [Function: addIndexQuery],
           addConstraintQuery: [Function: addConstraintQuery],
           getConstraintSnippet: [Function: getConstraintSnippet],
           removeConstraintQuery: [Function: removeConstraintQuery],
           quoteTable: [Function: quoteTable],
           quote: [Function: quote],
           quoteIdentifiers: [Function: quoteIdentifiers],
           escape: [Function: escape],
           selectQuery: [Function: selectQuery],
           escapeAttributes: [Function: escapeAttributes],
           generateInclude: [Function: generateInclude],
           generateJoin: [Function: generateJoin],
           generateThroughJoin: [Function: generateThroughJoin],
           _generateSubQueryFilter: [Function: _generateSubQueryFilter],
           _getRequiredClosure: [Function: _getRequiredClosure],
           getQueryOrders: [Function: getQueryOrders],
           selectFromTableFragment: [Function: selectFromTableFragment],
           setAutocommitQuery: [Function: setAutocommitQuery],
           setIsolationLevelQuery: [Function: setIsolationLevelQuery],
           generateTransactionId: [Function: generateTransactionId],
           startTransactionQuery: [Function: startTransactionQuery],
           deferConstraintsQuery: [Function: deferConstraintsQuery],
           setConstraintQuery: [Function: setConstraintQuery],
           setDeferredQuery: [Function: setDeferredQuery],
           setImmediateQuery: [Function: setImmediateQuery],
           commitTransactionQuery: [Function: commitTransactionQuery],
           rollbackTransactionQuery: [Function: rollbackTransactionQuery],
           addLimitAndOffset: [Function: addLimitAndOffset],
           whereQuery: [Function: whereQuery],
           whereItemsQuery: [Function: whereItemsQuery],
           OperatorsAliasMap: false,
           setOperatorsAliases: [Function: setOperatorsAliases],
           whereItemQuery: [Function: whereItemQuery],
           _findField: [Function: _findField],
           _replaceAliases: [Function: _replaceAliases],
           _whereGroupBind: [Function: _whereGroupBind],
           _whereBind: [Function: _whereBind],
           _whereJSON: [Function: _whereJSON],
           _traverseJSON: [Function: _traverseJSON],
           _castKey: [Function: _castKey],
           _getJsonCast: [Function: _getJsonCast],
           _joinKeyValue: [Function: _joinKeyValue],
           _getSafeKey: [Function: _getSafeKey],
           _prefixKey: [Function: _prefixKey],
           _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
           getWhereConditions: [Function: getWhereConditions],
           parseConditionObject: [Function: parseConditionObject],
           isIdentifierQuoted: [Function: isIdentifierQuoted],
           booleanValue: [Function: booleanValue],
           _dialect: [Circular],
           sequelize: [Circular],
           typeValidation: undefined } },
     queryInterface:
      QueryInterface {
        sequelize: [Circular],
        QueryGenerator:
         { dialect: 'mysql',
           OperatorMap:
            { [Symbol(eq)]: '=',
              [Symbol(ne)]: '!=',
              [Symbol(gte)]: '>=',
              [Symbol(gt)]: '>',
              [Symbol(lte)]: '<=',
              [Symbol(lt)]: '<',
              [Symbol(not)]: 'IS NOT',
              [Symbol(is)]: 'IS',
              [Symbol(in)]: 'IN',
              [Symbol(notIn)]: 'NOT IN',
              [Symbol(like)]: 'LIKE',
              [Symbol(notLike)]: 'NOT LIKE',
              [Symbol(iLike)]: 'ILIKE',
              [Symbol(notILike)]: 'NOT ILIKE',
              [Symbol(regexp)]: 'REGEXP',
              [Symbol(notRegexp)]: 'NOT REGEXP',
              [Symbol(iRegexp)]: '~*',
              [Symbol(notIRegexp)]: '!~*',
              [Symbol(between)]: 'BETWEEN',
              [Symbol(notBetween)]: 'NOT BETWEEN',
              [Symbol(overlap)]: '&&',
              [Symbol(contains)]: '@>',
              [Symbol(contained)]: '<@',
              [Symbol(adjacent)]: '-|-',
              [Symbol(strictLeft)]: '<<',
              [Symbol(strictRight)]: '>>',
              [Symbol(noExtendRight)]: '&<',
              [Symbol(noExtendLeft)]: '&>',
              [Symbol(any)]: 'ANY',
              [Symbol(all)]: 'ALL',
              [Symbol(and)]: ' AND ',
              [Symbol(or)]: ' OR ',
              [Symbol(col)]: 'COL',
              [Symbol(placeholder)]: '$$PLACEHOLDER$$',
              [Symbol(raw)]: 'DEPRECATED' },
           createSchema: [Function: createSchema],
           showSchemasQuery: [Function: showSchemasQuery],
           versionQuery: [Function: versionQuery],
           createTableQuery: [Function: createTableQuery],
           showTablesQuery: [Function: showTablesQuery],
           addColumnQuery: [Function: addColumnQuery],
           removeColumnQuery: [Function: removeColumnQuery],
           changeColumnQuery: [Function: changeColumnQuery],
           renameColumnQuery: [Function: renameColumnQuery],
           handleSequelizeMethod: [Function: handleSequelizeMethod],
           _toJSONValue: [Function: _toJSONValue],
           upsertQuery: [Function: upsertQuery],
           deleteQuery: [Function: deleteQuery],
           showIndexesQuery: [Function: showIndexesQuery],
           showConstraintsQuery: [Function: showConstraintsQuery],
           removeIndexQuery: [Function: removeIndexQuery],
           attributeToSQL: [Function: attributeToSQL],
           attributesToSQL: [Function: attributesToSQL],
           quoteIdentifier: [Function: quoteIdentifier],
           _checkValidJsonStatement: [Function: _checkValidJsonStatement],
           jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
           _getForeignKeysQueryFields: [Function: _getForeignKeysQueryFields],
           getForeignKeysQuery: [Function: getForeignKeysQuery],
           getForeignKeyQuery: [Function: getForeignKeyQuery],
           dropForeignKeyQuery: [Function: dropForeignKeyQuery],
           _templateSettings:
            { escape: /<%-([\s\S]+?)%>/g,
              evaluate: /<%([\s\S]+?)%>/g,
              interpolate: /<%=([\s\S]+?)%>/g,
              variable: '',
              imports:
               { _:
                  { [Function: lodash]
                    templateSettings: [Circular],
                    after: [Function: after],
                    ary: [Function: ary],
                    assign: [Function],
                    assignIn: [Function],
                    assignInWith: [Function],
                    assignWith: [Function],
                    at: [Function],
                    before: [Function: before],
                    bind: { [Function] placeholder: [Circular] },
                    bindAll: [Function],
                    bindKey: { [Function] placeholder: [Circular] },
                    castArray: [Function: castArray],
                    chain: [Function: chain],
                    chunk: [Function: chunk],
                    compact: [Function: compact],
                    concat: [Function: concat],
                    cond: [Function: cond],
                    conforms: [Function: conforms],
                    constant: [Function: constant],
                    countBy: [Function],
                    create: [Function: create],
                    curry: { [Function: curry] placeholder: [Circular] },
                    curryRight: { [Function: curryRight] placeholder: [Circular] },
                    debounce: [Function: debounce],
                    defaults: [Function],
                    defaultsDeep: [Function],
                    defer: [Function],
                    delay: [Function],
                    difference: [Function],
                    differenceBy: [Function],
                    differenceWith: [Function],
                    drop: [Function: drop],
                    dropRight: [Function: dropRight],
                    dropRightWhile: [Function: dropRightWhile],
                    dropWhile: [Function: dropWhile],
                    fill: [Function: fill],
                    filter: [Function: filter],
                    flatMap: [Function: flatMap],
                    flatMapDeep: [Function: flatMapDeep],
                    flatMapDepth: [Function: flatMapDepth],
                    flatten: [Function: flatten],
                    flattenDeep: [Function: flattenDeep],
                    flattenDepth: [Function: flattenDepth],
                    flip: [Function: flip],
                    flow: [Function],
                    flowRight: [Function],
                    fromPairs: [Function: fromPairs],
                    functions: [Function: functions],
                    functionsIn: [Function: functionsIn],
                    groupBy: [Function],
                    initial: [Function: initial],
                    intersection: [Function],
                    intersectionBy: [Function],
                    intersectionWith: [Function],
                    invert: [Function],
                    invertBy: [Function],
                    invokeMap: [Function],
                    iteratee: [Function: iteratee],
                    keyBy: [Function],
                    keys: [Function: keys],
                    keysIn: [Function: keysIn],
                    map: [Function: map],
                    mapKeys: [Function: mapKeys],
                    mapValues: [Function: mapValues],
                    matches: [Function: matches],
                    matchesProperty: [Function: matchesProperty],
                    memoize: { [Function: memoize] Cache: [Function: MapCache] },
                    merge: [Function],
                    mergeWith: [Function],
                    method: [Function],
                    methodOf: [Function],
                    mixin: [Function: mixin],
                    negate: [Function: negate],
                    nthArg: [Function: nthArg],
                    omit: [Function],
                    omitBy: [Function: omitBy],
                    once: [Function: once],
                    orderBy: [Function: orderBy],
                    over: [Function],
                    overArgs: [Function],
                    overEvery: [Function],
                    overSome: [Function],
                    partial: { [Function] placeholder: [Circular] },
                    partialRight: { [Function] placeholder: [Circular] },
                    partition: [Function],
                    pick: [Function],
                    pickBy: [Function: pickBy],
                    property: [Function: property],
                    propertyOf: [Function: propertyOf],
                    pull: [Function],
                    pullAll: [Function: pullAll],
                    pullAllBy: [Function: pullAllBy],
                    pullAllWith: [Function: pullAllWith],
                    pullAt: [Function],
                    range: [Function],
                    rangeRight: [Function],
                    rearg: [Function],
                    reject: [Function: reject],
                    remove: [Function: remove],
                    rest: [Function: rest],
                    reverse: [Function: reverse],
                    sampleSize: [Function: sampleSize],
                    set: [Function: set],
                    setWith: [Function: setWith],
                    shuffle: [Function: shuffle],
                    slice: [Function: slice],
                    sortBy: [Function],
                    sortedUniq: [Function: sortedUniq],
                    sortedUniqBy: [Function: sortedUniqBy],
                    split: [Function: split],
                    spread: [Function: spread],
                    tail: [Function: tail],
                    take: [Function: take],
                    takeRight: [Function: takeRight],
                    takeRightWhile: [Function: takeRightWhile],
                    takeWhile: [Function: takeWhile],
                    tap: [Function: tap],
                    throttle: [Function: throttle],
                    thru: [Function: thru],
                    toArray: [Function: toArray],
                    toPairs: [Function],
                    toPairsIn: [Function],
                    toPath: [Function: toPath],
                    toPlainObject: [Function: toPlainObject],
                    transform: [Function: transform],
                    unary: [Function: unary],
                    union: [Function],
                    unionBy: [Function],
                    unionWith: [Function],
                    uniq: [Function: uniq],
                    uniqBy: [Function: uniqBy],
                    uniqWith: [Function: uniqWith],
                    unset: [Function: unset],
                    unzip: [Function: unzip],
                    unzipWith: [Function: unzipWith],
                    update: [Function: update],
                    updateWith: [Function: updateWith],
                    values: [Function: values],
                    valuesIn: [Function: valuesIn],
                    without: [Function],
                    words: [Function: words],
                    wrap: [Function: wrap],
                    xor: [Function],
                    xorBy: [Function],
                    xorWith: [Function],
                    zip: [Function],
                    zipObject: [Function: zipObject],
                    zipObjectDeep: [Function: zipObjectDeep],
                    zipWith: [Function],
                    entries: [Function],
                    entriesIn: [Function],
                    extend: [Function],
                    extendWith: [Function],
                    add: [Function],
                    attempt: [Function],
                    camelCase: [Function],
                    capitalize: [Function: capitalize],
                    ceil: [Function],
                    clamp: [Function: clamp],
                    clone: [Function: clone],
                    cloneDeep: [Function: cloneDeep],
                    cloneDeepWith: [Function: cloneDeepWith],
                    cloneWith: [Function: cloneWith],
                    conformsTo: [Function: conformsTo],
                    deburr: [Function: deburr],
                    defaultTo: [Function: defaultTo],
                    divide: [Function],
                    endsWith: [Function: endsWith],
                    eq: [Function: eq],
                    escape: [Function: escape],
                    escapeRegExp: [Function: escapeRegExp],
                    every: [Function: every],
                    find: [Function],
                    findIndex: [Function: findIndex],
                    findKey: [Function: findKey],
                    findLast: [Function],
                    findLastIndex: [Function: findLastIndex],
                    findLastKey: [Function: findLastKey],
                    floor: [Function],
                    forEach: [Function: forEach],
                    forEachRight: [Function: forEachRight],
                    forIn: [Function: forIn],
                    forInRight: [Function: forInRight],
                    forOwn: [Function: forOwn],
                    forOwnRight: [Function: forOwnRight],
                    get: [Function: get],
                    gt: [Function],
                    gte: [Function],
                    has: [Function: has],
                    hasIn: [Function: hasIn],
                    head: [Function: head],
                    identity: [Function: identity],
                    includes: [Function: includes],
                    indexOf: [Function: indexOf],
                    inRange: [Function: inRange],
                    invoke: [Function],
                    isArguments: [Function: baseIsArguments],
                    isArray: [Function: isArray],
                    isArrayBuffer: [Function],
                    isArrayLike: [Function: isArrayLike],
                    isArrayLikeObject: [Function: isArrayLikeObject],
                    isBoolean: [Function: isBoolean],
                    isBuffer: [Function: isBuffer],
                    isDate: [Function],
                    isElement: [Function: isElement],
                    isEmpty: [Function: isEmpty],
                    isEqual: [Function: isEqual],
                    isEqualWith: [Function: isEqualWith],
                    isError: [Function: isError],
                    isFinite: [Function: isFinite],
                    isFunction: [Function: isFunction],
                    isInteger: [Function: isInteger],
                    isLength: [Function: isLength],
                    isMap: [Function],
                    isMatch: [Function: isMatch],
                    isMatchWith: [Function: isMatchWith],
                    isNaN: [Function: isNaN],
                    isNative: [Function: isNative],
                    isNil: [Function: isNil],
                    isNull: [Function: isNull],
                    isNumber: [Function: isNumber],
                    isObject: [Function: isObject],
                    isObjectLike: [Function: isObjectLike],
                    isPlainObject: [Function: isPlainObject],
                    isRegExp: [Function],
                    isSafeInteger: [Function: isSafeInteger],
                    isSet: [Function],
                    isString: [Function: isString],
                    isSymbol: [Function: isSymbol],
                    isTypedArray: [Function],
                    isUndefined: [Function: isUndefined],
                    isWeakMap: [Function: isWeakMap],
                    isWeakSet: [Function: isWeakSet],
                    join: [Function: join],
                    kebabCase: [Function],
                    last: [Function: last],
                    lastIndexOf: [Function: lastIndexOf],
                    lowerCase: [Function],
                    lowerFirst: [Function],
                    lt: [Function],
                    lte: [Function],
                    max: [Function: max],
                    maxBy: [Function: maxBy],
                    mean: [Function: mean],
                    meanBy: [Function: meanBy],
                    min: [Function: min],
                    minBy: [Function: minBy],
                    stubArray: [Function: stubArray],
                    stubFalse: [Function: stubFalse],
                    stubObject: [Function: stubObject],
                    stubString: [Function: stubString],
                    stubTrue: [Function: stubTrue],
                    multiply: [Function],
                    nth: [Function: nth],
                    noConflict: [Function: noConflict],
                    noop: [Function: noop],
                    now: [Function],
                    pad: [Function: pad],
                    padEnd: [Function: padEnd],
                    padStart: [Function: padStart],
                    parseInt: [Function: parseInt],
                    random: [Function: random],
                    reduce: [Function: reduce],
                    reduceRight: [Function: reduceRight],
                    repeat: [Function: repeat],
                    replace: [Function: replace],
                    result: [Function: result],
                    round: [Function],
                    runInContext: [Function: runInContext],
                    sample: [Function: sample],
                    size: [Function: size],
                    snakeCase: [Function],
                    some: [Function: some],
                    sortedIndex: [Function: sortedIndex],
                    sortedIndexBy: [Function: sortedIndexBy],
                    sortedIndexOf: [Function: sortedIndexOf],
                    sortedLastIndex: [Function: sortedLastIndex],
                    sortedLastIndexBy: [Function: sortedLastIndexBy],
                    sortedLastIndexOf: [Function: sortedLastIndexOf],
                    startCase: [Function],
                    startsWith: [Function: startsWith],
                    subtract: [Function],
                    sum: [Function: sum],
                    sumBy: [Function: sumBy],
                    template: [Function: template],
                    times: [Function: times],
                    toFinite: [Function: toFinite],
                    toInteger: [Function: toInteger],
                    toLength: [Function: toLength],
                    toLower: [Function: toLower],
                    toNumber: [Function: toNumber],
                    toSafeInteger: [Function: toSafeInteger],
                    toString: [Function: toString],
                    toUpper: [Function: toUpper],
                    trim: [Function: trim],
                    trimEnd: [Function: trimEnd],
                    trimStart: [Function: trimStart],
                    truncate: [Function: truncate],
                    unescape: [Function: unescape],
                    uniqueId: [Function: uniqueId],
                    upperCase: [Function],
                    upperFirst: [Function],
                    each: [Function: forEach],
                    eachRight: [Function: forEachRight],
                    first: [Function: head],
                    VERSION: '4.17.11' } } },
           options:
            { dialect: 'mysql',
              dialectModulePath: null,
              host: 'localhost',
              protocol: 'tcp',
              define:
               { underscored: false, freezeTableName: true, timestamps: true },
              query: {},
              sync: {},
              timezone: '+00:00',
              logging: false,
              omitNull: false,
              native: false,
              replication: false,
              ssl: undefined,
              pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
              quoteIdentifiers: true,
              hooks: {},
              retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
              transactionType: 'DEFERRED',
              isolationLevel: null,
              databaseVersion: 0,
              typeValidation: false,
              benchmark: false,
              operatorsAliases: false,
              username: 'root',
              password: 'password',
              database: 'burger_db',
              port: 3306 },
           extractTableDetails: [Function: extractTableDetails],
           addSchema: [Function: addSchema],
           dropSchema: [Function: dropSchema],
           describeTableQuery: [Function: describeTableQuery],
           dropTableQuery: [Function: dropTableQuery],
           renameTableQuery: [Function: renameTableQuery],
           insertQuery: [Function: insertQuery],
           bulkInsertQuery: [Function: bulkInsertQuery],
           updateQuery: [Function: updateQuery],
           arithmeticQuery: [Function: arithmeticQuery],
           nameIndexes: [Function: nameIndexes],
           addIndexQuery: [Function: addIndexQuery],
           addConstraintQuery: [Function: addConstraintQuery],
           getConstraintSnippet: [Function: getConstraintSnippet],
           removeConstraintQuery: [Function: removeConstraintQuery],
           quoteTable: [Function: quoteTable],
           quote: [Function: quote],
           quoteIdentifiers: [Function: quoteIdentifiers],
           escape: [Function: escape],
           selectQuery: [Function: selectQuery],
           escapeAttributes: [Function: escapeAttributes],
           generateInclude: [Function: generateInclude],
           generateJoin: [Function: generateJoin],
           generateThroughJoin: [Function: generateThroughJoin],
           _generateSubQueryFilter: [Function: _generateSubQueryFilter],
           _getRequiredClosure: [Function: _getRequiredClosure],
           getQueryOrders: [Function: getQueryOrders],
           selectFromTableFragment: [Function: selectFromTableFragment],
           setAutocommitQuery: [Function: setAutocommitQuery],
           setIsolationLevelQuery: [Function: setIsolationLevelQuery],
           generateTransactionId: [Function: generateTransactionId],
           startTransactionQuery: [Function: startTransactionQuery],
           deferConstraintsQuery: [Function: deferConstraintsQuery],
           setConstraintQuery: [Function: setConstraintQuery],
           setDeferredQuery: [Function: setDeferredQuery],
           setImmediateQuery: [Function: setImmediateQuery],
           commitTransactionQuery: [Function: commitTransactionQuery],
           rollbackTransactionQuery: [Function: rollbackTransactionQuery],
           addLimitAndOffset: [Function: addLimitAndOffset],
           whereQuery: [Function: whereQuery],
           whereItemsQuery: [Function: whereItemsQuery],
           OperatorsAliasMap: false,
           setOperatorsAliases: [Function: setOperatorsAliases],
           whereItemQuery: [Function: whereItemQuery],
           _findField: [Function: _findField],
           _replaceAliases: [Function: _replaceAliases],
           _whereGroupBind: [Function: _whereGroupBind],
           _whereBind: [Function: _whereBind],
           _whereJSON: [Function: _whereJSON],
           _traverseJSON: [Function: _traverseJSON],
           _castKey: [Function: _castKey],
           _getJsonCast: [Function: _getJsonCast],
           _joinKeyValue: [Function: _joinKeyValue],
           _getSafeKey: [Function: _getSafeKey],
           _prefixKey: [Function: _prefixKey],
           _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
           getWhereConditions: [Function: getWhereConditions],
           parseConditionObject: [Function: parseConditionObject],
           isIdentifierQuoted: [Function: isIdentifierQuoted],
           booleanValue: [Function: booleanValue],
           _dialect:
            MysqlDialect {
              sequelize: [Circular],
              connectionManager:
               ConnectionManager {
                 sequelize: [Circular],
                 config:
                  { database: 'burger_db',
                    username: 'root',
                    password: 'password',
                    host: 'localhost',
                    port: 3306,
                    pool:
                     { max: 5,
                       min: 0,
                       acquire: 30000,
                       idle: 10000,
                       evict: 10000,
                       handleDisconnects: true,
                       validate: [Function: bound _validate],
                       Promise:
                        { [Function: Promise]
                          TypeError: [Function: TypeError],
                          RangeError: [Function: RangeError],
                          CancellationError: [Function: SubError],
                          TimeoutError: [Function: SubError],
                          OperationalError: [Function: OperationalError],
                          RejectionError: [Function: OperationalError],
                          AggregateError: [Function: SubError],
                          _peekContext: [Function],
                          onPossiblyUnhandledRejection: [Function],
                          onUnhandledRejectionHandled: [Function],
                          longStackTraces: [Function],
                          hasLongStackTraces: [Function],
                          config: [Function],
                          getNewLibraryCopy: [Function],
                          is: [Function],
                          fromCallback: [Function],
                          fromNode: [Function],
                          all: [Function],
                          cast: [Function],
                          fulfilled: [Function],
                          resolve: [Function],
                          rejected: [Function],
                          reject: [Function],
                          setScheduler: [Function],
                          pending: [Function],
                          defer: [Function],
                          method: [Function],
                          try: [Function],
                          attempt: [Function],
                          bind: [Function],
                          PromiseInspection: [Function: PromiseInspection],
                          join: [Function],
                          Promise: [Circular],
                          version: '3.5.3',
                          map: [Function],
                          using: [Function],
                          delay: [Function],
                          coroutine: { [Function] addYieldHandler: [Function] },
                          spawn: [Function],
                          promisify: [Function],
                          promisifyAll: [Function],
                          props: [Function],
                          race: [Function],
                          reduce: [Function],
                          settle: [Function],
                          some: [Function],
                          _SomePromiseArray: [Function: SomePromiseArray],
                          filter: [Function],
                          each: [Function],
                          mapSeries: [Function: PromiseMapSeries],
                          any: [Function],
                          default: [Circular] } },
                    protocol: 'tcp',
                    native: false,
                    ssl: undefined,
                    replication: false,
                    dialectModulePath: null,
                    keepDefaultTimezone: undefined,
                    dialectOptions: undefined },
                 dialect: [Circular],
                 versionPromise: null,
                 dialectName: 'mysql',
                 pool:
                  Pool {
                    _events: [Object: null prototype] {},
                    _eventsCount: 0,
                    _maxListeners: undefined,
                    _config:
                     PoolOptions {
                       fifo: true,
                       priorityRange: 1,
                       testOnBorrow: true,
                       testOnReturn: false,
                       autostart: false,
                       acquireTimeoutMillis: 30000,
                       max: 5,
                       min: 0,
                       evictionRunIntervalMillis: 10000,
                       numTestsPerEvictionRun: 3,
                       softIdleTimeoutMillis: -1,
                       idleTimeoutMillis: 10000,
                       Promise:
                        { [Function: Promise]
                          TypeError: [Function: TypeError],
                          RangeError: [Function: RangeError],
                          CancellationError: [Function: SubError],
                          TimeoutError: [Function: SubError],
                          OperationalError: [Function: OperationalError],
                          RejectionError: [Function: OperationalError],
                          AggregateError: [Function: SubError],
                          _peekContext: [Function],
                          onPossiblyUnhandledRejection: [Function],
                          onUnhandledRejectionHandled: [Function],
                          longStackTraces: [Function],
                          hasLongStackTraces: [Function],
                          config: [Function],
                          getNewLibraryCopy: [Function],
                          is: [Function],
                          fromCallback: [Function],
                          fromNode: [Function],
                          all: [Function],
                          cast: [Function],
                          fulfilled: [Function],
                          resolve: [Function],
                          rejected: [Function],
                          reject: [Function],
                          setScheduler: [Function],
                          pending: [Function],
                          defer: [Function],
                          method: [Function],
                          try: [Function],
                          attempt: [Function],
                          bind: [Function],
                          PromiseInspection: [Function: PromiseInspection],
                          join: [Function],
                          Promise: [Circular],
                          version: '3.5.3',
                          map: [Function],
                          using: [Function],
                          delay: [Function],
                          coroutine: { [Function] addYieldHandler: [Function] },
                          spawn: [Function],
                          promisify: [Function],
                          promisifyAll: [Function],
                          props: [Function],
                          race: [Function],
                          reduce: [Function],
                          settle: [Function],
                          some: [Function],
                          _SomePromiseArray: [Function: SomePromiseArray],
                          filter: [Function],
                          each: [Function],
                          mapSeries: [Function: PromiseMapSeries],
                          any: [Function],
                          default: [Circular] } },
                    _Promise:
                     { [Function: Promise]
                       TypeError: [Function: TypeError],
                       RangeError: [Function: RangeError],
                       CancellationError: [Function: SubError],
                       TimeoutError: [Function: SubError],
                       OperationalError: [Function: OperationalError],
                       RejectionError: [Function: OperationalError],
                       AggregateError: [Function: SubError],
                       _peekContext: [Function],
                       onPossiblyUnhandledRejection: [Function],
                       onUnhandledRejectionHandled: [Function],
                       longStackTraces: [Function],
                       hasLongStackTraces: [Function],
                       config: [Function],
                       getNewLibraryCopy: [Function],
                       is: [Function],
                       fromCallback: [Function],
                       fromNode: [Function],
                       all: [Function],
                       cast: [Function],
                       fulfilled: [Function],
                       resolve: [Function],
                       rejected: [Function],
                       reject: [Function],
                       setScheduler: [Function],
                       pending: [Function],
                       defer: [Function],
                       method: [Function],
                       try: [Function],
                       attempt: [Function],
                       bind: [Function],
                       PromiseInspection: [Function: PromiseInspection],
                       join: [Function],
                       Promise: [Circular],
                       version: '3.5.3',
                       map: [Function],
                       using: [Function],
                       delay: [Function],
                       coroutine: { [Function] addYieldHandler: [Function] },
                       spawn: [Function],
                       promisify: [Function],
                       promisifyAll: [Function],
                       props: [Function],
                       race: [Function],
                       reduce: [Function],
                       settle: [Function],
                       some: [Function],
                       _SomePromiseArray: [Function: SomePromiseArray],
                       filter: [Function],
                       each: [Function],
                       mapSeries: [Function: PromiseMapSeries],
                       any: [Function],
                       default: [Circular] },
                    _factory:
                     { create: [Function: create],
                       destroy: [Function: destroy],
                       validate: [Function: bound _validate] },
                    _draining: false,
                    _started: false,
                    _waitingClientsQueue:
                     PriorityQueue {
                       _size: 1,
                       _slots:
                        [ Queue {
                            _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
                    _factoryCreateOperations: Set {},
                    _factoryDestroyOperations: Set {},
                    _availableObjects:
                     Deque {
                       _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
                    _testOnBorrowResources: Set {},
                    _testOnReturnResources: Set {},
                    _validationOperations: Set {},
                    _allObjects: Set {},
                    _resourceLoans: Map {},
                    _evictionIterator:
                     DequeIterator {
                       _list: DoublyLinkedList { head: null, tail: null, length: 0 },
                       _direction: 'next',
                       _startPosition: 'head',
                       _started: false,
                       _cursor: null,
                       _done: false },
                    _evictor: DefaultEvictor {},
                    _scheduledEviction: null },
                 lib:
                  { createConnection: [Function],
                    connect: [Function],
                    Connection: [Function: Connection],
                    createPool: [Function],
                    createPoolCluster: [Function],
                    createQuery: [Function: createQuery],
                    Pool: [Function: Pool],
                    createServer: [Function],
                    PoolConnection:
                     { [Function: PoolConnection] statementKey: [Function: statementKey] },
                    escape: [Function: escape],
                    escapeId: [Function: escapeId],
                    format: [Function: format],
                    raw: [Function: raw],
                    createConnectionPromise: [Getter],
                    createPoolPromise: [Getter],
                    createPoolClusterPromise: [Getter],
                    Types: [Getter],
                    Charsets: [Getter],
                    CharsetToEncoding: [Getter],
                    setMaxParserCache: [Function],
                    clearParserCache: [Function] } },
              QueryGenerator: [Circular] },
           sequelize: [Circular],
           typeValidation: undefined } },
     models:
      { burgers:
         { [Function: burgers]
           sequelize: [Circular],
           options:
            { timestamps: true,
              validate: {},
              freezeTableName: true,
              underscored: false,
              underscoredAll: false,
              paranoid: false,
              rejectOnEmpty: false,
              whereCollection: null,
              schema: null,
              schemaDelimiter: '',
              defaultScope: {},
              scopes: [],
              indexes: [],
              name: { plural: 'burgers', singular: 'burger' },
              omitNull: false,
              sequelize: [Circular],
              hooks: {},
              uniqueKeys: {} },
           associations: {},
           underscored: undefined,
           tableName: 'burgers',
           _schema: null,
           _schemaDelimiter: '',
           rawAttributes:
            { id:
               { type:
                  INTEGER {
                    options: { length: undefined },
                    _length: undefined,
                    _zerofill: undefined,
                    _decimals: undefined,
                    _precision: undefined,
                    _scale: undefined,
                    _unsigned: undefined },
                 allowNull: false,
                 primaryKey: true,
                 autoIncrement: true,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'id',
                 _modelAttribute: true,
                 field: 'id' },
              name:
               { type:
                  STRING {
                    options: { length: undefined, binary: undefined },
                    _binary: undefined,
                    _length: 255 },
                 allowNull: false,
                 validate: { len: [ 1, 140 ] },
                 Model: [Circular],
                 fieldName: 'name',
                 _modelAttribute: true,
                 field: 'name' },
              isDevoured:
               { type: BOOLEAN {},
                 allowNull: false,
                 defaultValue: false,
                 Model: [Circular],
                 fieldName: 'isDevoured',
                 _modelAttribute: true,
                 field: 'isDevoured' },
              createdAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'createdAt',
                 _modelAttribute: true,
                 field: 'createdAt' },
              updatedAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'updatedAt',
                 _modelAttribute: true,
                 field: 'updatedAt' } },
           primaryKeys:
            { id:
               { type:
                  INTEGER {
                    options: { length: undefined },
                    _length: undefined,
                    _zerofill: undefined,
                    _decimals: undefined,
                    _precision: undefined,
                    _scale: undefined,
                    _unsigned: undefined },
                 allowNull: false,
                 primaryKey: true,
                 autoIncrement: true,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'id',
                 _modelAttribute: true,
                 field: 'id' } },
           _timestampAttributes: { createdAt: 'createdAt', updatedAt: 'updatedAt' },
           _readOnlyAttributes: [ 'createdAt', 'updatedAt' ],
           _hasReadOnlyAttributes: 2,
           _isReadOnlyAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _dataTypeChanges:
            { createdAt: [Function: _isChanged],
              updatedAt: [Function: _isChanged] },
           _dataTypeSanitizers:
            { isDevoured: [Function: _sanitize],
              createdAt: [Function: _sanitize],
              updatedAt: [Function: _sanitize] },
           _booleanAttributes: [ 'isDevoured' ],
           _dateAttributes: [ 'createdAt', 'updatedAt' ],
           _hstoreAttributes: [],
           _rangeAttributes: [],
           _jsonAttributes: [],
           _geometryAttributes: [],
           _virtualAttributes: [],
           _defaultValues: { isDevoured: [Function: wrapper] },
           fieldRawAttributesMap:
            { id:
               { type:
                  INTEGER {
                    options: { length: undefined },
                    _length: undefined,
                    _zerofill: undefined,
                    _decimals: undefined,
                    _precision: undefined,
                    _scale: undefined,
                    _unsigned: undefined },
                 allowNull: false,
                 primaryKey: true,
                 autoIncrement: true,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'id',
                 _modelAttribute: true,
                 field: 'id' },
              name:
               { type:
                  STRING {
                    options: { length: undefined, binary: undefined },
                    _binary: undefined,
                    _length: 255 },
                 allowNull: false,
                 validate: { len: [ 1, 140 ] },
                 Model: [Circular],
                 fieldName: 'name',
                 _modelAttribute: true,
                 field: 'name' },
              isDevoured:
               { type: BOOLEAN {},
                 allowNull: false,
                 defaultValue: false,
                 Model: [Circular],
                 fieldName: 'isDevoured',
                 _modelAttribute: true,
                 field: 'isDevoured' },
              createdAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'createdAt',
                 _modelAttribute: true,
                 field: 'createdAt' },
              updatedAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'updatedAt',
                 _modelAttribute: true,
                 field: 'updatedAt' } },
           fieldAttributeMap: {},
           uniqueKeys: {},
           _hasBooleanAttributes: true,
           _isBooleanAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasDateAttributes: true,
           _isDateAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasHstoreAttributes: false,
           _isHstoreAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasRangeAttributes: false,
           _isRangeAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasJsonAttributes: false,
           _isJsonAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasVirtualAttributes: false,
           _isVirtualAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasGeometryAttributes: false,
           _isGeometryAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasDefaultValues: true,
           attributes:
            { id:
               { type:
                  INTEGER {
                    options: { length: undefined },
                    _length: undefined,
                    _zerofill: undefined,
                    _decimals: undefined,
                    _precision: undefined,
                    _scale: undefined,
                    _unsigned: undefined },
                 allowNull: false,
                 primaryKey: true,
                 autoIncrement: true,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'id',
                 _modelAttribute: true,
                 field: 'id' },
              name:
               { type:
                  STRING {
                    options: { length: undefined, binary: undefined },
                    _binary: undefined,
                    _length: 255 },
                 allowNull: false,
                 validate: { len: [ 1, 140 ] },
                 Model: [Circular],
                 fieldName: 'name',
                 _modelAttribute: true,
                 field: 'name' },
              isDevoured:
               { type: BOOLEAN {},
                 allowNull: false,
                 defaultValue: false,
                 Model: [Circular],
                 fieldName: 'isDevoured',
                 _modelAttribute: true,
                 field: 'isDevoured' },
              createdAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'createdAt',
                 _modelAttribute: true,
                 field: 'createdAt' },
              updatedAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'updatedAt',
                 _modelAttribute: true,
                 field: 'updatedAt' } },
           tableAttributes:
            { id:
               { type:
                  INTEGER {
                    options: { length: undefined },
                    _length: undefined,
                    _zerofill: undefined,
                    _decimals: undefined,
                    _precision: undefined,
                    _scale: undefined,
                    _unsigned: undefined },
                 allowNull: false,
                 primaryKey: true,
                 autoIncrement: true,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'id',
                 _modelAttribute: true,
                 field: 'id' },
              name:
               { type:
                  STRING {
                    options: { length: undefined, binary: undefined },
                    _binary: undefined,
                    _length: 255 },
                 allowNull: false,
                 validate: { len: [ 1, 140 ] },
                 Model: [Circular],
                 fieldName: 'name',
                 _modelAttribute: true,
                 field: 'name' },
              isDevoured:
               { type: BOOLEAN {},
                 allowNull: false,
                 defaultValue: false,
                 Model: [Circular],
                 fieldName: 'isDevoured',
                 _modelAttribute: true,
                 field: 'isDevoured' },
              createdAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'createdAt',
                 _modelAttribute: true,
                 field: 'createdAt' },
              updatedAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'updatedAt',
                 _modelAttribute: true,
                 field: 'updatedAt' } },
           primaryKeyAttributes: [ 'id' ],
           primaryKeyAttribute: 'id',
           primaryKeyField: 'id',
           _hasPrimaryKeys: true,
           _isPrimaryKey:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           autoIncrementAttribute: 'id',
           _scope: {},
           _scopeNames: [ 'defaultScope' ] } },
     modelManager:
      ModelManager {
        models:
         [ { [Function: burgers]
             sequelize: [Circular],
             options:
              { timestamps: true,
                validate: {},
                freezeTableName: true,
                underscored: false,
                underscoredAll: false,
                paranoid: false,
                rejectOnEmpty: false,
                whereCollection: null,
                schema: null,
                schemaDelimiter: '',
                defaultScope: {},
                scopes: [],
                indexes: [],
                name: { plural: 'burgers', singular: 'burger' },
                omitNull: false,
                sequelize: [Circular],
                hooks: {},
                uniqueKeys: {} },
             associations: {},
             underscored: undefined,
             tableName: 'burgers',
             _schema: null,
             _schemaDelimiter: '',
             rawAttributes:
              { id:
                 { type:
                    INTEGER {
                      options: { length: undefined },
                      _length: undefined,
                      _zerofill: undefined,
                      _decimals: undefined,
                      _precision: undefined,
                      _scale: undefined,
                      _unsigned: undefined },
                   allowNull: false,
                   primaryKey: true,
                   autoIncrement: true,
                   _autoGenerated: true,
                   Model: [Circular],
                   fieldName: 'id',
                   _modelAttribute: true,
                   field: 'id' },
                name:
                 { type:
                    STRING {
                      options: { length: undefined, binary: undefined },
                      _binary: undefined,
                      _length: 255 },
                   allowNull: false,
                   validate: { len: [ 1, 140 ] },
                   Model: [Circular],
                   fieldName: 'name',
                   _modelAttribute: true,
                   field: 'name' },
                isDevoured:
                 { type: BOOLEAN {},
                   allowNull: false,
                   defaultValue: false,
                   Model: [Circular],
                   fieldName: 'isDevoured',
                   _modelAttribute: true,
                   field: 'isDevoured' },
                createdAt:
                 { type: DATE { options: { length: undefined }, _length: '' },
                   allowNull: false,
                   _autoGenerated: true,
                   Model: [Circular],
                   fieldName: 'createdAt',
                   _modelAttribute: true,
                   field: 'createdAt' },
                updatedAt:
                 { type: DATE { options: { length: undefined }, _length: '' },
                   allowNull: false,
                   _autoGenerated: true,
                   Model: [Circular],
                   fieldName: 'updatedAt',
                   _modelAttribute: true,
                   field: 'updatedAt' } },
             primaryKeys:
              { id:
                 { type:
                    INTEGER {
                      options: { length: undefined },
                      _length: undefined,
                      _zerofill: undefined,
                      _decimals: undefined,
                      _precision: undefined,
                      _scale: undefined,
                      _unsigned: undefined },
                   allowNull: false,
                   primaryKey: true,
                   autoIncrement: true,
                   _autoGenerated: true,
                   Model: [Circular],
                   fieldName: 'id',
                   _modelAttribute: true,
                   field: 'id' } },
             _timestampAttributes: { createdAt: 'createdAt', updatedAt: 'updatedAt' },
             _readOnlyAttributes: [ 'createdAt', 'updatedAt' ],
             _hasReadOnlyAttributes: 2,
             _isReadOnlyAttribute:
              { [Function: memoized]
                cache:
                 MapCache {
                   size: 0,
                   __data__:
                    { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                      map: Map {},
                      string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
             _dataTypeChanges:
              { createdAt: [Function: _isChanged],
                updatedAt: [Function: _isChanged] },
             _dataTypeSanitizers:
              { isDevoured: [Function: _sanitize],
                createdAt: [Function: _sanitize],
                updatedAt: [Function: _sanitize] },
             _booleanAttributes: [ 'isDevoured' ],
             _dateAttributes: [ 'createdAt', 'updatedAt' ],
             _hstoreAttributes: [],
             _rangeAttributes: [],
             _jsonAttributes: [],
             _geometryAttributes: [],
             _virtualAttributes: [],
             _defaultValues: { isDevoured: [Function: wrapper] },
             fieldRawAttributesMap:
              { id:
                 { type:
                    INTEGER {
                      options: { length: undefined },
                      _length: undefined,
                      _zerofill: undefined,
                      _decimals: undefined,
                      _precision: undefined,
                      _scale: undefined,
                      _unsigned: undefined },
                   allowNull: false,
                   primaryKey: true,
                   autoIncrement: true,
                   _autoGenerated: true,
                   Model: [Circular],
                   fieldName: 'id',
                   _modelAttribute: true,
                   field: 'id' },
                name:
                 { type:
                    STRING {
                      options: { length: undefined, binary: undefined },
                      _binary: undefined,
                      _length: 255 },
                   allowNull: false,
                   validate: { len: [ 1, 140 ] },
                   Model: [Circular],
                   fieldName: 'name',
                   _modelAttribute: true,
                   field: 'name' },
                isDevoured:
                 { type: BOOLEAN {},
                   allowNull: false,
                   defaultValue: false,
                   Model: [Circular],
                   fieldName: 'isDevoured',
                   _modelAttribute: true,
                   field: 'isDevoured' },
                createdAt:
                 { type: DATE { options: { length: undefined }, _length: '' },
                   allowNull: false,
                   _autoGenerated: true,
                   Model: [Circular],
                   fieldName: 'createdAt',
                   _modelAttribute: true,
                   field: 'createdAt' },
                updatedAt:
                 { type: DATE { options: { length: undefined }, _length: '' },
                   allowNull: false,
                   _autoGenerated: true,
                   Model: [Circular],
                   fieldName: 'updatedAt',
                   _modelAttribute: true,
                   field: 'updatedAt' } },
             fieldAttributeMap: {},
             uniqueKeys: {},
             _hasBooleanAttributes: true,
             _isBooleanAttribute:
              { [Function: memoized]
                cache:
                 MapCache {
                   size: 0,
                   __data__:
                    { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                      map: Map {},
                      string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
             _hasDateAttributes: true,
             _isDateAttribute:
              { [Function: memoized]
                cache:
                 MapCache {
                   size: 0,
                   __data__:
                    { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                      map: Map {},
                      string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
             _hasHstoreAttributes: false,
             _isHstoreAttribute:
              { [Function: memoized]
                cache:
                 MapCache {
                   size: 0,
                   __data__:
                    { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                      map: Map {},
                      string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
             _hasRangeAttributes: false,
             _isRangeAttribute:
              { [Function: memoized]
                cache:
                 MapCache {
                   size: 0,
                   __data__:
                    { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                      map: Map {},
                      string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
             _hasJsonAttributes: false,
             _isJsonAttribute:
              { [Function: memoized]
                cache:
                 MapCache {
                   size: 0,
                   __data__:
                    { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                      map: Map {},
                      string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
             _hasVirtualAttributes: false,
             _isVirtualAttribute:
              { [Function: memoized]
                cache:
                 MapCache {
                   size: 0,
                   __data__:
                    { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                      map: Map {},
                      string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
             _hasGeometryAttributes: false,
             _isGeometryAttribute:
              { [Function: memoized]
                cache:
                 MapCache {
                   size: 0,
                   __data__:
                    { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                      map: Map {},
                      string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
             _hasDefaultValues: true,
             attributes:
              { id:
                 { type:
                    INTEGER {
                      options: { length: undefined },
                      _length: undefined,
                      _zerofill: undefined,
                      _decimals: undefined,
                      _precision: undefined,
                      _scale: undefined,
                      _unsigned: undefined },
                   allowNull: false,
                   primaryKey: true,
                   autoIncrement: true,
                   _autoGenerated: true,
                   Model: [Circular],
                   fieldName: 'id',
                   _modelAttribute: true,
                   field: 'id' },
                name:
                 { type:
                    STRING {
                      options: { length: undefined, binary: undefined },
                      _binary: undefined,
                      _length: 255 },
                   allowNull: false,
                   validate: { len: [ 1, 140 ] },
                   Model: [Circular],
                   fieldName: 'name',
                   _modelAttribute: true,
                   field: 'name' },
                isDevoured:
                 { type: BOOLEAN {},
                   allowNull: false,
                   defaultValue: false,
                   Model: [Circular],
                   fieldName: 'isDevoured',
                   _modelAttribute: true,
                   field: 'isDevoured' },
                createdAt:
                 { type: DATE { options: { length: undefined }, _length: '' },
                   allowNull: false,
                   _autoGenerated: true,
                   Model: [Circular],
                   fieldName: 'createdAt',
                   _modelAttribute: true,
                   field: 'createdAt' },
                updatedAt:
                 { type: DATE { options: { length: undefined }, _length: '' },
                   allowNull: false,
                   _autoGenerated: true,
                   Model: [Circular],
                   fieldName: 'updatedAt',
                   _modelAttribute: true,
                   field: 'updatedAt' } },
             tableAttributes:
              { id:
                 { type:
                    INTEGER {
                      options: { length: undefined },
                      _length: undefined,
                      _zerofill: undefined,
                      _decimals: undefined,
                      _precision: undefined,
                      _scale: undefined,
                      _unsigned: undefined },
                   allowNull: false,
                   primaryKey: true,
                   autoIncrement: true,
                   _autoGenerated: true,
                   Model: [Circular],
                   fieldName: 'id',
                   _modelAttribute: true,
                   field: 'id' },
                name:
                 { type:
                    STRING {
                      options: { length: undefined, binary: undefined },
                      _binary: undefined,
                      _length: 255 },
                   allowNull: false,
                   validate: { len: [ 1, 140 ] },
                   Model: [Circular],
                   fieldName: 'name',
                   _modelAttribute: true,
                   field: 'name' },
                isDevoured:
                 { type: BOOLEAN {},
                   allowNull: false,
                   defaultValue: false,
                   Model: [Circular],
                   fieldName: 'isDevoured',
                   _modelAttribute: true,
                   field: 'isDevoured' },
                createdAt:
                 { type: DATE { options: { length: undefined }, _length: '' },
                   allowNull: false,
                   _autoGenerated: true,
                   Model: [Circular],
                   fieldName: 'createdAt',
                   _modelAttribute: true,
                   field: 'createdAt' },
                updatedAt:
                 { type: DATE { options: { length: undefined }, _length: '' },
                   allowNull: false,
                   _autoGenerated: true,
                   Model: [Circular],
                   fieldName: 'updatedAt',
                   _modelAttribute: true,
                   field: 'updatedAt' } },
             primaryKeyAttributes: [ 'id' ],
             primaryKeyAttribute: 'id',
             primaryKeyField: 'id',
             _hasPrimaryKeys: true,
             _isPrimaryKey:
              { [Function: memoized]
                cache:
                 MapCache {
                   size: 0,
                   __data__:
                    { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                      map: Map {},
                      string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
             autoIncrementAttribute: 'id',
             _scope: {},
             _scopeNames: [ 'defaultScope' ] } ],
        sequelize: [Circular] },
     connectionManager:
      ConnectionManager {
        sequelize: [Circular],
        config:
         { database: 'burger_db',
           username: 'root',
           password: 'password',
           host: 'localhost',
           port: 3306,
           pool:
            { max: 5,
              min: 0,
              acquire: 30000,
              idle: 10000,
              evict: 10000,
              handleDisconnects: true,
              validate: [Function: bound _validate],
              Promise:
               { [Function: Promise]
                 TypeError: [Function: TypeError],
                 RangeError: [Function: RangeError],
                 CancellationError: [Function: SubError],
                 TimeoutError: [Function: SubError],
                 OperationalError: [Function: OperationalError],
                 RejectionError: [Function: OperationalError],
                 AggregateError: [Function: SubError],
                 _peekContext: [Function],
                 onPossiblyUnhandledRejection: [Function],
                 onUnhandledRejectionHandled: [Function],
                 longStackTraces: [Function],
                 hasLongStackTraces: [Function],
                 config: [Function],
                 getNewLibraryCopy: [Function],
                 is: [Function],
                 fromCallback: [Function],
                 fromNode: [Function],
                 all: [Function],
                 cast: [Function],
                 fulfilled: [Function],
                 resolve: [Function],
                 rejected: [Function],
                 reject: [Function],
                 setScheduler: [Function],
                 pending: [Function],
                 defer: [Function],
                 method: [Function],
                 try: [Function],
                 attempt: [Function],
                 bind: [Function],
                 PromiseInspection: [Function: PromiseInspection],
                 join: [Function],
                 Promise: [Circular],
                 version: '3.5.3',
                 map: [Function],
                 using: [Function],
                 delay: [Function],
                 coroutine: { [Function] addYieldHandler: [Function] },
                 spawn: [Function],
                 promisify: [Function],
                 promisifyAll: [Function],
                 props: [Function],
                 race: [Function],
                 reduce: [Function],
                 settle: [Function],
                 some: [Function],
                 _SomePromiseArray: [Function: SomePromiseArray],
                 filter: [Function],
                 each: [Function],
                 mapSeries: [Function: PromiseMapSeries],
                 any: [Function],
                 default: [Circular] } },
           protocol: 'tcp',
           native: false,
           ssl: undefined,
           replication: false,
           dialectModulePath: null,
           keepDefaultTimezone: undefined,
           dialectOptions: undefined },
        dialect:
         MysqlDialect {
           sequelize: [Circular],
           connectionManager: [Circular],
           QueryGenerator:
            { dialect: 'mysql',
              OperatorMap:
               { [Symbol(eq)]: '=',
                 [Symbol(ne)]: '!=',
                 [Symbol(gte)]: '>=',
                 [Symbol(gt)]: '>',
                 [Symbol(lte)]: '<=',
                 [Symbol(lt)]: '<',
                 [Symbol(not)]: 'IS NOT',
                 [Symbol(is)]: 'IS',
                 [Symbol(in)]: 'IN',
                 [Symbol(notIn)]: 'NOT IN',
                 [Symbol(like)]: 'LIKE',
                 [Symbol(notLike)]: 'NOT LIKE',
                 [Symbol(iLike)]: 'ILIKE',
                 [Symbol(notILike)]: 'NOT ILIKE',
                 [Symbol(regexp)]: 'REGEXP',
                 [Symbol(notRegexp)]: 'NOT REGEXP',
                 [Symbol(iRegexp)]: '~*',
                 [Symbol(notIRegexp)]: '!~*',
                 [Symbol(between)]: 'BETWEEN',
                 [Symbol(notBetween)]: 'NOT BETWEEN',
                 [Symbol(overlap)]: '&&',
                 [Symbol(contains)]: '@>',
                 [Symbol(contained)]: '<@',
                 [Symbol(adjacent)]: '-|-',
                 [Symbol(strictLeft)]: '<<',
                 [Symbol(strictRight)]: '>>',
                 [Symbol(noExtendRight)]: '&<',
                 [Symbol(noExtendLeft)]: '&>',
                 [Symbol(any)]: 'ANY',
                 [Symbol(all)]: 'ALL',
                 [Symbol(and)]: ' AND ',
                 [Symbol(or)]: ' OR ',
                 [Symbol(col)]: 'COL',
                 [Symbol(placeholder)]: '$$PLACEHOLDER$$',
                 [Symbol(raw)]: 'DEPRECATED' },
              createSchema: [Function: createSchema],
              showSchemasQuery: [Function: showSchemasQuery],
              versionQuery: [Function: versionQuery],
              createTableQuery: [Function: createTableQuery],
              showTablesQuery: [Function: showTablesQuery],
              addColumnQuery: [Function: addColumnQuery],
              removeColumnQuery: [Function: removeColumnQuery],
              changeColumnQuery: [Function: changeColumnQuery],
              renameColumnQuery: [Function: renameColumnQuery],
              handleSequelizeMethod: [Function: handleSequelizeMethod],
              _toJSONValue: [Function: _toJSONValue],
              upsertQuery: [Function: upsertQuery],
              deleteQuery: [Function: deleteQuery],
              showIndexesQuery: [Function: showIndexesQuery],
              showConstraintsQuery: [Function: showConstraintsQuery],
              removeIndexQuery: [Function: removeIndexQuery],
              attributeToSQL: [Function: attributeToSQL],
              attributesToSQL: [Function: attributesToSQL],
              quoteIdentifier: [Function: quoteIdentifier],
              _checkValidJsonStatement: [Function: _checkValidJsonStatement],
              jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
              _getForeignKeysQueryFields: [Function: _getForeignKeysQueryFields],
              getForeignKeysQuery: [Function: getForeignKeysQuery],
              getForeignKeyQuery: [Function: getForeignKeyQuery],
              dropForeignKeyQuery: [Function: dropForeignKeyQuery],
              _templateSettings:
               { escape: /<%-([\s\S]+?)%>/g,
                 evaluate: /<%([\s\S]+?)%>/g,
                 interpolate: /<%=([\s\S]+?)%>/g,
                 variable: '',
                 imports:
                  { _:
                     { [Function: lodash]
                       templateSettings: [Circular],
                       after: [Function: after],
                       ary: [Function: ary],
                       assign: [Function],
                       assignIn: [Function],
                       assignInWith: [Function],
                       assignWith: [Function],
                       at: [Function],
                       before: [Function: before],
                       bind: { [Function] placeholder: [Circular] },
                       bindAll: [Function],
                       bindKey: { [Function] placeholder: [Circular] },
                       castArray: [Function: castArray],
                       chain: [Function: chain],
                       chunk: [Function: chunk],
                       compact: [Function: compact],
                       concat: [Function: concat],
                       cond: [Function: cond],
                       conforms: [Function: conforms],
                       constant: [Function: constant],
                       countBy: [Function],
                       create: [Function: create],
                       curry: { [Function: curry] placeholder: [Circular] },
                       curryRight: { [Function: curryRight] placeholder: [Circular] },
                       debounce: [Function: debounce],
                       defaults: [Function],
                       defaultsDeep: [Function],
                       defer: [Function],
                       delay: [Function],
                       difference: [Function],
                       differenceBy: [Function],
                       differenceWith: [Function],
                       drop: [Function: drop],
                       dropRight: [Function: dropRight],
                       dropRightWhile: [Function: dropRightWhile],
                       dropWhile: [Function: dropWhile],
                       fill: [Function: fill],
                       filter: [Function: filter],
                       flatMap: [Function: flatMap],
                       flatMapDeep: [Function: flatMapDeep],
                       flatMapDepth: [Function: flatMapDepth],
                       flatten: [Function: flatten],
                       flattenDeep: [Function: flattenDeep],
                       flattenDepth: [Function: flattenDepth],
                       flip: [Function: flip],
                       flow: [Function],
                       flowRight: [Function],
                       fromPairs: [Function: fromPairs],
                       functions: [Function: functions],
                       functionsIn: [Function: functionsIn],
                       groupBy: [Function],
                       initial: [Function: initial],
                       intersection: [Function],
                       intersectionBy: [Function],
                       intersectionWith: [Function],
                       invert: [Function],
                       invertBy: [Function],
                       invokeMap: [Function],
                       iteratee: [Function: iteratee],
                       keyBy: [Function],
                       keys: [Function: keys],
                       keysIn: [Function: keysIn],
                       map: [Function: map],
                       mapKeys: [Function: mapKeys],
                       mapValues: [Function: mapValues],
                       matches: [Function: matches],
                       matchesProperty: [Function: matchesProperty],
                       memoize: { [Function: memoize] Cache: [Function: MapCache] },
                       merge: [Function],
                       mergeWith: [Function],
                       method: [Function],
                       methodOf: [Function],
                       mixin: [Function: mixin],
                       negate: [Function: negate],
                       nthArg: [Function: nthArg],
                       omit: [Function],
                       omitBy: [Function: omitBy],
                       once: [Function: once],
                       orderBy: [Function: orderBy],
                       over: [Function],
                       overArgs: [Function],
                       overEvery: [Function],
                       overSome: [Function],
                       partial: { [Function] placeholder: [Circular] },
                       partialRight: { [Function] placeholder: [Circular] },
                       partition: [Function],
                       pick: [Function],
                       pickBy: [Function: pickBy],
                       property: [Function: property],
                       propertyOf: [Function: propertyOf],
                       pull: [Function],
                       pullAll: [Function: pullAll],
                       pullAllBy: [Function: pullAllBy],
                       pullAllWith: [Function: pullAllWith],
                       pullAt: [Function],
                       range: [Function],
                       rangeRight: [Function],
                       rearg: [Function],
                       reject: [Function: reject],
                       remove: [Function: remove],
                       rest: [Function: rest],
                       reverse: [Function: reverse],
                       sampleSize: [Function: sampleSize],
                       set: [Function: set],
                       setWith: [Function: setWith],
                       shuffle: [Function: shuffle],
                       slice: [Function: slice],
                       sortBy: [Function],
                       sortedUniq: [Function: sortedUniq],
                       sortedUniqBy: [Function: sortedUniqBy],
                       split: [Function: split],
                       spread: [Function: spread],
                       tail: [Function: tail],
                       take: [Function: take],
                       takeRight: [Function: takeRight],
                       takeRightWhile: [Function: takeRightWhile],
                       takeWhile: [Function: takeWhile],
                       tap: [Function: tap],
                       throttle: [Function: throttle],
                       thru: [Function: thru],
                       toArray: [Function: toArray],
                       toPairs: [Function],
                       toPairsIn: [Function],
                       toPath: [Function: toPath],
                       toPlainObject: [Function: toPlainObject],
                       transform: [Function: transform],
                       unary: [Function: unary],
                       union: [Function],
                       unionBy: [Function],
                       unionWith: [Function],
                       uniq: [Function: uniq],
                       uniqBy: [Function: uniqBy],
                       uniqWith: [Function: uniqWith],
                       unset: [Function: unset],
                       unzip: [Function: unzip],
                       unzipWith: [Function: unzipWith],
                       update: [Function: update],
                       updateWith: [Function: updateWith],
                       values: [Function: values],
                       valuesIn: [Function: valuesIn],
                       without: [Function],
                       words: [Function: words],
                       wrap: [Function: wrap],
                       xor: [Function],
                       xorBy: [Function],
                       xorWith: [Function],
                       zip: [Function],
                       zipObject: [Function: zipObject],
                       zipObjectDeep: [Function: zipObjectDeep],
                       zipWith: [Function],
                       entries: [Function],
                       entriesIn: [Function],
                       extend: [Function],
                       extendWith: [Function],
                       add: [Function],
                       attempt: [Function],
                       camelCase: [Function],
                       capitalize: [Function: capitalize],
                       ceil: [Function],
                       clamp: [Function: clamp],
                       clone: [Function: clone],
                       cloneDeep: [Function: cloneDeep],
                       cloneDeepWith: [Function: cloneDeepWith],
                       cloneWith: [Function: cloneWith],
                       conformsTo: [Function: conformsTo],
                       deburr: [Function: deburr],
                       defaultTo: [Function: defaultTo],
                       divide: [Function],
                       endsWith: [Function: endsWith],
                       eq: [Function: eq],
                       escape: [Function: escape],
                       escapeRegExp: [Function: escapeRegExp],
                       every: [Function: every],
                       find: [Function],
                       findIndex: [Function: findIndex],
                       findKey: [Function: findKey],
                       findLast: [Function],
                       findLastIndex: [Function: findLastIndex],
                       findLastKey: [Function: findLastKey],
                       floor: [Function],
                       forEach: [Function: forEach],
                       forEachRight: [Function: forEachRight],
                       forIn: [Function: forIn],
                       forInRight: [Function: forInRight],
                       forOwn: [Function: forOwn],
                       forOwnRight: [Function: forOwnRight],
                       get: [Function: get],
                       gt: [Function],
                       gte: [Function],
                       has: [Function: has],
                       hasIn: [Function: hasIn],
                       head: [Function: head],
                       identity: [Function: identity],
                       includes: [Function: includes],
                       indexOf: [Function: indexOf],
                       inRange: [Function: inRange],
                       invoke: [Function],
                       isArguments: [Function: baseIsArguments],
                       isArray: [Function: isArray],
                       isArrayBuffer: [Function],
                       isArrayLike: [Function: isArrayLike],
                       isArrayLikeObject: [Function: isArrayLikeObject],
                       isBoolean: [Function: isBoolean],
                       isBuffer: [Function: isBuffer],
                       isDate: [Function],
                       isElement: [Function: isElement],
                       isEmpty: [Function: isEmpty],
                       isEqual: [Function: isEqual],
                       isEqualWith: [Function: isEqualWith],
                       isError: [Function: isError],
                       isFinite: [Function: isFinite],
                       isFunction: [Function: isFunction],
                       isInteger: [Function: isInteger],
                       isLength: [Function: isLength],
                       isMap: [Function],
                       isMatch: [Function: isMatch],
                       isMatchWith: [Function: isMatchWith],
                       isNaN: [Function: isNaN],
                       isNative: [Function: isNative],
                       isNil: [Function: isNil],
                       isNull: [Function: isNull],
                       isNumber: [Function: isNumber],
                       isObject: [Function: isObject],
                       isObjectLike: [Function: isObjectLike],
                       isPlainObject: [Function: isPlainObject],
                       isRegExp: [Function],
                       isSafeInteger: [Function: isSafeInteger],
                       isSet: [Function],
                       isString: [Function: isString],
                       isSymbol: [Function: isSymbol],
                       isTypedArray: [Function],
                       isUndefined: [Function: isUndefined],
                       isWeakMap: [Function: isWeakMap],
                       isWeakSet: [Function: isWeakSet],
                       join: [Function: join],
                       kebabCase: [Function],
                       last: [Function: last],
                       lastIndexOf: [Function: lastIndexOf],
                       lowerCase: [Function],
                       lowerFirst: [Function],
                       lt: [Function],
                       lte: [Function],
                       max: [Function: max],
                       maxBy: [Function: maxBy],
                       mean: [Function: mean],
                       meanBy: [Function: meanBy],
                       min: [Function: min],
                       minBy: [Function: minBy],
                       stubArray: [Function: stubArray],
                       stubFalse: [Function: stubFalse],
                       stubObject: [Function: stubObject],
                       stubString: [Function: stubString],
                       stubTrue: [Function: stubTrue],
                       multiply: [Function],
                       nth: [Function: nth],
                       noConflict: [Function: noConflict],
                       noop: [Function: noop],
                       now: [Function],
                       pad: [Function: pad],
                       padEnd: [Function: padEnd],
                       padStart: [Function: padStart],
                       parseInt: [Function: parseInt],
                       random: [Function: random],
                       reduce: [Function: reduce],
                       reduceRight: [Function: reduceRight],
                       repeat: [Function: repeat],
                       replace: [Function: replace],
                       result: [Function: result],
                       round: [Function],
                       runInContext: [Function: runInContext],
                       sample: [Function: sample],
                       size: [Function: size],
                       snakeCase: [Function],
                       some: [Function: some],
                       sortedIndex: [Function: sortedIndex],
                       sortedIndexBy: [Function: sortedIndexBy],
                       sortedIndexOf: [Function: sortedIndexOf],
                       sortedLastIndex: [Function: sortedLastIndex],
                       sortedLastIndexBy: [Function: sortedLastIndexBy],
                       sortedLastIndexOf: [Function: sortedLastIndexOf],
                       startCase: [Function],
                       startsWith: [Function: startsWith],
                       subtract: [Function],
                       sum: [Function: sum],
                       sumBy: [Function: sumBy],
                       template: [Function: template],
                       times: [Function: times],
                       toFinite: [Function: toFinite],
                       toInteger: [Function: toInteger],
                       toLength: [Function: toLength],
                       toLower: [Function: toLower],
                       toNumber: [Function: toNumber],
                       toSafeInteger: [Function: toSafeInteger],
                       toString: [Function: toString],
                       toUpper: [Function: toUpper],
                       trim: [Function: trim],
                       trimEnd: [Function: trimEnd],
                       trimStart: [Function: trimStart],
                       truncate: [Function: truncate],
                       unescape: [Function: unescape],
                       uniqueId: [Function: uniqueId],
                       upperCase: [Function],
                       upperFirst: [Function],
                       each: [Function: forEach],
                       eachRight: [Function: forEachRight],
                       first: [Function: head],
                       VERSION: '4.17.11' } } },
              options:
               { dialect: 'mysql',
                 dialectModulePath: null,
                 host: 'localhost',
                 protocol: 'tcp',
                 define:
                  { underscored: false, freezeTableName: true, timestamps: true },
                 query: {},
                 sync: {},
                 timezone: '+00:00',
                 logging: false,
                 omitNull: false,
                 native: false,
                 replication: false,
                 ssl: undefined,
                 pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
                 quoteIdentifiers: true,
                 hooks: {},
                 retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
                 transactionType: 'DEFERRED',
                 isolationLevel: null,
                 databaseVersion: 0,
                 typeValidation: false,
                 benchmark: false,
                 operatorsAliases: false,
                 username: 'root',
                 password: 'password',
                 database: 'burger_db',
                 port: 3306 },
              extractTableDetails: [Function: extractTableDetails],
              addSchema: [Function: addSchema],
              dropSchema: [Function: dropSchema],
              describeTableQuery: [Function: describeTableQuery],
              dropTableQuery: [Function: dropTableQuery],
              renameTableQuery: [Function: renameTableQuery],
              insertQuery: [Function: insertQuery],
              bulkInsertQuery: [Function: bulkInsertQuery],
              updateQuery: [Function: updateQuery],
              arithmeticQuery: [Function: arithmeticQuery],
              nameIndexes: [Function: nameIndexes],
              addIndexQuery: [Function: addIndexQuery],
              addConstraintQuery: [Function: addConstraintQuery],
              getConstraintSnippet: [Function: getConstraintSnippet],
              removeConstraintQuery: [Function: removeConstraintQuery],
              quoteTable: [Function: quoteTable],
              quote: [Function: quote],
              quoteIdentifiers: [Function: quoteIdentifiers],
              escape: [Function: escape],
              selectQuery: [Function: selectQuery],
              escapeAttributes: [Function: escapeAttributes],
              generateInclude: [Function: generateInclude],
              generateJoin: [Function: generateJoin],
              generateThroughJoin: [Function: generateThroughJoin],
              _generateSubQueryFilter: [Function: _generateSubQueryFilter],
              _getRequiredClosure: [Function: _getRequiredClosure],
              getQueryOrders: [Function: getQueryOrders],
              selectFromTableFragment: [Function: selectFromTableFragment],
              setAutocommitQuery: [Function: setAutocommitQuery],
              setIsolationLevelQuery: [Function: setIsolationLevelQuery],
              generateTransactionId: [Function: generateTransactionId],
              startTransactionQuery: [Function: startTransactionQuery],
              deferConstraintsQuery: [Function: deferConstraintsQuery],
              setConstraintQuery: [Function: setConstraintQuery],
              setDeferredQuery: [Function: setDeferredQuery],
              setImmediateQuery: [Function: setImmediateQuery],
              commitTransactionQuery: [Function: commitTransactionQuery],
              rollbackTransactionQuery: [Function: rollbackTransactionQuery],
              addLimitAndOffset: [Function: addLimitAndOffset],
              whereQuery: [Function: whereQuery],
              whereItemsQuery: [Function: whereItemsQuery],
              OperatorsAliasMap: false,
              setOperatorsAliases: [Function: setOperatorsAliases],
              whereItemQuery: [Function: whereItemQuery],
              _findField: [Function: _findField],
              _replaceAliases: [Function: _replaceAliases],
              _whereGroupBind: [Function: _whereGroupBind],
              _whereBind: [Function: _whereBind],
              _whereJSON: [Function: _whereJSON],
              _traverseJSON: [Function: _traverseJSON],
              _castKey: [Function: _castKey],
              _getJsonCast: [Function: _getJsonCast],
              _joinKeyValue: [Function: _joinKeyValue],
              _getSafeKey: [Function: _getSafeKey],
              _prefixKey: [Function: _prefixKey],
              _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
              getWhereConditions: [Function: getWhereConditions],
              parseConditionObject: [Function: parseConditionObject],
              isIdentifierQuoted: [Function: isIdentifierQuoted],
              booleanValue: [Function: booleanValue],
              _dialect: [Circular],
              sequelize: [Circular],
              typeValidation: undefined } },
        versionPromise: null,
        dialectName: 'mysql',
        pool:
         Pool {
           _events: [Object: null prototype] {},
           _eventsCount: 0,
           _maxListeners: undefined,
           _config:
            PoolOptions {
              fifo: true,
              priorityRange: 1,
              testOnBorrow: true,
              testOnReturn: false,
              autostart: false,
              acquireTimeoutMillis: 30000,
              max: 5,
              min: 0,
              evictionRunIntervalMillis: 10000,
              numTestsPerEvictionRun: 3,
              softIdleTimeoutMillis: -1,
              idleTimeoutMillis: 10000,
              Promise:
               { [Function: Promise]
                 TypeError: [Function: TypeError],
                 RangeError: [Function: RangeError],
                 CancellationError: [Function: SubError],
                 TimeoutError: [Function: SubError],
                 OperationalError: [Function: OperationalError],
                 RejectionError: [Function: OperationalError],
                 AggregateError: [Function: SubError],
                 _peekContext: [Function],
                 onPossiblyUnhandledRejection: [Function],
                 onUnhandledRejectionHandled: [Function],
                 longStackTraces: [Function],
                 hasLongStackTraces: [Function],
                 config: [Function],
                 getNewLibraryCopy: [Function],
                 is: [Function],
                 fromCallback: [Function],
                 fromNode: [Function],
                 all: [Function],
                 cast: [Function],
                 fulfilled: [Function],
                 resolve: [Function],
                 rejected: [Function],
                 reject: [Function],
                 setScheduler: [Function],
                 pending: [Function],
                 defer: [Function],
                 method: [Function],
                 try: [Function],
                 attempt: [Function],
                 bind: [Function],
                 PromiseInspection: [Function: PromiseInspection],
                 join: [Function],
                 Promise: [Circular],
                 version: '3.5.3',
                 map: [Function],
                 using: [Function],
                 delay: [Function],
                 coroutine: { [Function] addYieldHandler: [Function] },
                 spawn: [Function],
                 promisify: [Function],
                 promisifyAll: [Function],
                 props: [Function],
                 race: [Function],
                 reduce: [Function],
                 settle: [Function],
                 some: [Function],
                 _SomePromiseArray: [Function: SomePromiseArray],
                 filter: [Function],
                 each: [Function],
                 mapSeries: [Function: PromiseMapSeries],
                 any: [Function],
                 default: [Circular] } },
           _Promise:
            { [Function: Promise]
              TypeError: [Function: TypeError],
              RangeError: [Function: RangeError],
              CancellationError: [Function: SubError],
              TimeoutError: [Function: SubError],
              OperationalError: [Function: OperationalError],
              RejectionError: [Function: OperationalError],
              AggregateError: [Function: SubError],
              _peekContext: [Function],
              onPossiblyUnhandledRejection: [Function],
              onUnhandledRejectionHandled: [Function],
              longStackTraces: [Function],
              hasLongStackTraces: [Function],
              config: [Function],
              getNewLibraryCopy: [Function],
              is: [Function],
              fromCallback: [Function],
              fromNode: [Function],
              all: [Function],
              cast: [Function],
              fulfilled: [Function],
              resolve: [Function],
              rejected: [Function],
              reject: [Function],
              setScheduler: [Function],
              pending: [Function],
              defer: [Function],
              method: [Function],
              try: [Function],
              attempt: [Function],
              bind: [Function],
              PromiseInspection: [Function: PromiseInspection],
              join: [Function],
              Promise: [Circular],
              version: '3.5.3',
              map: [Function],
              using: [Function],
              delay: [Function],
              coroutine: { [Function] addYieldHandler: [Function] },
              spawn: [Function],
              promisify: [Function],
              promisifyAll: [Function],
              props: [Function],
              race: [Function],
              reduce: [Function],
              settle: [Function],
              some: [Function],
              _SomePromiseArray: [Function: SomePromiseArray],
              filter: [Function],
              each: [Function],
              mapSeries: [Function: PromiseMapSeries],
              any: [Function],
              default: [Circular] },
           _factory:
            { create: [Function: create],
              destroy: [Function: destroy],
              validate: [Function: bound _validate] },
           _draining: false,
           _started: false,
           _waitingClientsQueue:
            PriorityQueue {
              _size: 1,
              _slots:
               [ Queue {
                   _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
           _factoryCreateOperations: Set {},
           _factoryDestroyOperations: Set {},
           _availableObjects:
            Deque {
              _list: DoublyLinkedList { head: null, tail: null, length: 0 } },
           _testOnBorrowResources: Set {},
           _testOnReturnResources: Set {},
           _validationOperations: Set {},
           _allObjects: Set {},
           _resourceLoans: Map {},
           _evictionIterator:
            DequeIterator {
              _list: DoublyLinkedList { head: null, tail: null, length: 0 },
              _direction: 'next',
              _startPosition: 'head',
              _started: false,
              _cursor: null,
              _done: false },
           _evictor: DefaultEvictor {},
           _scheduledEviction: null },
        lib:
         { createConnection: [Function],
           connect: [Function],
           Connection: [Function: Connection],
           createPool: [Function],
           createPoolCluster: [Function],
           createQuery: [Function: createQuery],
           Pool: [Function: Pool],
           createServer: [Function],
           PoolConnection:
            { [Function: PoolConnection] statementKey: [Function: statementKey] },
           escape: [Function: escape],
           escapeId: [Function: escapeId],
           format: [Function: format],
           raw: [Function: raw],
           createConnectionPromise: [Getter],
           createPoolPromise: [Getter],
           createPoolClusterPromise: [Getter],
           Types: [Getter],
           Charsets: [Getter],
           CharsetToEncoding: [Getter],
           setMaxParserCache: [Function],
           clearParserCache: [Function] } },
     importCache:
      { '/Users/paullinck/GitHub/GTPE/BurgerLogSequel/models/burger.js':
         { [Function: burgers]
           sequelize: [Circular],
           options:
            { timestamps: true,
              validate: {},
              freezeTableName: true,
              underscored: false,
              underscoredAll: false,
              paranoid: false,
              rejectOnEmpty: false,
              whereCollection: null,
              schema: null,
              schemaDelimiter: '',
              defaultScope: {},
              scopes: [],
              indexes: [],
              name: { plural: 'burgers', singular: 'burger' },
              omitNull: false,
              sequelize: [Circular],
              hooks: {},
              uniqueKeys: {} },
           associations: {},
           underscored: undefined,
           tableName: 'burgers',
           _schema: null,
           _schemaDelimiter: '',
           rawAttributes:
            { id:
               { type:
                  INTEGER {
                    options: { length: undefined },
                    _length: undefined,
                    _zerofill: undefined,
                    _decimals: undefined,
                    _precision: undefined,
                    _scale: undefined,
                    _unsigned: undefined },
                 allowNull: false,
                 primaryKey: true,
                 autoIncrement: true,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'id',
                 _modelAttribute: true,
                 field: 'id' },
              name:
               { type:
                  STRING {
                    options: { length: undefined, binary: undefined },
                    _binary: undefined,
                    _length: 255 },
                 allowNull: false,
                 validate: { len: [ 1, 140 ] },
                 Model: [Circular],
                 fieldName: 'name',
                 _modelAttribute: true,
                 field: 'name' },
              isDevoured:
               { type: BOOLEAN {},
                 allowNull: false,
                 defaultValue: false,
                 Model: [Circular],
                 fieldName: 'isDevoured',
                 _modelAttribute: true,
                 field: 'isDevoured' },
              createdAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'createdAt',
                 _modelAttribute: true,
                 field: 'createdAt' },
              updatedAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'updatedAt',
                 _modelAttribute: true,
                 field: 'updatedAt' } },
           primaryKeys:
            { id:
               { type:
                  INTEGER {
                    options: { length: undefined },
                    _length: undefined,
                    _zerofill: undefined,
                    _decimals: undefined,
                    _precision: undefined,
                    _scale: undefined,
                    _unsigned: undefined },
                 allowNull: false,
                 primaryKey: true,
                 autoIncrement: true,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'id',
                 _modelAttribute: true,
                 field: 'id' } },
           _timestampAttributes: { createdAt: 'createdAt', updatedAt: 'updatedAt' },
           _readOnlyAttributes: [ 'createdAt', 'updatedAt' ],
           _hasReadOnlyAttributes: 2,
           _isReadOnlyAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _dataTypeChanges:
            { createdAt: [Function: _isChanged],
              updatedAt: [Function: _isChanged] },
           _dataTypeSanitizers:
            { isDevoured: [Function: _sanitize],
              createdAt: [Function: _sanitize],
              updatedAt: [Function: _sanitize] },
           _booleanAttributes: [ 'isDevoured' ],
           _dateAttributes: [ 'createdAt', 'updatedAt' ],
           _hstoreAttributes: [],
           _rangeAttributes: [],
           _jsonAttributes: [],
           _geometryAttributes: [],
           _virtualAttributes: [],
           _defaultValues: { isDevoured: [Function: wrapper] },
           fieldRawAttributesMap:
            { id:
               { type:
                  INTEGER {
                    options: { length: undefined },
                    _length: undefined,
                    _zerofill: undefined,
                    _decimals: undefined,
                    _precision: undefined,
                    _scale: undefined,
                    _unsigned: undefined },
                 allowNull: false,
                 primaryKey: true,
                 autoIncrement: true,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'id',
                 _modelAttribute: true,
                 field: 'id' },
              name:
               { type:
                  STRING {
                    options: { length: undefined, binary: undefined },
                    _binary: undefined,
                    _length: 255 },
                 allowNull: false,
                 validate: { len: [ 1, 140 ] },
                 Model: [Circular],
                 fieldName: 'name',
                 _modelAttribute: true,
                 field: 'name' },
              isDevoured:
               { type: BOOLEAN {},
                 allowNull: false,
                 defaultValue: false,
                 Model: [Circular],
                 fieldName: 'isDevoured',
                 _modelAttribute: true,
                 field: 'isDevoured' },
              createdAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'createdAt',
                 _modelAttribute: true,
                 field: 'createdAt' },
              updatedAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'updatedAt',
                 _modelAttribute: true,
                 field: 'updatedAt' } },
           fieldAttributeMap: {},
           uniqueKeys: {},
           _hasBooleanAttributes: true,
           _isBooleanAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasDateAttributes: true,
           _isDateAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasHstoreAttributes: false,
           _isHstoreAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasRangeAttributes: false,
           _isRangeAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasJsonAttributes: false,
           _isJsonAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasVirtualAttributes: false,
           _isVirtualAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasGeometryAttributes: false,
           _isGeometryAttribute:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           _hasDefaultValues: true,
           attributes:
            { id:
               { type:
                  INTEGER {
                    options: { length: undefined },
                    _length: undefined,
                    _zerofill: undefined,
                    _decimals: undefined,
                    _precision: undefined,
                    _scale: undefined,
                    _unsigned: undefined },
                 allowNull: false,
                 primaryKey: true,
                 autoIncrement: true,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'id',
                 _modelAttribute: true,
                 field: 'id' },
              name:
               { type:
                  STRING {
                    options: { length: undefined, binary: undefined },
                    _binary: undefined,
                    _length: 255 },
                 allowNull: false,
                 validate: { len: [ 1, 140 ] },
                 Model: [Circular],
                 fieldName: 'name',
                 _modelAttribute: true,
                 field: 'name' },
              isDevoured:
               { type: BOOLEAN {},
                 allowNull: false,
                 defaultValue: false,
                 Model: [Circular],
                 fieldName: 'isDevoured',
                 _modelAttribute: true,
                 field: 'isDevoured' },
              createdAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'createdAt',
                 _modelAttribute: true,
                 field: 'createdAt' },
              updatedAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'updatedAt',
                 _modelAttribute: true,
                 field: 'updatedAt' } },
           tableAttributes:
            { id:
               { type:
                  INTEGER {
                    options: { length: undefined },
                    _length: undefined,
                    _zerofill: undefined,
                    _decimals: undefined,
                    _precision: undefined,
                    _scale: undefined,
                    _unsigned: undefined },
                 allowNull: false,
                 primaryKey: true,
                 autoIncrement: true,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'id',
                 _modelAttribute: true,
                 field: 'id' },
              name:
               { type:
                  STRING {
                    options: { length: undefined, binary: undefined },
                    _binary: undefined,
                    _length: 255 },
                 allowNull: false,
                 validate: { len: [ 1, 140 ] },
                 Model: [Circular],
                 fieldName: 'name',
                 _modelAttribute: true,
                 field: 'name' },
              isDevoured:
               { type: BOOLEAN {},
                 allowNull: false,
                 defaultValue: false,
                 Model: [Circular],
                 fieldName: 'isDevoured',
                 _modelAttribute: true,
                 field: 'isDevoured' },
              createdAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'createdAt',
                 _modelAttribute: true,
                 field: 'createdAt' },
              updatedAt:
               { type: DATE { options: { length: undefined }, _length: '' },
                 allowNull: false,
                 _autoGenerated: true,
                 Model: [Circular],
                 fieldName: 'updatedAt',
                 _modelAttribute: true,
                 field: 'updatedAt' } },
           primaryKeyAttributes: [ 'id' ],
           primaryKeyAttribute: 'id',
           primaryKeyField: 'id',
           _hasPrimaryKeys: true,
           _isPrimaryKey:
            { [Function: memoized]
              cache:
               MapCache {
                 size: 0,
                 __data__:
                  { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                    map: Map {},
                    string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
           autoIncrementAttribute: 'id',
           _scope: {},
           _scopeNames: [ 'defaultScope' ] } },
     test:
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize:
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function],
     version: '4.42.1',
     options: { hooks: {} },
     Utils:
      { Promise:
         { [Function: Promise]
           TypeError: [Function: TypeError],
           RangeError: [Function: RangeError],
           CancellationError: [Function: SubError],
           TimeoutError: [Function: SubError],
           OperationalError: [Function: OperationalError],
           RejectionError: [Function: OperationalError],
           AggregateError: [Function: SubError],
           _peekContext: [Function],
           onPossiblyUnhandledRejection: [Function],
           onUnhandledRejectionHandled: [Function],
           longStackTraces: [Function],
           hasLongStackTraces: [Function],
           config: [Function],
           getNewLibraryCopy: [Function],
           is: [Function],
           fromCallback: [Function],
           fromNode: [Function],
           all: [Function],
           cast: [Function],
           fulfilled: [Function],
           resolve: [Function],
           rejected: [Function],
           reject: [Function],
           setScheduler: [Function],
           pending: [Function],
           defer: [Function],
           method: [Function],
           try: [Function],
           attempt: [Function],
           bind: [Function],
           PromiseInspection: [Function: PromiseInspection],
           join: [Function],
           Promise: [Circular],
           version: '3.5.3',
           map: [Function],
           using: [Function],
           delay: [Function],
           coroutine: { [Function] addYieldHandler: [Function] },
           spawn: [Function],
           promisify: [Function],
           promisifyAll: [Function],
           props: [Function],
           race: [Function],
           reduce: [Function],
           settle: [Function],
           some: [Function],
           _SomePromiseArray: [Function: SomePromiseArray],
           filter: [Function],
           each: [Function],
           mapSeries: [Function: PromiseMapSeries],
           any: [Function],
           default: [Circular] },
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: { [Function: check] check: [Circular], default: [Circular] },
        mapIsolationLevelStringToTedious: [Function],
        getOperators: [Function: getOperators],
        getComplexKeys: [Function: getComplexKeys],
        getComplexSize: [Function: getComplexSize],
        isWhereEmpty: [Function: isWhereEmpty],
        generateEnumName: [Function: generateEnumName],
        camelizeObjectKeys: [Function: camelizeObjectKeys],
        defaults: [Function: defaults] },
     Promise:
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.5.3',
        map: [Function],
        using: [Function],
        delay: [Function],
        coroutine: { [Function] addYieldHandler: [Function] },
        spawn: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        filter: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        any: [Function],
        default: [Circular] },
     QueryTypes:
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     TableHints:
      { NOLOCK: 'NOLOCK',
        READUNCOMMITTED: 'READUNCOMMITTED',
        UPDLOCK: 'UPDLOCK',
        REPEATABLEREAD: 'REPEATABLEREAD',
        SERIALIZABLE: 'SERIALIZABLE',
        READCOMMITTED: 'READCOMMITTED',
        TABLOCK: 'TABLOCK',
        TABLOCKX: 'TABLOCKX',
        PAGLOCK: 'PAGLOCK',
        ROWLOCK: 'ROWLOCK',
        NOWAIT: 'NOWAIT',
        READPAST: 'READPAST',
        XLOCK: 'XLOCK',
        SNAPSHOT: 'SNAPSHOT',
        NOEXPAND: 'NOEXPAND' },
     Op:
      { eq: Symbol(eq),
        ne: Symbol(ne),
        gte: Symbol(gte),
        gt: Symbol(gt),
        lte: Symbol(lte),
        lt: Symbol(lt),
        not: Symbol(not),
        is: Symbol(is),
        in: Symbol(in),
        notIn: Symbol(notIn),
        like: Symbol(like),
        notLike: Symbol(notLike),
        iLike: Symbol(iLike),
        notILike: Symbol(notILike),
        regexp: Symbol(regexp),
        notRegexp: Symbol(notRegexp),
        iRegexp: Symbol(iRegexp),
        notIRegexp: Symbol(notIRegexp),
        between: Symbol(between),
        notBetween: Symbol(notBetween),
        overlap: Symbol(overlap),
        contains: Symbol(contains),
        contained: Symbol(contained),
        adjacent: Symbol(adjacent),
        strictLeft: Symbol(strictLeft),
        strictRight: Symbol(strictRight),
        noExtendRight: Symbol(noExtendRight),
        noExtendLeft: Symbol(noExtendLeft),
        and: Symbol(and),
        or: Symbol(or),
        any: Symbol(any),
        all: Symbol(all),
        values: Symbol(values),
        col: Symbol(col),
        placeholder: Symbol(placeholder),
        join: Symbol(join),
        raw: Symbol(raw),
        Aliases:
         { '$eq': Symbol(eq),
           '$ne': Symbol(ne),
           '$gte': Symbol(gte),
           '$gt': Symbol(gt),
           '$lte': Symbol(lte),
           '$lt': Symbol(lt),
           '$not': Symbol(not),
           '$in': Symbol(in),
           '$notIn': Symbol(notIn),
           '$is': Symbol(is),
           '$like': Symbol(like),
           '$notLike': Symbol(notLike),
           '$iLike': Symbol(iLike),
           '$notILike': Symbol(notILike),
           '$regexp': Symbol(regexp),
           '$notRegexp': Symbol(notRegexp),
           '$iRegexp': Symbol(iRegexp),
           '$notIRegexp': Symbol(notIRegexp),
           '$between': Symbol(between),
           '$notBetween': Symbol(notBetween),
           '$overlap': Symbol(overlap),
           '$contains': Symbol(contains),
           '$contained': Symbol(contained),
           '$adjacent': Symbol(adjacent),
           '$strictLeft': Symbol(strictLeft),
           '$strictRight': Symbol(strictRight),
           '$noExtendRight': Symbol(noExtendRight),
           '$noExtendLeft': Symbol(noExtendLeft),
           '$and': Symbol(and),
           '$or': Symbol(or),
           '$any': Symbol(any),
           '$all': Symbol(all),
           '$values': Symbol(values),
           '$col': Symbol(col),
           '$raw': Symbol(raw) },
        LegacyAliases:
         { ne: Symbol(ne),
           not: Symbol(not),
           in: Symbol(in),
           notIn: Symbol(notIn),
           gte: Symbol(gte),
           gt: Symbol(gt),
           lte: Symbol(lte),
           lt: Symbol(lt),
           like: Symbol(like),
           ilike: Symbol(iLike),
           '$ilike': Symbol(iLike),
           nlike: Symbol(notLike),
           '$notlike': Symbol(notLike),
           notilike: Symbol(notILike),
           '..': Symbol(between),
           between: Symbol(between),
           '!..': Symbol(notBetween),
           notbetween: Symbol(notBetween),
           nbetween: Symbol(notBetween),
           overlap: Symbol(overlap),
           '&&': Symbol(overlap),
           '@>': Symbol(contains),
           '<@': Symbol(contained),
           '$eq': Symbol(eq),
           '$ne': Symbol(ne),
           '$gte': Symbol(gte),
           '$gt': Symbol(gt),
           '$lte': Symbol(lte),
           '$lt': Symbol(lt),
           '$not': Symbol(not),
           '$in': Symbol(in),
           '$notIn': Symbol(notIn),
           '$is': Symbol(is),
           '$like': Symbol(like),
           '$notLike': Symbol(notLike),
           '$iLike': Symbol(iLike),
           '$notILike': Symbol(notILike),
           '$regexp': Symbol(regexp),
           '$notRegexp': Symbol(notRegexp),
           '$iRegexp': Symbol(iRegexp),
           '$notIRegexp': Symbol(notIRegexp),
           '$between': Symbol(between),
           '$notBetween': Symbol(notBetween),
           '$overlap': Symbol(overlap),
           '$contains': Symbol(contains),
           '$contained': Symbol(contained),
           '$adjacent': Symbol(adjacent),
           '$strictLeft': Symbol(strictLeft),
           '$strictRight': Symbol(strictRight),
           '$noExtendRight': Symbol(noExtendRight),
           '$noExtendLeft': Symbol(noExtendLeft),
           '$and': Symbol(and),
           '$or': Symbol(or),
           '$any': Symbol(any),
           '$all': Symbol(all),
           '$values': Symbol(values),
           '$col': Symbol(col),
           '$raw': Symbol(raw) } },
     Validator:
      { version: '10.11.0',
        toDate: { [Function: toDate] default: [Circular] },
        toFloat: { [Function: toFloat] default: [Circular] },
        toInt: { [Function: toInt] default: [Circular] },
        toBoolean: { [Function: toBoolean] default: [Circular] },
        equals: { [Function: equals] default: [Circular] },
        contains: [Function: contains],
        matches: { [Function: matches] default: [Circular] },
        isEmail: { [Function: isEmail] default: [Circular] },
        isURL: { [Function: isURL] default: [Circular] },
        isMACAddress: { [Function: isMACAddress] default: [Circular] },
        isIP: { [Function: isIP] default: [Circular] },
        isIPRange: { [Function: isIPRange] default: [Circular] },
        isFQDN: { [Function: isFQDN] default: [Circular] },
        isBoolean: { [Function: isBoolean] default: [Circular] },
        isAlpha: [Function: isAlpha],
        isAlphaLocales:
         [ 'en-US',
           'bg-BG',
           'cs-CZ',
           'da-DK',
           'de-DE',
           'el-GR',
           'es-ES',
           'fr-FR',
           'it-IT',
           'nb-NO',
           'nl-NL',
           'nn-NO',
           'hu-HU',
           'pl-PL',
           'pt-PT',
           'ru-RU',
           'sl-SI',
           'sk-SK',
           'sr-RS@latin',
           'sr-RS',
           'sv-SE',
           'tr-TR',
           'uk-UA',
           'ku-IQ',
           'ar',
           'en-AU',
           'en-GB',
           'en-HK',
           'en-IN',
           'en-NZ',
           'en-ZA',
           'en-ZM',
           'ar-AE',
           'ar-BH',
           'ar-DZ',
           'ar-EG',
           'ar-IQ',
           'ar-JO',
           'ar-KW',
           'ar-LB',
           'ar-LY',
           'ar-MA',
           'ar-QM',
           'ar-QA',
           'ar-SA',
           'ar-SD',
           'ar-SY',
           'ar-TN',
           'ar-YE',
           'pt-BR',
           'pl-Pl' ],
        isAlphanumeric: [Function: isAlphanumeric],
        isAlphanumericLocales:
         [ 'en-US',
           'bg-BG',
           'cs-CZ',
           'da-DK',
           'de-DE',
           'el-GR',
           'es-ES',
           'fr-FR',
           'it-IT',
           'hu-HU',
           'nb-NO',
           'nl-NL',
           'nn-NO',
           'pl-PL',
           'pt-PT',
           'ru-RU',
           'sl-SI',
           'sk-SK',
           'sr-RS@latin',
           'sr-RS',
           'sv-SE',
           'tr-TR',
           'uk-UA',
           'ku-IQ',
           'ar',
           'en-AU',
           'en-GB',
           'en-HK',
           'en-IN',
           'en-NZ',
           'en-ZA',
           'en-ZM',
           'ar-AE',
           'ar-BH',
           'ar-DZ',
           'ar-EG',
           'ar-IQ',
           'ar-JO',
           'ar-KW',
           'ar-LB',
           'ar-LY',
           'ar-MA',
           'ar-QM',
           'ar-QA',
           'ar-SA',
           'ar-SD',
           'ar-SY',
           'ar-TN',
           'ar-YE',
           'pt-BR',
           'pl-Pl' ],
        isNumeric: { [Function: isNumeric] default: [Circular] },
        isPort: { [Function: isPort] default: [Circular] },
        isLowercase: { [Function: isLowercase] default: [Circular] },
        isUppercase: { [Function: isUppercase] default: [Circular] },
        isAscii: { [Function: isAscii] default: [Circular] },
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: { [Function: isVariableWidth] default: [Circular] },
        isMultibyte: { [Function: isMultibyte] default: [Circular] },
        isSurrogatePair: { [Function: isSurrogatePair] default: [Circular] },
        isInt: { [Function: isInt] default: [Circular] },
        isFloat: [Function: isFloat],
        isFloatLocales:
         [ 'en-US',
           'ar',
           'en-AU',
           'en-GB',
           'en-HK',
           'en-IN',
           'en-NZ',
           'en-ZA',
           'en-ZM',
           'ar-AE',
           'ar-BH',
           'ar-DZ',
           'ar-EG',
           'ar-IQ',
           'ar-JO',
           'ar-KW',
           'ar-LB',
           'ar-LY',
           'ar-MA',
           'ar-QM',
           'ar-QA',
           'ar-SA',
           'ar-SD',
           'ar-SY',
           'ar-TN',
           'ar-YE',
           'bg-BG',
           'cs-CZ',
           'da-DK',
           'de-DE',
           'el-GR',
           'es-ES',
           'fr-FR',
           'it-IT',
           'ku-IQ',
           'hu-HU',
           'nb-NO',
           'nn-NO',
           'nl-NL',
           'pl-PL',
           'pt-PT',
           'ru-RU',
           'sl-SI',
           'sr-RS@latin',
           'sr-RS',
           'sv-SE',
           'tr-TR',
           'uk-UA',
           'pt-BR',
           'pl-Pl' ],
        isDecimal: [Function: isDecimal],
        isHexadecimal: { [Function: isHexadecimal] default: [Circular] },
        isDivisibleBy: { [Function: isDivisibleBy] default: [Circular] },
        isHexColor: { [Function: isHexColor] default: [Circular] },
        isISRC: { [Function: isISRC] default: [Circular] },
        isMD5: { [Function: isMD5] default: [Circular] },
        isHash: { [Function: isHash] default: [Circular] },
        isJWT: { [Function: isJWT] default: [Circular] },
        isJSON: { [Function: isJSON] default: [Circular] },
        isEmpty: { [Function: isEmpty] default: [Circular] },
        isLength: { [Function: isLength] default: [Circular] },
        isByteLength: { [Function: isByteLength] default: [Circular] },
        isUUID: { [Function: isUUID] default: [Circular] },
        isMongoId: { [Function: isMongoId] default: [Circular] },
        isAfter: { [Function: isAfter] default: [Circular] },
        isBefore: { [Function: isBefore] default: [Circular] },
        isIn: { [Function: isIn] default: [Circular] },
        isCreditCard: { [Function: isCreditCard] default: [Circular] },
        isIdentityCard: { [Function: isIdentityCard] default: [Circular] },
        isISIN: { [Function: isISIN] default: [Circular] },
        isISBN: { [Function: isISBN] default: [Circular] },
        isISSN: { [Function: isISSN] default: [Circular] },
        isMobilePhone: [Function: isMobilePhone],
        isMobilePhoneLocales:
         [ 'ar-AE',
           'ar-DZ',
           'ar-EG',
           'ar-IQ',
           'ar-JO',
           'ar-KW',
           'ar-SA',
           'ar-SY',
           'ar-TN',
           'be-BY',
           'bg-BG',
           'bn-BD',
           'cs-CZ',
           'da-DK',
           'de-DE',
           'el-GR',
           'en-AU',
           'en-GB',
           'en-GH',
           'en-HK',
           'en-IE',
           'en-IN',
           'en-KE',
           'en-MU',
           'en-NG',
           'en-NZ',
           'en-PK',
           'en-RW',
           'en-SG',
           'en-TZ',
           'en-UG',
           'en-US',
           'en-ZA',
           'en-ZM',
           'es-ES',
           'es-MX',
           'es-UY',
           'et-EE',
           'fa-IR',
           'fi-FI',
           'fo-FO',
           'fr-FR',
           'he-IL',
           'hu-HU',
           'id-ID',
           'it-IT',
           'ja-JP',
           'kk-KZ',
           'kl-GL',
           'ko-KR',
           'lt-LT',
           'ms-MY',
           'nb-NO',
           'nl-BE',
           'nn-NO',
           'pl-PL',
           'pt-BR',
           'pt-PT',
           'ro-RO',
           'ru-RU',
           'sl-SI',
           'sk-SK',
           'sr-RS',
           'sv-SE',
           'th-TH',
           'tr-TR',
           'uk-UA',
           'vi-VN',
           'zh-CN',
           'zh-TW',
           'en-CA',
           'fr-BE',
           'zh-HK' ],
        isPostalCode: [Function: _default],
        isPostalCodeLocales:
         [ 'AD',
           'AT',
           'AU',
           'BE',
           'BG',
           'CA',
           'CH',
           'CZ',
           'DE',
           'DK',
           'DZ',
           'EE',
           'ES',
           'FI',
           'FR',
           'GB',
           'GR',
           'HR',
           'HU',
           'IL',
           'IN',
           'IS',
           'IT',
           'JP',
           'KE',
           'LI',
           'LT',
           'LU',
           'LV',
           'MX',
           'NL',
           'NO',
           'PL',
           'PT',
           'RO',
           'RU',
           'SA',
           'SE',
           'SI',
           'SK',
           'TN',
           'TW',
           'UA',
           'US',
           'ZA',
           'ZM' ],
        isCurrency: { [Function: isCurrency] default: [Circular] },
        isISO8601: { [Function: isISO8601] default: [Circular] },
        isRFC3339: { [Function: isRFC3339] default: [Circular] },
        isISO31661Alpha2: { [Function: isISO31661Alpha2] default: [Circular] },
        isISO31661Alpha3: { [Function: isISO31661Alpha3] default: [Circular] },
        isBase64: { [Function: isBase64] default: [Circular] },
        isDataURI: { [Function: isDataURI] default: [Circular] },
        isMagnetURI: { [Function: isMagnetURI] default: [Circular] },
        isMimeType: { [Function: isMimeType] default: [Circular] },
        isLatLong: { [Function: _default] default: [Circular] },
        ltrim: { [Function: ltrim] default: [Circular] },
        rtrim: { [Function: rtrim] default: [Circular] },
        trim: { [Function: trim] default: [Circular] },
        escape: { [Function: escape] default: [Circular] },
        unescape: { [Function: unescape] default: [Circular] },
        stripLow: { [Function: stripLow] default: [Circular] },
        whitelist: { [Function: whitelist] default: [Circular] },
        blacklist: { [Function: blacklist] default: [Circular] },
        isWhitelisted: { [Function: isWhitelisted] default: [Circular] },
        normalizeEmail: { [Function: normalizeEmail] default: [Circular] },
        toString: { [Function: toString] default: [Circular] },
        default: [Circular],
        isImmutable: [Function],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: { [Function: isEmpty] default: [Circular] },
        isDate: [Function] },
     Model:
      { [Function: Model]
        findByPrimary: [Function],
        findById: [Function],
        find: [Function],
        findAndCount: [Function],
        findOrInitialize: [Function],
        insertOrUpdate: [Function],
        all: [Function],
        getAssociations: [Function: getAssociations],
        getAssociationForAlias: [Function: getAssociationForAlias],
        verifyAssociationAlias: [Function: verifyAssociationAlias],
        Mixin:
         { hasMany: [Function: hasMany],
           belongsToMany: [Function: belongsToMany],
           getAssociations: [Function: getAssociations],
           getAssociationForAlias: [Function: getAssociationForAlias],
           verifyAssociationAlias: [Function: verifyAssociationAlias],
           hasOne: [Function],
           belongsTo: [Function],
           Mixin: [Circular],
           default: [Circular] },
        default:
         { hasMany: [Function: hasMany],
           belongsToMany: [Function: belongsToMany],
           getAssociations: [Function: getAssociations],
           getAssociationForAlias: [Function: getAssociationForAlias],
           verifyAssociationAlias: [Function: verifyAssociationAlias],
           hasOne: [Function],
           belongsTo: [Function],
           Mixin: [Circular],
           default: [Circular] },
        _setupHooks: [Function: _setupHooks],
        runHooks: [Function: runHooks],
        hook: [Function: hook],
        addHook: [Function: addHook],
        removeHook: [Function: removeHook],
        hasHook: [Function: hasHook],
        hasHooks: [Function: hasHook],
        beforeValidate: [Function],
        afterValidate: [Function],
        validationFailed: [Function],
        beforeCreate: [Function],
        afterCreate: [Function],
        beforeDestroy: [Function],
        afterDestroy: [Function],
        beforeRestore: [Function],
        afterRestore: [Function],
        beforeUpdate: [Function],
        afterUpdate: [Function],
        beforeSave: [Function],
        afterSave: [Function],
        beforeUpsert: [Function],
        afterUpsert: [Function],
        beforeBulkCreate: [Function],
        afterBulkCreate: [Function],
        beforeBulkDestroy: [Function],
        afterBulkDestroy: [Function],
        beforeBulkRestore: [Function],
        afterBulkRestore: [Function],
        beforeBulkUpdate: [Function],
        afterBulkUpdate: [Function],
        beforeFind: [Function],
        beforeFindAfterExpandIncludeAll: [Function],
        beforeFindAfterOptions: [Function],
        afterFind: [Function],
        beforeCount: [Function],
        beforeDefine: [Function],
        afterDefine: [Function],
        beforeInit: [Function],
        afterInit: [Function],
        beforeConnect: [Function],
        afterConnect: [Function],
        beforeSync: [Function],
        afterSync: [Function],
        beforeBulkSync: [Function],
        afterBulkSync: [Function],
        beforeDelete: [Function],
        afterDelete: [Function],
        beforeBulkDelete: [Function],
        afterBulkDelete: [Function],
        beforeConnection: [Function] },
     DataTypes:
      { ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
        STRING:
         { [Function: STRING]
           warn: [Function: warn],
           key: 'STRING',
           types:
            { postgres: { oids: [ 1043 ], array_oids: [ 1015 ] },
              mysql: [ 'VAR_STRING' ],
              sqlite: [ 'VARCHAR', 'VARCHAR BINARY' ],
              mssql: [ 231, 173 ] } },
        CHAR:
         { [Function: CHAR]
           warn: [Function: warn],
           key: 'CHAR',
           types:
            { postgres: { oids: [ 18, 1042 ], array_oids: [ 1002, 1014 ] },
              mysql: [ 'STRING' ],
              sqlite: [ 'CHAR', 'CHAR BINARY' ],
              mssql: [ 175 ] } },
        TEXT:
         { [Function: TEXT]
           warn: [Function: warn],
           key: 'TEXT',
           types:
            { postgres: { oids: [ 25 ], array_oids: [ 1009 ] },
              mysql: [ 'BLOB' ],
              sqlite: [ 'TEXT' ],
              mssql: false } },
        NUMBER:
         { [Function: NUMBER] warn: [Function: warn], key: 'NUMBER', types: {} },
        TINYINT:
         { [Function: TINYINT]
           warn: [Function: warn],
           key: 'TINYINT',
           types: { mysql: [ 'TINY' ], sqlite: [ 'TINYINT' ], mssql: [ 30 ] } },
        SMALLINT:
         { [Function: SMALLINT]
           warn: [Function: warn],
           key: 'SMALLINT',
           types:
            { postgres: { oids: [ 21 ], array_oids: [ 1005 ] },
              mysql: [ 'SHORT' ],
              sqlite: [ 'SMALLINT' ],
              mssql: [ 34 ] } },
        MEDIUMINT:
         { [Function: MEDIUMINT]
           warn: [Function: warn],
           key: 'MEDIUMINT',
           types:
            { mysql: [ 'INT24' ], sqlite: [ 'MEDIUMINT' ], mssql: false } },
        INTEGER:
         { [Function: INTEGER]
           warn: [Function: warn],
           key: 'INTEGER',
           types:
            { postgres: { oids: [ 23 ], array_oids: [ 1007 ] },
              mysql: [ 'LONG' ],
              sqlite: [ 'INTEGER' ],
              mssql: [ 38 ] } },
        BIGINT:
         { [Function: BIGINT]
           warn: [Function: warn],
           key: 'BIGINT',
           types:
            { postgres: { oids: [ 20 ], array_oids: [ 1016 ] },
              mysql: [ 'LONGLONG' ],
              sqlite: [ 'BIGINT' ],
              mssql: false } },
        FLOAT:
         { [Function: FLOAT]
           warn: [Function: warn],
           key: 'FLOAT',
           types: { mysql: [ 'FLOAT' ], sqlite: [ 'FLOAT' ], mssql: [ 109 ] } },
        TIME:
         { [Function: TIME]
           warn: [Function: warn],
           key: 'TIME',
           types:
            { postgres: { oids: [ 1083 ], array_oids: [ 1183 ] },
              mysql: [ 'TIME' ],
              sqlite: [ 'TIME' ],
              mssql: [ 41 ] } },
        DATE:
         { [Function: DATE]
           warn: [Function: warn],
           key: 'DATE',
           types:
            { postgres: { oids: [ 1184 ], array_oids: [ 1185 ] },
              mysql: [ 'DATETIME' ],
              sqlite: [ 'DATETIME' ],
              mssql: [ 43 ] } },
        DATEONLY:
         { [Function: DATEONLY]
           key: 'DATEONLY',
           types:
            { postgres: { oids: [ 1082 ], array_oids: [ 1182 ] },
              mysql: [ 'DATE' ],
              sqlite: [ 'DATE' ],
              mssql: [ 40 ] } },
        BOOLEAN:
         { [Function: BOOLEAN]
           warn: [Function: warn],
           key: 'BOOLEAN',
           parse: [Function: _sanitize],
           types:
            { postgres: { oids: [ 16 ], array_oids: [ 1000 ] },
              mysql: [ 'TINY' ],
              sqlite: [ 'TINYINT' ],
              mssql: [ 104 ] } },
        NOW:
         { [Function: NOW] warn: [Function: warn], key: 'NOW', types: {} },
        BLOB:
         { [Function: BLOB]
           warn: [Function: warn],
           key: 'BLOB',
           types:
            { postgres: { oids: [ 17 ], array_oids: [ 1001 ] },
              mysql: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
              sqlite: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
              mssql: [ 165 ] } },
        DECIMAL:
         { [Function: DECIMAL]
           warn: [Function: warn],
           key: 'DECIMAL',
           types:
            { postgres: { oids: [ 1700 ], array_oids: [ 1231 ] },
              mysql: [ 'NEWDECIMAL' ],
              sqlite: [ 'DECIMAL' ],
              mssql: [ 106 ] } },
        NUMERIC:
         { [Function: DECIMAL]
           warn: [Function: warn],
           key: 'DECIMAL',
           types:
            { postgres: { oids: [ 1700 ], array_oids: [ 1231 ] },
              mysql: [ 'NEWDECIMAL' ],
              sqlite: [ 'DECIMAL' ],
              mssql: [ 106 ] } },
        UUID:
         { [Function: UUID]
           warn: [Function: warn],
           key: 'UUID',
           types:
            { postgres: { oids: [ 2950 ], array_oids: [ 2951 ] },
              mysql: false,
              sqlite: [ 'UUID' ],
              mssql: false } },
        UUIDV1:
         { [Function: UUIDV1] warn: [Function: warn], key: 'UUIDV1', types: {} },
        UUIDV4:
         { [Function: UUIDV4] warn: [Function: warn], key: 'UUIDV4', types: {} },
        HSTORE:
         { [Function: HSTORE]
           warn: [Function: warn],
           key: 'HSTORE',
           types: { postgres: { oids: [], array_oids: [] } } },
        JSON:
         { [Function: JSONTYPE]
           warn: [Function: warn],
           key: 'JSON',
           types:
            { postgres: { oids: [ 114 ], array_oids: [ 199 ] },
              mysql: [ 'JSON' ],
              sqlite: [ 'JSON', 'JSONB' ] } },
        JSONB:
         { [Function: JSONB]
           warn: [Function: warn],
           key: 'JSONB',
           types: { postgres: { oids: [ 3802 ], array_oids: [ 3807 ] } } },
        VIRTUAL:
         { [Function: VIRTUAL] warn: [Function: warn], key: 'VIRTUAL', types: {} },
        ARRAY:
         { [Function: ARRAY]
           warn: [Function: warn],
           key: 'ARRAY',
           is: [Function: is],
           types: {} },
        NONE:
         { [Function: VIRTUAL] warn: [Function: warn], key: 'VIRTUAL', types: {} },
        ENUM:
         { [Function: ENUM]
           warn: [Function: warn],
           key: 'ENUM',
           types:
            { postgres: { oids: [], array_oids: [] },
              mysql: false,
              sqlite: false,
              mssql: false } },
        RANGE:
         { [Function: RANGE]
           warn: [Function: warn],
           key: 'RANGE',
           types:
            { postgres:
               { oids: [ 3904, 3906, 3908, 3910, 3912, 3926 ],
                 array_oids: [ 3905, 3907, 3909, 3911, 3913, 3927 ] } } },
        REAL:
         { [Function: REAL]
           warn: [Function: warn],
           key: 'REAL',
           types:
            { postgres: { oids: [ 700 ], array_oids: [ 1021 ] },
              mysql: [ 'DOUBLE' ],
              sqlite: [ 'REAL' ],
              mssql: [ 109 ] } },
        DOUBLE:
         { [Function: DOUBLE]
           warn: [Function: warn],
           key: 'DOUBLE PRECISION',
           types:
            { postgres: { oids: [ 701 ], array_oids: [ 1022 ] },
              mysql: [ 'DOUBLE' ],
              sqlite: [ 'DOUBLE PRECISION' ],
              mssql: [ 109 ] } },
        'DOUBLE PRECISION':
         { [Function: DOUBLE]
           warn: [Function: warn],
           key: 'DOUBLE PRECISION',
           types:
            { postgres: { oids: [ 701 ], array_oids: [ 1022 ] },
              mysql: [ 'DOUBLE' ],
              sqlite: [ 'DOUBLE PRECISION' ],
              mssql: [ 109 ] } },
        GEOMETRY:
         { [Function: GEOMETRY]
           warn: [Function: warn],
           key: 'GEOMETRY',
           types:
            { postgres: { oids: [], array_oids: [] },
              mysql: [ 'GEOMETRY' ],
              sqlite: false,
              mssql: false } },
        GEOGRAPHY:
         { [Function: GEOGRAPHY]
           warn: [Function: warn],
           key: 'GEOGRAPHY',
           types: { postgres: { oids: [], array_oids: [] } } },
        CIDR:
         { [Function: CIDR]
           warn: [Function: warn],
           key: 'CIDR',
           types: { postgres: { oids: [ 650 ], array_oids: [ 651 ] } } },
        INET:
         { [Function: INET]
           warn: [Function: warn],
           key: 'INET',
           types: { postgres: { oids: [ 869 ], array_oids: [ 1041 ] } } },
        MACADDR:
         { [Function: MACADDR]
           warn: [Function: warn],
           key: 'MACADDR',
           types: { postgres: { oids: [ 829 ], array_oids: [ 1040 ] } } },
        postgres:
         { DECIMAL:
            { [Function: DECIMAL]
              warn: [Function: warn],
              key: 'DECIMAL',
              types:
               { postgres: { oids: [ 1700 ], array_oids: [ 1231 ] },
                 mysql: [ 'NEWDECIMAL' ],
                 sqlite: [ 'DECIMAL' ],
                 mssql: [ 106 ] },
              parse: [Function: parse],
              extend: [Function] },
           BLOB:
            { [Function: BLOB]
              warn: [Function: warn],
              key: 'BLOB',
              types:
               { postgres: { oids: [ 17 ], array_oids: [ 1001 ] },
                 mysql: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
                 sqlite: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
                 mssql: [ 165 ] },
              extend: [Function] },
           STRING:
            { [Function: STRING]
              warn: [Function: warn],
              key: 'STRING',
              types:
               { postgres: { oids: [ 1043 ], array_oids: [ 1015 ] },
                 mysql: [ 'VAR_STRING' ],
                 sqlite: [ 'VARCHAR', 'VARCHAR BINARY' ],
                 mssql: [ 231, 173 ] },
              extend: [Function] },
           CHAR:
            { [Function: CHAR]
              warn: [Function: warn],
              key: 'CHAR',
              types:
               { postgres: { oids: [ 18, 1042 ], array_oids: [ 1002, 1014 ] },
                 mysql: [ 'STRING' ],
                 sqlite: [ 'CHAR', 'CHAR BINARY' ],
                 mssql: [ 175 ] },
              extend: [Function] },
           TEXT:
            { [Function: TEXT]
              warn: [Function: warn],
              key: 'TEXT',
              types:
               { postgres: { oids: [ 25 ], array_oids: [ 1009 ] },
                 mysql: [ 'BLOB' ],
                 sqlite: [ 'TEXT' ],
                 mssql: false },
              extend: [Function] },
           SMALLINT:
            { [Function: SMALLINT]
              warn: [Function: warn],
              key: 'SMALLINT',
              types:
               { postgres: { oids: [ 21 ], array_oids: [ 1005 ] },
                 mysql: [ 'SHORT' ],
                 sqlite: [ 'SMALLINT' ],
                 mssql: [ 34 ] },
              extend: [Function] },
           INTEGER:
            { [Function: INTEGER]
              warn: [Function: warn],
              key: 'INTEGER',
              types:
               { postgres: { oids: [ 23 ], array_oids: [ 1007 ] },
                 mysql: [ 'LONG' ],
                 sqlite: [ 'INTEGER' ],
                 mssql: [ 38 ] },
              parse: [Function: parse],
              extend: [Function] },
           BIGINT:
            { [Function: BIGINT]
              warn: [Function: warn],
              key: 'BIGINT',
              types:
               { postgres: { oids: [ 20 ], array_oids: [ 1016 ] },
                 mysql: [ 'LONGLONG' ],
                 sqlite: [ 'BIGINT' ],
                 mssql: false },
              extend: [Function] },
           BOOLEAN:
            { [Function: BOOLEAN]
              warn: [Function: warn],
              key: 'BOOLEAN',
              parse: [Function: _sanitize],
              types:
               { postgres: { oids: [ 16 ], array_oids: [ 1000 ] },
                 mysql: [ 'TINY' ],
                 sqlite: [ 'TINYINT' ],
                 mssql: [ 104 ] },
              extend: [Function] },
           DATE:
            { [Function: DATE]
              warn: [Function: warn],
              key: 'DATE',
              types:
               { postgres: { oids: [ 1184 ], array_oids: [ 1185 ] },
                 mysql: [ 'DATETIME' ],
                 sqlite: [ 'DATETIME' ],
                 mssql: [ 43 ] },
              extend: [Function] },
           DATEONLY:
            { [Function: DATEONLY]
              key: 'DATEONLY',
              types:
               { postgres: { oids: [ 1082 ], array_oids: [ 1182 ] },
                 mysql: [ 'DATE' ],
                 sqlite: [ 'DATE' ],
                 mssql: [ 40 ] },
              parse: [Function: parse],
              extend: [Function] },
           REAL:
            { [Function: REAL]
              warn: [Function: warn],
              key: 'REAL',
              types:
               { postgres: { oids: [ 700 ], array_oids: [ 1021 ] },
                 mysql: [ 'DOUBLE' ],
                 sqlite: [ 'REAL' ],
                 mssql: [ 109 ] },
              extend: [Function] },
           'DOUBLE PRECISION':
            { [Function: DOUBLE]
              warn: [Function: warn],
              key: 'DOUBLE PRECISION',
              types:
               { postgres: { oids: [ 701 ], array_oids: [ 1022 ] },
                 mysql: [ 'DOUBLE' ],
                 sqlite: [ 'DOUBLE PRECISION' ],
                 mssql: [ 109 ] },
              extend: [Function] },
           FLOAT:
            { [Function: FLOAT]
              warn: [Function: warn],
              key: 'FLOAT',
              types: { mysql: [ 'FLOAT' ], sqlite: [ 'FLOAT' ], mssql: [ 109 ] },
              extend: [Function] },
           GEOMETRY:
            { [Function: GEOMETRY]
              warn: [Function: warn],
              key: 'GEOMETRY',
              types:
               { postgres: { oids: [], array_oids: [] },
                 mysql: [ 'GEOMETRY' ],
                 sqlite: false,
                 mssql: false },
              parse: [Function: parse],
              extend: [Function] },
           GEOGRAPHY:
            { [Function: GEOGRAPHY]
              warn: [Function: warn],
              key: 'GEOGRAPHY',
              types: { postgres: { oids: [], array_oids: [] } },
              parse: [Function: parse],
              extend: [Function] },
           HSTORE:
            { [Function: HSTORE]
              warn: [Function: warn],
              key: 'HSTORE',
              types: { postgres: { oids: [], array_oids: [] } },
              parse: [Function: parse],
              extend: [Function] },
           RANGE:
            { [Function: RANGE]
              warn: [Function: warn],
              key: 'RANGE',
              types:
               { postgres:
                  { oids: [ 3904, 3906, 3908, 3910, 3912, 3926 ],
                    array_oids: [ 3905, 3907, 3909, 3911, 3913, 3927 ] } },
              oid_map:
               { '3904': 23,
                 '3905': 23,
                 '3906': 1700,
                 '3907': 1700,
                 '3908': 1114,
                 '3909': 1114,
                 '3910': 1184,
                 '3911': 1184,
                 '3912': 1082,
                 '3913': 1082,
                 '3926': 20,
                 '3927': 20 },
              parse: [Function: parse],
              extend: [Function] },
           ENUM:
            { [Function: ENUM]
              warn: [Function: warn],
              key: 'ENUM',
              types:
               { postgres: { oids: [], array_oids: [] },
                 mysql: false,
                 sqlite: false,
                 mssql: false },
              parse: [Function],
              extend: [Function] } },
        mysql:
         { ENUM:
            { [Function: ENUM]
              warn: [Function: warn],
              key: 'ENUM',
              types:
               { postgres: { oids: [], array_oids: [] },
                 mysql: false,
                 sqlite: false,
                 mssql: false },
              extend: [Function: extend] },
           DATE:
            { [Function: DATE]
              warn: [Function: warn],
              key: 'DATE',
              types:
               { postgres: { oids: [ 1184 ], array_oids: [ 1185 ] },
                 mysql: [ 'DATETIME' ],
                 sqlite: [ 'DATETIME' ],
                 mssql: [ 43 ] },
              parse: [Function: parse],
              extend: [Function: extend] },
           DATEONLY:
            { [Function: DATEONLY]
              key: 'DATEONLY',
              types:
               { postgres: { oids: [ 1082 ], array_oids: [ 1182 ] },
                 mysql: [ 'DATE' ],
                 sqlite: [ 'DATE' ],
                 mssql: [ 40 ] },
              parse: [Function: parse],
              extend: [Function: extend] },
           UUID:
            { [Function: UUID]
              warn: [Function: warn],
              key: 'UUID',
              types:
               { postgres: { oids: [ 2950 ], array_oids: [ 2951 ] },
                 mysql: false,
                 sqlite: [ 'UUID' ],
                 mssql: false },
              extend: [Function: extend] },
           GEOMETRY:
            { [Function: GEOMETRY]
              warn: [Function: warn],
              key: 'GEOMETRY',
              types:
               { postgres: { oids: [], array_oids: [] },
                 mysql: [ 'GEOMETRY' ],
                 sqlite: false,
                 mssql: false },
              parse: [Function: parse],
              extend: [Function: extend] },
           DECIMAL:
            { [Function: DECIMAL]
              warn: [Function: warn],
              key: 'DECIMAL',
              types:
               { postgres: { oids: [ 1700 ], array_oids: [ 1231 ] },
                 mysql: [ 'NEWDECIMAL' ],
                 sqlite: [ 'DECIMAL' ],
                 mssql: [ 106 ] },
              extend: [Function: extend] },
           BLOB:
            { [Function: BLOB]
              warn: [Function: warn],
              key: 'BLOB',
              types:
               { postgres: { oids: [ 17 ], array_oids: [ 1001 ] },
                 mysql: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
                 sqlite: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
                 mssql: [ 165 ] },
              parse: [Function],
              extend: [Function: extend] },
           JSON:
            { [Function: JSONTYPE]
              warn: [Function: warn],
              key: 'JSON',
              types:
               { postgres: { oids: [ 114 ], array_oids: [ 199 ] },
                 mysql: [ 'JSON' ],
                 sqlite: [ 'JSON', 'JSONB' ] },
              extend: [Function: extend] } },
        sqlite:
         { DATE:
            { [Function: DATE]
              warn: [Function: warn],
              key: 'DATE',
              types:
               { postgres: { oids: [ 1184 ], array_oids: [ 1185 ] },
                 mysql: [ 'DATETIME' ],
                 sqlite: [ 'DATETIME' ],
                 mssql: [ 43 ] },
              parse: [Function: parse],
              extend: [Function] },
           DATEONLY:
            { [Function: DATEONLY]
              key: 'DATEONLY',
              types:
               { postgres: { oids: [ 1082 ], array_oids: [ 1182 ] },
                 mysql: [ 'DATE' ],
                 sqlite: [ 'DATE' ],
                 mssql: [ 40 ] },
              parse: [Function: parse],
              extend: [Function] },
           STRING:
            { [Function: STRING]
              warn: [Function: warn],
              key: 'STRING',
              types:
               { postgres: { oids: [ 1043 ], array_oids: [ 1015 ] },
                 mysql: [ 'VAR_STRING' ],
                 sqlite: [ 'VARCHAR', 'VARCHAR BINARY' ],
                 mssql: [ 231, 173 ] },
              extend: [Function] },
           CHAR:
            { [Function: CHAR]
              warn: [Function: warn],
              key: 'CHAR',
              types:
               { postgres: { oids: [ 18, 1042 ], array_oids: [ 1002, 1014 ] },
                 mysql: [ 'STRING' ],
                 sqlite: [ 'CHAR', 'CHAR BINARY' ],
                 mssql: [ 175 ] },
              extend: [Function] },
           NUMBER:
            { [Function: NUMBER]
              warn: [Function: warn],
              key: 'NUMBER',
              types: {},
              extend: [Function] },
           FLOAT:
            { [Function: FLOAT]
              warn: [Function: warn],
              key: 'FLOAT',
              types: { mysql: [ 'FLOAT' ], sqlite: [ 'FLOAT' ], mssql: [ 109 ] },
              parse: [Function: parse],
              extend: [Function] },
           REAL:
            { [Function: REAL]
              warn: [Function: warn],
              key: 'REAL',
              types:
               { postgres: { oids: [ 700 ], array_oids: [ 1021 ] },
                 mysql: [ 'DOUBLE' ],
                 sqlite: [ 'REAL' ],
                 mssql: [ 109 ] },
              parse: [Function: parse],
              extend: [Function] },
           'DOUBLE PRECISION':
            { [Function: DOUBLE]
              warn: [Function: warn],
              key: 'DOUBLE PRECISION',
              types:
               { postgres: { oids: [ 701 ], array_oids: [ 1022 ] },
                 mysql: [ 'DOUBLE' ],
                 sqlite: [ 'DOUBLE PRECISION' ],
                 mssql: [ 109 ] },
              parse: [Function: parse],
              extend: [Function] },
           TINYINT:
            { [Function: TINYINT]
              warn: [Function: warn],
              key: 'TINYINT',
              types: { mysql: [ 'TINY' ], sqlite: [ 'TINYINT' ], mssql: [ 30 ] },
              extend: [Function] },
           SMALLINT:
            { [Function: SMALLINT]
              warn: [Function: warn],
              key: 'SMALLINT',
              types:
               { postgres: { oids: [ 21 ], array_oids: [ 1005 ] },
                 mysql: [ 'SHORT' ],
                 sqlite: [ 'SMALLINT' ],
                 mssql: [ 34 ] },
              extend: [Function] },
           MEDIUMINT:
            { [Function: MEDIUMINT]
              warn: [Function: warn],
              key: 'MEDIUMINT',
              types:
               { mysql: [ 'INT24' ], sqlite: [ 'MEDIUMINT' ], mssql: false },
              extend: [Function] },
           INTEGER:
            { [Function: INTEGER]
              warn: [Function: warn],
              key: 'INTEGER',
              types:
               { postgres: { oids: [ 23 ], array_oids: [ 1007 ] },
                 mysql: [ 'LONG' ],
                 sqlite: [ 'INTEGER' ],
                 mssql: [ 38 ] },
              extend: [Function] },
           BIGINT:
            { [Function: BIGINT]
              warn: [Function: warn],
              key: 'BIGINT',
              types:
               { postgres: { oids: [ 20 ], array_oids: [ 1016 ] },
                 mysql: [ 'LONGLONG' ],
                 sqlite: [ 'BIGINT' ],
                 mssql: false },
              extend: [Function] },
           TEXT:
            { [Function: TEXT]
              warn: [Function: warn],
              key: 'TEXT',
              types:
               { postgres: { oids: [ 25 ], array_oids: [ 1009 ] },
                 mysql: [ 'BLOB' ],
                 sqlite: [ 'TEXT' ],
                 mssql: false },
              extend: [Function] },
           ENUM:
            { [Function: ENUM]
              warn: [Function: warn],
              key: 'ENUM',
              types:
               { postgres: { oids: [], array_oids: [] },
                 mysql: false,
                 sqlite: false,
                 mssql: false },
              extend: [Function] },
           JSON:
            { [Function: JSONTYPE]
              warn: [Function: warn],
              key: 'JSON',
              types:
               { postgres: { oids: [ 114 ], array_oids: [ 199 ] },
                 mysql: [ 'JSON' ],
                 sqlite: [ 'JSON', 'JSONB' ] },
              parse: [Function: parse],
              extend: [Function] } },
        mssql:
         { BLOB:
            { [Function: BLOB]
              warn: [Function: warn],
              key: 'BLOB',
              types:
               { postgres: { oids: [ 17 ], array_oids: [ 1001 ] },
                 mysql: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
                 sqlite: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
                 mssql: [ 165 ] },
              extend: [Function: extend] },
           BOOLEAN:
            { [Function: BOOLEAN]
              warn: [Function: warn],
              key: 'BOOLEAN',
              parse: [Function: _sanitize],
              types:
               { postgres: { oids: [ 16 ], array_oids: [ 1000 ] },
                 mysql: [ 'TINY' ],
                 sqlite: [ 'TINYINT' ],
                 mssql: [ 104 ] },
              extend: [Function: extend] },
           ENUM:
            { [Function: ENUM]
              warn: [Function: warn],
              key: 'ENUM',
              types:
               { postgres: { oids: [], array_oids: [] },
                 mysql: false,
                 sqlite: false,
                 mssql: false },
              extend: [Function: extend] },
           STRING:
            { [Function: STRING]
              warn: [Function: warn],
              key: 'STRING',
              types:
               { postgres: { oids: [ 1043 ], array_oids: [ 1015 ] },
                 mysql: [ 'VAR_STRING' ],
                 sqlite: [ 'VARCHAR', 'VARCHAR BINARY' ],
                 mssql: [ 231, 173 ] },
              extend: [Function: extend] },
           UUID:
            { [Function: UUID]
              warn: [Function: warn],
              key: 'UUID',
              types:
               { postgres: { oids: [ 2950 ], array_oids: [ 2951 ] },
                 mysql: false,
                 sqlite: [ 'UUID' ],
                 mssql: false },
              extend: [Function: extend] },
           DATE:
            { [Function: DATE]
              warn: [Function: warn],
              key: 'DATE',
              types:
               { postgres: { oids: [ 1184 ], array_oids: [ 1185 ] },
                 mysql: [ 'DATETIME' ],
                 sqlite: [ 'DATETIME' ],
                 mssql: [ 43 ] },
              extend: [Function: extend] },
           DATEONLY:
            { [Function: DATEONLY]
              key: 'DATEONLY',
              types:
               { postgres: { oids: [ 1082 ], array_oids: [ 1182 ] },
                 mysql: [ 'DATE' ],
                 sqlite: [ 'DATE' ],
                 mssql: [ 40 ] },
              parse: [Function],
              extend: [Function: extend] },
           NOW:
            { [Function: NOW]
              warn: [Function: warn],
              key: 'NOW',
              types: {},
              extend: [Function: extend] },
           TINYINT:
            { [Function: TINYINT]
              warn: [Function: warn],
              key: 'TINYINT',
              types: { mysql: [ 'TINY' ], sqlite: [ 'TINYINT' ], mssql: [ 30 ] },
              extend: [Function: extend] },
           SMALLINT:
            { [Function: SMALLINT]
              warn: [Function: warn],
              key: 'SMALLINT',
              types:
               { postgres: { oids: [ 21 ], array_oids: [ 1005 ] },
                 mysql: [ 'SHORT' ],
                 sqlite: [ 'SMALLINT' ],
                 mssql: [ 34 ] },
              extend: [Function: extend] },
           INTEGER:
            { [Function: INTEGER]
              warn: [Function: warn],
              key: 'INTEGER',
              types:
               { postgres: { oids: [ 23 ], array_oids: [ 1007 ] },
                 mysql: [ 'LONG' ],
                 sqlite: [ 'INTEGER' ],
                 mssql: [ 38 ] },
              extend: [Function: extend] },
           BIGINT:
            { [Function: BIGINT]
              warn: [Function: warn],
              key: 'BIGINT',
              types:
               { postgres: { oids: [ 20 ], array_oids: [ 1016 ] },
                 mysql: [ 'LONGLONG' ],
                 sqlite: [ 'BIGINT' ],
                 mssql: false },
              extend: [Function: extend] },
           REAL:
            { [Function: REAL]
              warn: [Function: warn],
              key: 'REAL',
              types:
               { postgres: { oids: [ 700 ], array_oids: [ 1021 ] },
                 mysql: [ 'DOUBLE' ],
                 sqlite: [ 'REAL' ],
                 mssql: [ 109 ] },
              extend: [Function: extend] },
           FLOAT:
            { [Function: FLOAT]
              warn: [Function: warn],
              key: 'FLOAT',
              types: { mysql: [ 'FLOAT' ], sqlite: [ 'FLOAT' ], mssql: [ 109 ] },
              extend: [Function: extend] },
           TEXT:
            { [Function: TEXT]
              warn: [Function: warn],
              key: 'TEXT',
              types:
               { postgres: { oids: [ 25 ], array_oids: [ 1009 ] },
                 mysql: [ 'BLOB' ],
                 sqlite: [ 'TEXT' ],
                 mssql: false },
              extend: [Function: extend] } } },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING:
      { [Function: STRING]
        warn: [Function: warn],
        key: 'STRING',
        types:
         { postgres: { oids: [ 1043 ], array_oids: [ 1015 ] },
           mysql: [ 'VAR_STRING' ],
           sqlite: [ 'VARCHAR', 'VARCHAR BINARY' ],
           mssql: [ 231, 173 ] } },
     CHAR:
      { [Function: CHAR]
        warn: [Function: warn],
        key: 'CHAR',
        types:
         { postgres: { oids: [ 18, 1042 ], array_oids: [ 1002, 1014 ] },
           mysql: [ 'STRING' ],
           sqlite: [ 'CHAR', 'CHAR BINARY' ],
           mssql: [ 175 ] } },
     TEXT:
      { [Function: TEXT]
        warn: [Function: warn],
        key: 'TEXT',
        types:
         { postgres: { oids: [ 25 ], array_oids: [ 1009 ] },
           mysql: [ 'BLOB' ],
           sqlite: [ 'TEXT' ],
           mssql: false } },
     NUMBER:
      { [Function: NUMBER] warn: [Function: warn], key: 'NUMBER', types: {} },
     TINYINT:
      { [Function: TINYINT]
        warn: [Function: warn],
        key: 'TINYINT',
        types: { mysql: [ 'TINY' ], sqlite: [ 'TINYINT' ], mssql: [ 30 ] } },
     SMALLINT:
      { [Function: SMALLINT]
        warn: [Function: warn],
        key: 'SMALLINT',
        types:
         { postgres: { oids: [ 21 ], array_oids: [ 1005 ] },
           mysql: [ 'SHORT' ],
           sqlite: [ 'SMALLINT' ],
           mssql: [ 34 ] } },
     MEDIUMINT:
      { [Function: MEDIUMINT]
        warn: [Function: warn],
        key: 'MEDIUMINT',
        types:
         { mysql: [ 'INT24' ], sqlite: [ 'MEDIUMINT' ], mssql: false } },
     INTEGER:
      { [Function: INTEGER]
        warn: [Function: warn],
        key: 'INTEGER',
        types:
         { postgres: { oids: [ 23 ], array_oids: [ 1007 ] },
           mysql: [ 'LONG' ],
           sqlite: [ 'INTEGER' ],
           mssql: [ 38 ] } },
     BIGINT:
      { [Function: BIGINT]
        warn: [Function: warn],
        key: 'BIGINT',
        types:
         { postgres: { oids: [ 20 ], array_oids: [ 1016 ] },
           mysql: [ 'LONGLONG' ],
           sqlite: [ 'BIGINT' ],
           mssql: false } },
     FLOAT:
      { [Function: FLOAT]
        warn: [Function: warn],
        key: 'FLOAT',
        types: { mysql: [ 'FLOAT' ], sqlite: [ 'FLOAT' ], mssql: [ 109 ] } },
     TIME:
      { [Function: TIME]
        warn: [Function: warn],
        key: 'TIME',
        types:
         { postgres: { oids: [ 1083 ], array_oids: [ 1183 ] },
           mysql: [ 'TIME' ],
           sqlite: [ 'TIME' ],
           mssql: [ 41 ] } },
     DATE:
      { [Function: DATE]
        warn: [Function: warn],
        key: 'DATE',
        types:
         { postgres: { oids: [ 1184 ], array_oids: [ 1185 ] },
           mysql: [ 'DATETIME' ],
           sqlite: [ 'DATETIME' ],
           mssql: [ 43 ] } },
     DATEONLY:
      { [Function: DATEONLY]
        key: 'DATEONLY',
        types:
         { postgres: { oids: [ 1082 ], array_oids: [ 1182 ] },
           mysql: [ 'DATE' ],
           sqlite: [ 'DATE' ],
           mssql: [ 40 ] } },
     BOOLEAN:
      { [Function: BOOLEAN]
        warn: [Function: warn],
        key: 'BOOLEAN',
        parse: [Function: _sanitize],
        types:
         { postgres: { oids: [ 16 ], array_oids: [ 1000 ] },
           mysql: [ 'TINY' ],
           sqlite: [ 'TINYINT' ],
           mssql: [ 104 ] } },
     NOW:
      { [Function: NOW] warn: [Function: warn], key: 'NOW', types: {} },
     BLOB:
      { [Function: BLOB]
        warn: [Function: warn],
        key: 'BLOB',
        types:
         { postgres: { oids: [ 17 ], array_oids: [ 1001 ] },
           mysql: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
           sqlite: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
           mssql: [ 165 ] } },
     DECIMAL:
      { [Function: DECIMAL]
        warn: [Function: warn],
        key: 'DECIMAL',
        types:
         { postgres: { oids: [ 1700 ], array_oids: [ 1231 ] },
           mysql: [ 'NEWDECIMAL' ],
           sqlite: [ 'DECIMAL' ],
           mssql: [ 106 ] } },
     NUMERIC:
      { [Function: DECIMAL]
        warn: [Function: warn],
        key: 'DECIMAL',
        types:
         { postgres: { oids: [ 1700 ], array_oids: [ 1231 ] },
           mysql: [ 'NEWDECIMAL' ],
           sqlite: [ 'DECIMAL' ],
           mssql: [ 106 ] } },
     UUID:
      { [Function: UUID]
        warn: [Function: warn],
        key: 'UUID',
        types:
         { postgres: { oids: [ 2950 ], array_oids: [ 2951 ] },
           mysql: false,
           sqlite: [ 'UUID' ],
           mssql: false } },
     UUIDV1:
      { [Function: UUIDV1] warn: [Function: warn], key: 'UUIDV1', types: {} },
     UUIDV4:
      { [Function: UUIDV4] warn: [Function: warn], key: 'UUIDV4', types: {} },
     HSTORE:
      { [Function: HSTORE]
        warn: [Function: warn],
        key: 'HSTORE',
        types: { postgres: { oids: [], array_oids: [] } } },
     JSON:
      { [Function: JSONTYPE]
        warn: [Function: warn],
        key: 'JSON',
        types:
         { postgres: { oids: [ 114 ], array_oids: [ 199 ] },
           mysql: [ 'JSON' ],
           sqlite: [ 'JSON', 'JSONB' ] } },
     JSONB:
      { [Function: JSONB]
        warn: [Function: warn],
        key: 'JSONB',
        types: { postgres: { oids: [ 3802 ], array_oids: [ 3807 ] } } },
     VIRTUAL:
      { [Function: VIRTUAL] warn: [Function: warn], key: 'VIRTUAL', types: {} },
     ARRAY:
      { [Function: ARRAY]
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE:
      { [Function: VIRTUAL] warn: [Function: warn], key: 'VIRTUAL', types: {} },
     ENUM:
      { [Function: ENUM]
        warn: [Function: warn],
        key: 'ENUM',
        types:
         { postgres: { oids: [], array_oids: [] },
           mysql: false,
           sqlite: false,
           mssql: false } },
     RANGE:
      { [Function: RANGE]
        warn: [Function: warn],
        key: 'RANGE',
        types:
         { postgres:
            { oids: [ 3904, 3906, 3908, 3910, 3912, 3926 ],
              array_oids: [ 3905, 3907, 3909, 3911, 3913, 3927 ] } } },
     REAL:
      { [Function: REAL]
        warn: [Function: warn],
        key: 'REAL',
        types:
         { postgres: { oids: [ 700 ], array_oids: [ 1021 ] },
           mysql: [ 'DOUBLE' ],
           sqlite: [ 'REAL' ],
           mssql: [ 109 ] } },
     DOUBLE:
      { [Function: DOUBLE]
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types:
         { postgres: { oids: [ 701 ], array_oids: [ 1022 ] },
           mysql: [ 'DOUBLE' ],
           sqlite: [ 'DOUBLE PRECISION' ],
           mssql: [ 109 ] } },
     'DOUBLE PRECISION':
      { [Function: DOUBLE]
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types:
         { postgres: { oids: [ 701 ], array_oids: [ 1022 ] },
           mysql: [ 'DOUBLE' ],
           sqlite: [ 'DOUBLE PRECISION' ],
           mssql: [ 109 ] } },
     GEOMETRY:
      { [Function: GEOMETRY]
        warn: [Function: warn],
        key: 'GEOMETRY',
        types:
         { postgres: { oids: [], array_oids: [] },
           mysql: [ 'GEOMETRY' ],
           sqlite: false,
           mssql: false } },
     GEOGRAPHY:
      { [Function: GEOGRAPHY]
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: { postgres: { oids: [], array_oids: [] } } },
     CIDR:
      { [Function: CIDR]
        warn: [Function: warn],
        key: 'CIDR',
        types: { postgres: { oids: [ 650 ], array_oids: [ 651 ] } } },
     INET:
      { [Function: INET]
        warn: [Function: warn],
        key: 'INET',
        types: { postgres: { oids: [ 869 ], array_oids: [ 1041 ] } } },
     MACADDR:
      { [Function: MACADDR]
        warn: [Function: warn],
        key: 'MACADDR',
        types: { postgres: { oids: [ 829 ], array_oids: [ 1040 ] } } },
     postgres:
      { DECIMAL:
         { [Function: DECIMAL]
           warn: [Function: warn],
           key: 'DECIMAL',
           types:
            { postgres: { oids: [ 1700 ], array_oids: [ 1231 ] },
              mysql: [ 'NEWDECIMAL' ],
              sqlite: [ 'DECIMAL' ],
              mssql: [ 106 ] },
           parse: [Function: parse],
           extend: [Function] },
        BLOB:
         { [Function: BLOB]
           warn: [Function: warn],
           key: 'BLOB',
           types:
            { postgres: { oids: [ 17 ], array_oids: [ 1001 ] },
              mysql: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
              sqlite: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
              mssql: [ 165 ] },
           extend: [Function] },
        STRING:
         { [Function: STRING]
           warn: [Function: warn],
           key: 'STRING',
           types:
            { postgres: { oids: [ 1043 ], array_oids: [ 1015 ] },
              mysql: [ 'VAR_STRING' ],
              sqlite: [ 'VARCHAR', 'VARCHAR BINARY' ],
              mssql: [ 231, 173 ] },
           extend: [Function] },
        CHAR:
         { [Function: CHAR]
           warn: [Function: warn],
           key: 'CHAR',
           types:
            { postgres: { oids: [ 18, 1042 ], array_oids: [ 1002, 1014 ] },
              mysql: [ 'STRING' ],
              sqlite: [ 'CHAR', 'CHAR BINARY' ],
              mssql: [ 175 ] },
           extend: [Function] },
        TEXT:
         { [Function: TEXT]
           warn: [Function: warn],
           key: 'TEXT',
           types:
            { postgres: { oids: [ 25 ], array_oids: [ 1009 ] },
              mysql: [ 'BLOB' ],
              sqlite: [ 'TEXT' ],
              mssql: false },
           extend: [Function] },
        SMALLINT:
         { [Function: SMALLINT]
           warn: [Function: warn],
           key: 'SMALLINT',
           types:
            { postgres: { oids: [ 21 ], array_oids: [ 1005 ] },
              mysql: [ 'SHORT' ],
              sqlite: [ 'SMALLINT' ],
              mssql: [ 34 ] },
           extend: [Function] },
        INTEGER:
         { [Function: INTEGER]
           warn: [Function: warn],
           key: 'INTEGER',
           types:
            { postgres: { oids: [ 23 ], array_oids: [ 1007 ] },
              mysql: [ 'LONG' ],
              sqlite: [ 'INTEGER' ],
              mssql: [ 38 ] },
           parse: [Function: parse],
           extend: [Function] },
        BIGINT:
         { [Function: BIGINT]
           warn: [Function: warn],
           key: 'BIGINT',
           types:
            { postgres: { oids: [ 20 ], array_oids: [ 1016 ] },
              mysql: [ 'LONGLONG' ],
              sqlite: [ 'BIGINT' ],
              mssql: false },
           extend: [Function] },
        BOOLEAN:
         { [Function: BOOLEAN]
           warn: [Function: warn],
           key: 'BOOLEAN',
           parse: [Function: _sanitize],
           types:
            { postgres: { oids: [ 16 ], array_oids: [ 1000 ] },
              mysql: [ 'TINY' ],
              sqlite: [ 'TINYINT' ],
              mssql: [ 104 ] },
           extend: [Function] },
        DATE:
         { [Function: DATE]
           warn: [Function: warn],
           key: 'DATE',
           types:
            { postgres: { oids: [ 1184 ], array_oids: [ 1185 ] },
              mysql: [ 'DATETIME' ],
              sqlite: [ 'DATETIME' ],
              mssql: [ 43 ] },
           extend: [Function] },
        DATEONLY:
         { [Function: DATEONLY]
           key: 'DATEONLY',
           types:
            { postgres: { oids: [ 1082 ], array_oids: [ 1182 ] },
              mysql: [ 'DATE' ],
              sqlite: [ 'DATE' ],
              mssql: [ 40 ] },
           parse: [Function: parse],
           extend: [Function] },
        REAL:
         { [Function: REAL]
           warn: [Function: warn],
           key: 'REAL',
           types:
            { postgres: { oids: [ 700 ], array_oids: [ 1021 ] },
              mysql: [ 'DOUBLE' ],
              sqlite: [ 'REAL' ],
              mssql: [ 109 ] },
           extend: [Function] },
        'DOUBLE PRECISION':
         { [Function: DOUBLE]
           warn: [Function: warn],
           key: 'DOUBLE PRECISION',
           types:
            { postgres: { oids: [ 701 ], array_oids: [ 1022 ] },
              mysql: [ 'DOUBLE' ],
              sqlite: [ 'DOUBLE PRECISION' ],
              mssql: [ 109 ] },
           extend: [Function] },
        FLOAT:
         { [Function: FLOAT]
           warn: [Function: warn],
           key: 'FLOAT',
           types: { mysql: [ 'FLOAT' ], sqlite: [ 'FLOAT' ], mssql: [ 109 ] },
           extend: [Function] },
        GEOMETRY:
         { [Function: GEOMETRY]
           warn: [Function: warn],
           key: 'GEOMETRY',
           types:
            { postgres: { oids: [], array_oids: [] },
              mysql: [ 'GEOMETRY' ],
              sqlite: false,
              mssql: false },
           parse: [Function: parse],
           extend: [Function] },
        GEOGRAPHY:
         { [Function: GEOGRAPHY]
           warn: [Function: warn],
           key: 'GEOGRAPHY',
           types: { postgres: { oids: [], array_oids: [] } },
           parse: [Function: parse],
           extend: [Function] },
        HSTORE:
         { [Function: HSTORE]
           warn: [Function: warn],
           key: 'HSTORE',
           types: { postgres: { oids: [], array_oids: [] } },
           parse: [Function: parse],
           extend: [Function] },
        RANGE:
         { [Function: RANGE]
           warn: [Function: warn],
           key: 'RANGE',
           types:
            { postgres:
               { oids: [ 3904, 3906, 3908, 3910, 3912, 3926 ],
                 array_oids: [ 3905, 3907, 3909, 3911, 3913, 3927 ] } },
           oid_map:
            { '3904': 23,
              '3905': 23,
              '3906': 1700,
              '3907': 1700,
              '3908': 1114,
              '3909': 1114,
              '3910': 1184,
              '3911': 1184,
              '3912': 1082,
              '3913': 1082,
              '3926': 20,
              '3927': 20 },
           parse: [Function: parse],
           extend: [Function] },
        ENUM:
         { [Function: ENUM]
           warn: [Function: warn],
           key: 'ENUM',
           types:
            { postgres: { oids: [], array_oids: [] },
              mysql: false,
              sqlite: false,
              mssql: false },
           parse: [Function],
           extend: [Function] } },
     mysql:
      { ENUM:
         { [Function: ENUM]
           warn: [Function: warn],
           key: 'ENUM',
           types:
            { postgres: { oids: [], array_oids: [] },
              mysql: false,
              sqlite: false,
              mssql: false },
           extend: [Function: extend] },
        DATE:
         { [Function: DATE]
           warn: [Function: warn],
           key: 'DATE',
           types:
            { postgres: { oids: [ 1184 ], array_oids: [ 1185 ] },
              mysql: [ 'DATETIME' ],
              sqlite: [ 'DATETIME' ],
              mssql: [ 43 ] },
           parse: [Function: parse],
           extend: [Function: extend] },
        DATEONLY:
         { [Function: DATEONLY]
           key: 'DATEONLY',
           types:
            { postgres: { oids: [ 1082 ], array_oids: [ 1182 ] },
              mysql: [ 'DATE' ],
              sqlite: [ 'DATE' ],
              mssql: [ 40 ] },
           parse: [Function: parse],
           extend: [Function: extend] },
        UUID:
         { [Function: UUID]
           warn: [Function: warn],
           key: 'UUID',
           types:
            { postgres: { oids: [ 2950 ], array_oids: [ 2951 ] },
              mysql: false,
              sqlite: [ 'UUID' ],
              mssql: false },
           extend: [Function: extend] },
        GEOMETRY:
         { [Function: GEOMETRY]
           warn: [Function: warn],
           key: 'GEOMETRY',
           types:
            { postgres: { oids: [], array_oids: [] },
              mysql: [ 'GEOMETRY' ],
              sqlite: false,
              mssql: false },
           parse: [Function: parse],
           extend: [Function: extend] },
        DECIMAL:
         { [Function: DECIMAL]
           warn: [Function: warn],
           key: 'DECIMAL',
           types:
            { postgres: { oids: [ 1700 ], array_oids: [ 1231 ] },
              mysql: [ 'NEWDECIMAL' ],
              sqlite: [ 'DECIMAL' ],
              mssql: [ 106 ] },
           extend: [Function: extend] },
        BLOB:
         { [Function: BLOB]
           warn: [Function: warn],
           key: 'BLOB',
           types:
            { postgres: { oids: [ 17 ], array_oids: [ 1001 ] },
              mysql: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
              sqlite: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
              mssql: [ 165 ] },
           parse: [Function],
           extend: [Function: extend] },
        JSON:
         { [Function: JSONTYPE]
           warn: [Function: warn],
           key: 'JSON',
           types:
            { postgres: { oids: [ 114 ], array_oids: [ 199 ] },
              mysql: [ 'JSON' ],
              sqlite: [ 'JSON', 'JSONB' ] },
           extend: [Function: extend] } },
     sqlite:
      { DATE:
         { [Function: DATE]
           warn: [Function: warn],
           key: 'DATE',
           types:
            { postgres: { oids: [ 1184 ], array_oids: [ 1185 ] },
              mysql: [ 'DATETIME' ],
              sqlite: [ 'DATETIME' ],
              mssql: [ 43 ] },
           parse: [Function: parse],
           extend: [Function] },
        DATEONLY:
         { [Function: DATEONLY]
           key: 'DATEONLY',
           types:
            { postgres: { oids: [ 1082 ], array_oids: [ 1182 ] },
              mysql: [ 'DATE' ],
              sqlite: [ 'DATE' ],
              mssql: [ 40 ] },
           parse: [Function: parse],
           extend: [Function] },
        STRING:
         { [Function: STRING]
           warn: [Function: warn],
           key: 'STRING',
           types:
            { postgres: { oids: [ 1043 ], array_oids: [ 1015 ] },
              mysql: [ 'VAR_STRING' ],
              sqlite: [ 'VARCHAR', 'VARCHAR BINARY' ],
              mssql: [ 231, 173 ] },
           extend: [Function] },
        CHAR:
         { [Function: CHAR]
           warn: [Function: warn],
           key: 'CHAR',
           types:
            { postgres: { oids: [ 18, 1042 ], array_oids: [ 1002, 1014 ] },
              mysql: [ 'STRING' ],
              sqlite: [ 'CHAR', 'CHAR BINARY' ],
              mssql: [ 175 ] },
           extend: [Function] },
        NUMBER:
         { [Function: NUMBER]
           warn: [Function: warn],
           key: 'NUMBER',
           types: {},
           extend: [Function] },
        FLOAT:
         { [Function: FLOAT]
           warn: [Function: warn],
           key: 'FLOAT',
           types: { mysql: [ 'FLOAT' ], sqlite: [ 'FLOAT' ], mssql: [ 109 ] },
           parse: [Function: parse],
           extend: [Function] },
        REAL:
         { [Function: REAL]
           warn: [Function: warn],
           key: 'REAL',
           types:
            { postgres: { oids: [ 700 ], array_oids: [ 1021 ] },
              mysql: [ 'DOUBLE' ],
              sqlite: [ 'REAL' ],
              mssql: [ 109 ] },
           parse: [Function: parse],
           extend: [Function] },
        'DOUBLE PRECISION':
         { [Function: DOUBLE]
           warn: [Function: warn],
           key: 'DOUBLE PRECISION',
           types:
            { postgres: { oids: [ 701 ], array_oids: [ 1022 ] },
              mysql: [ 'DOUBLE' ],
              sqlite: [ 'DOUBLE PRECISION' ],
              mssql: [ 109 ] },
           parse: [Function: parse],
           extend: [Function] },
        TINYINT:
         { [Function: TINYINT]
           warn: [Function: warn],
           key: 'TINYINT',
           types: { mysql: [ 'TINY' ], sqlite: [ 'TINYINT' ], mssql: [ 30 ] },
           extend: [Function] },
        SMALLINT:
         { [Function: SMALLINT]
           warn: [Function: warn],
           key: 'SMALLINT',
           types:
            { postgres: { oids: [ 21 ], array_oids: [ 1005 ] },
              mysql: [ 'SHORT' ],
              sqlite: [ 'SMALLINT' ],
              mssql: [ 34 ] },
           extend: [Function] },
        MEDIUMINT:
         { [Function: MEDIUMINT]
           warn: [Function: warn],
           key: 'MEDIUMINT',
           types:
            { mysql: [ 'INT24' ], sqlite: [ 'MEDIUMINT' ], mssql: false },
           extend: [Function] },
        INTEGER:
         { [Function: INTEGER]
           warn: [Function: warn],
           key: 'INTEGER',
           types:
            { postgres: { oids: [ 23 ], array_oids: [ 1007 ] },
              mysql: [ 'LONG' ],
              sqlite: [ 'INTEGER' ],
              mssql: [ 38 ] },
           extend: [Function] },
        BIGINT:
         { [Function: BIGINT]
           warn: [Function: warn],
           key: 'BIGINT',
           types:
            { postgres: { oids: [ 20 ], array_oids: [ 1016 ] },
              mysql: [ 'LONGLONG' ],
              sqlite: [ 'BIGINT' ],
              mssql: false },
           extend: [Function] },
        TEXT:
         { [Function: TEXT]
           warn: [Function: warn],
           key: 'TEXT',
           types:
            { postgres: { oids: [ 25 ], array_oids: [ 1009 ] },
              mysql: [ 'BLOB' ],
              sqlite: [ 'TEXT' ],
              mssql: false },
           extend: [Function] },
        ENUM:
         { [Function: ENUM]
           warn: [Function: warn],
           key: 'ENUM',
           types:
            { postgres: { oids: [], array_oids: [] },
              mysql: false,
              sqlite: false,
              mssql: false },
           extend: [Function] },
        JSON:
         { [Function: JSONTYPE]
           warn: [Function: warn],
           key: 'JSON',
           types:
            { postgres: { oids: [ 114 ], array_oids: [ 199 ] },
              mysql: [ 'JSON' ],
              sqlite: [ 'JSON', 'JSONB' ] },
           parse: [Function: parse],
           extend: [Function] } },
     mssql:
      { BLOB:
         { [Function: BLOB]
           warn: [Function: warn],
           key: 'BLOB',
           types:
            { postgres: { oids: [ 17 ], array_oids: [ 1001 ] },
              mysql: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
              sqlite: [ 'TINYBLOB', 'BLOB', 'LONGBLOB' ],
              mssql: [ 165 ] },
           extend: [Function: extend] },
        BOOLEAN:
         { [Function: BOOLEAN]
           warn: [Function: warn],
           key: 'BOOLEAN',
           parse: [Function: _sanitize],
           types:
            { postgres: { oids: [ 16 ], array_oids: [ 1000 ] },
              mysql: [ 'TINY' ],
              sqlite: [ 'TINYINT' ],
              mssql: [ 104 ] },
           extend: [Function: extend] },
        ENUM:
         { [Function: ENUM]
           warn: [Function: warn],
           key: 'ENUM',
           types:
            { postgres: { oids: [], array_oids: [] },
              mysql: false,
              sqlite: false,
              mssql: false },
           extend: [Function: extend] },
        STRING:
         { [Function: STRING]
           warn: [Function: warn],
           key: 'STRING',
           types:
            { postgres: { oids: [ 1043 ], array_oids: [ 1015 ] },
              mysql: [ 'VAR_STRING' ],
              sqlite: [ 'VARCHAR', 'VARCHAR BINARY' ],
              mssql: [ 231, 173 ] },
           extend: [Function: extend] },
        UUID:
         { [Function: UUID]
           warn: [Function: warn],
           key: 'UUID',
           types:
            { postgres: { oids: [ 2950 ], array_oids: [ 2951 ] },
              mysql: false,
              sqlite: [ 'UUID' ],
              mssql: false },
           extend: [Function: extend] },
        DATE:
         { [Function: DATE]
           warn: [Function: warn],
           key: 'DATE',
           types:
            { postgres: { oids: [ 1184 ], array_oids: [ 1185 ] },
              mysql: [ 'DATETIME' ],
              sqlite: [ 'DATETIME' ],
              mssql: [ 43 ] },
           extend: [Function: extend] },
        DATEONLY:
         { [Function: DATEONLY]
           key: 'DATEONLY',
           types:
            { postgres: { oids: [ 1082 ], array_oids: [ 1182 ] },
              mysql: [ 'DATE' ],
              sqlite: [ 'DATE' ],
              mssql: [ 40 ] },
           parse: [Function],
           extend: [Function: extend] },
        NOW:
         { [Function: NOW]
           warn: [Function: warn],
           key: 'NOW',
           types: {},
           extend: [Function: extend] },
        TINYINT:
         { [Function: TINYINT]
           warn: [Function: warn],
           key: 'TINYINT',
           types: { mysql: [ 'TINY' ], sqlite: [ 'TINYINT' ], mssql: [ 30 ] },
           extend: [Function: extend] },
        SMALLINT:
         { [Function: SMALLINT]
           warn: [Function: warn],
           key: 'SMALLINT',
           types:
            { postgres: { oids: [ 21 ], array_oids: [ 1005 ] },
              mysql: [ 'SHORT' ],
              sqlite: [ 'SMALLINT' ],
              mssql: [ 34 ] },
           extend: [Function: extend] },
        INTEGER:
         { [Function: INTEGER]
           warn: [Function: warn],
           key: 'INTEGER',
           types:
            { postgres: { oids: [ 23 ], array_oids: [ 1007 ] },
              mysql: [ 'LONG' ],
              sqlite: [ 'INTEGER' ],
              mssql: [ 38 ] },
           extend: [Function: extend] },
        BIGINT:
         { [Function: BIGINT]
           warn: [Function: warn],
           key: 'BIGINT',
           types:
            { postgres: { oids: [ 20 ], array_oids: [ 1016 ] },
              mysql: [ 'LONGLONG' ],
              sqlite: [ 'BIGINT' ],
              mssql: false },
           extend: [Function: extend] },
        REAL:
         { [Function: REAL]
           warn: [Function: warn],
           key: 'REAL',
           types:
            { postgres: { oids: [ 700 ], array_oids: [ 1021 ] },
              mysql: [ 'DOUBLE' ],
              sqlite: [ 'REAL' ],
              mssql: [ 109 ] },
           extend: [Function: extend] },
        FLOAT:
         { [Function: FLOAT]
           warn: [Function: warn],
           key: 'FLOAT',
           types: { mysql: [ 'FLOAT' ], sqlite: [ 'FLOAT' ], mssql: [ 109 ] },
           extend: [Function: extend] },
        TEXT:
         { [Function: TEXT]
           warn: [Function: warn],
           key: 'TEXT',
           types:
            { postgres: { oids: [ 25 ], array_oids: [ 1009 ] },
              mysql: [ 'BLOB' ],
              sqlite: [ 'TEXT' ],
              mssql: false },
           extend: [Function: extend] } },
     Transaction:
      { [Function: Transaction] Transaction: [Circular], default: [Circular] },
     Deferrable:
      { INITIALLY_DEFERRED: { [Function: INITIALLY_DEFERRED] toString: [Function] },
        INITIALLY_IMMEDIATE: { [Function: INITIALLY_IMMEDIATE] toString: [Function] },
        NOT: { [Function: NOT] toString: [Function] },
        SET_DEFERRED: { [Function: SET_DEFERRED] toString: [Function] },
        SET_IMMEDIATE: { [Function: SET_IMMEDIATE] toString: [Function] } },
     Association:
      { [Function: Association]
        BelongsTo:
         { [Function: BelongsTo] BelongsTo: [Circular], default: [Circular] },
        HasOne: [Function: HasOne],
        HasMany:
         { [Function: HasMany] HasMany: [Circular], default: [Circular] },
        BelongsToMany:
         { [Function: BelongsToMany] BelongsToMany: [Circular], default: [Circular] },
        default: [Circular],
        Association: [Circular] },
     useInflection: [Function: useInflection],
     _setupHooks: [Function: _setupHooks],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem:
      { [Function: ValidationErrorItem]
        Origins: { CORE: 'CORE', DB: 'DB', FUNCTION: 'FUNCTION' },
        TypeStringMap:
         { 'notnull violation': 'CORE',
           'string violation': 'CORE',
           'unique violation': 'DB',
           'validation error': 'FUNCTION' } },
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     BulkRecordError: [Function: BulkRecordError],
     Sequelize: [Circular],
     default: [Circular] } }
Server listening on Port:3000
