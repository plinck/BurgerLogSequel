Using Local DB
Server listening on Port:3000
{ SequelizeValidationError: notNull Violation: burgers.name cannot be null
    at Promise.all.then (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/sequelize/lib/instance-validator.js:74:15)
    at tryCatcher (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/util.js:16:23)
    at Promise._settlePromiseFromHandler (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/promise.js:512:31)
    at Promise._settlePromise (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/promise.js:569:18)
    at Promise._settlePromise0 (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/promise.js:614:10)
    at Promise._settlePromises (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/promise.js:694:18)
    at Promise._fulfill (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/promise.js:638:18)
    at PromiseArray._resolve (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/promise_array.js:126:19)
    at PromiseArray._promiseFulfilled (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/promise_array.js:144:14)
    at Promise._settlePromise (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/promise.js:574:26)
    at Promise._settlePromise0 (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/promise.js:614:10)
    at Promise._settlePromises (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/promise.js:694:18)
    at _drainQueueStep (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/async.js:138:12)
    at _drainQueue (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/async.js:131:9)
    at Async._drainQueues (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/async.js:147:5)
    at Immediate.Async.drainQueues [as _onImmediate] (/Users/paullinck/GitHub/GTPE/BurgerLogSequel/node_modules/bluebird/js/release/async.js:17:14)
    at processImmediate (timers.js:632:19)
  name: 'SequelizeValidationError',
  errors:
   [ ValidationErrorItem {
       message: 'burgers.name cannot be null',
       type: 'notNull Violation',
       path: 'name',
       value: null,
       origin: 'CORE',
       instance:
        burgers {
          dataValues:
           { id: null,
             name: undefined,
             isDevoured: true,
             updatedAt: 2019-03-02T14:14:39.098Z },
          _previousDataValues:
           { name: undefined, isDevoured: undefined, updatedAt: undefined },
          _changed: { name: true, isDevoured: true, updatedAt: true },
          _modelOptions:
           { timestamps: true,
             validate: {},
             freezeTableName: true,
             underscored: false,
             underscoredAll: false,
             paranoid: false,
             rejectOnEmpty: false,
             whereCollection: null,
             schema: null,
             schemaDelimiter: '',
             defaultScope: {},
             scopes: [],
             indexes: [],
             name: { plural: 'burgers', singular: 'burger' },
             omitNull: false,
             sequelize:
              Sequelize {
                options:
                 { dialect: 'mysql',
                   dialectModulePath: null,
                   host: 'localhost',
                   protocol: 'tcp',
                   define:
                    { underscored: false, freezeTableName: true, timestamps: true },
                   query: {},
                   sync: {},
                   timezone: '+00:00',
                   logging: false,
                   omitNull: false,
                   native: false,
                   replication: false,
                   ssl: undefined,
                   pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
                   quoteIdentifiers: true,
                   hooks: {},
                   retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
                   transactionType: 'DEFERRED',
                   isolationLevel: null,
                   databaseVersion: '5.7.25',
                   typeValidation: false,
                   benchmark: false,
                   operatorsAliases: false,
                   username: 'root',
                   password: 'password',
                   database: 'burger_db',
                   port: 3306 },
                config:
                 { database: 'burger_db',
                   username: 'root',
                   password: 'password',
                   host: 'localhost',
                   port: 3306,
                   pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
                   protocol: 'tcp',
                   native: false,
                   ssl: undefined,
                   replication: false,
                   dialectModulePath: null,
                   keepDefaultTimezone: undefined,
                   dialectOptions: undefined },
                dialect:
                 MysqlDialect {
                   sequelize: [Circular],
                   connectionManager:
                    ConnectionManager {
                      sequelize: [Circular],
                      config:
                       { database: 'burger_db',
                         username: 'root',
                         password: 'password',
                         host: 'localhost',
                         port: 3306,
                         pool:
                          { max: 5,
                            min: 0,
                            acquire: 30000,
                            idle: 10000,
                            evict: 10000,
                            handleDisconnects: true,
                            validate: [Function: bound _validate],
                            Promise:
                             { [Function: Promise]
                               TypeError: [Function: TypeError],
                               RangeError: [Function: RangeError],
                               CancellationError: [Function: SubError],
                               TimeoutError: [Function: SubError],
                               OperationalError: [Function: OperationalError],
                               RejectionError: [Function: OperationalError],
                               AggregateError: [Function: SubError],
                               _peekContext: [Function],
                               onPossiblyUnhandledRejection: [Function],
                               onUnhandledRejectionHandled: [Function],
                               longStackTraces: [Function],
                               hasLongStackTraces: [Function],
                               config: [Function],
                               getNewLibraryCopy: [Function],
                               is: [Function],
                               fromCallback: [Function],
                               fromNode: [Function],
                               all: [Function],
                               cast: [Function],
                               fulfilled: [Function],
                               resolve: [Function],
                               rejected: [Function],
                               reject: [Function],
                               setScheduler: [Function],
                               pending: [Function],
                               defer: [Function],
                               method: [Function],
                               try: [Function],
                               attempt: [Function],
                               bind: [Function],
                               PromiseInspection: [Function: PromiseInspection],
                               join: [Function],
                               Promise: [Circular],
                               version: '3.5.3',
                               map: [Function],
                               using: [Function],
                               delay: [Function],
                               coroutine: { [Function] addYieldHandler: [Function] },
                               spawn: [Function],
                               promisify: [Function],
                               promisifyAll: [Function],
                               props: [Function],
                               race: [Function],
                               reduce: [Function],
                               settle: [Function],
                               some: [Function],
                               _SomePromiseArray: [Function: SomePromiseArray],
                               filter: [Function],
                               each: [Function],
                               mapSeries: [Function: PromiseMapSeries],
                               any: [Function],
                               default: [Circular] } },
                         protocol: 'tcp',
                         native: false,
                         ssl: undefined,
                         replication: false,
                         dialectModulePath: null,
                         keepDefaultTimezone: undefined,
                         dialectOptions: undefined },
                      dialect: [Circular],
                      versionPromise: null,
                      dialectName: 'mysql',
                      pool:
                       Pool {
                         _events: [Object: null prototype] {},
                         _eventsCount: 0,
                         _maxListeners: undefined,
                         _config:
                          PoolOptions {
                            fifo: true,
                            priorityRange: 1,
                            testOnBorrow: true,
                            testOnReturn: false,
                            autostart: false,
                            acquireTimeoutMillis: 30000,
                            max: 5,
                            min: 0,
                            evictionRunIntervalMillis: 10000,
                            numTestsPerEvictionRun: 3,
                            softIdleTimeoutMillis: -1,
                            idleTimeoutMillis: 10000,
                            Promise:
                             { [Function: Promise]
                               TypeError: [Function: TypeError],
                               RangeError: [Function: RangeError],
                               CancellationError: [Function: SubError],
                               TimeoutError: [Function: SubError],
                               OperationalError: [Function: OperationalError],
                               RejectionError: [Function: OperationalError],
                               AggregateError: [Function: SubError],
                               _peekContext: [Function],
                               onPossiblyUnhandledRejection: [Function],
                               onUnhandledRejectionHandled: [Function],
                               longStackTraces: [Function],
                               hasLongStackTraces: [Function],
                               config: [Function],
                               getNewLibraryCopy: [Function],
                               is: [Function],
                               fromCallback: [Function],
                               fromNode: [Function],
                               all: [Function],
                               cast: [Function],
                               fulfilled: [Function],
                               resolve: [Function],
                               rejected: [Function],
                               reject: [Function],
                               setScheduler: [Function],
                               pending: [Function],
                               defer: [Function],
                               method: [Function],
                               try: [Function],
                               attempt: [Function],
                               bind: [Function],
                               PromiseInspection: [Function: PromiseInspection],
                               join: [Function],
                               Promise: [Circular],
                               version: '3.5.3',
                               map: [Function],
                               using: [Function],
                               delay: [Function],
                               coroutine: { [Function] addYieldHandler: [Function] },
                               spawn: [Function],
                               promisify: [Function],
                               promisifyAll: [Function],
                               props: [Function],
                               race: [Function],
                               reduce: [Function],
                               settle: [Function],
                               some: [Function],
                               _SomePromiseArray: [Function: SomePromiseArray],
                               filter: [Function],
                               each: [Function],
                               mapSeries: [Function: PromiseMapSeries],
                               any: [Function],
                               default: [Circular] } },
                         _Promise:
                          { [Function: Promise]
                            TypeError: [Function: TypeError],
                            RangeError: [Function: RangeError],
                            CancellationError: [Function: SubError],
                            TimeoutError: [Function: SubError],
                            OperationalError: [Function: OperationalError],
                            RejectionError: [Function: OperationalError],
                            AggregateError: [Function: SubError],
                            _peekContext: [Function],
                            onPossiblyUnhandledRejection: [Function],
                            onUnhandledRejectionHandled: [Function],
                            longStackTraces: [Function],
                            hasLongStackTraces: [Function],
                            config: [Function],
                            getNewLibraryCopy: [Function],
                            is: [Function],
                            fromCallback: [Function],
                            fromNode: [Function],
                            all: [Function],
                            cast: [Function],
                            fulfilled: [Function],
                            resolve: [Function],
                            rejected: [Function],
                            reject: [Function],
                            setScheduler: [Function],
                            pending: [Function],
                            defer: [Function],
                            method: [Function],
                            try: [Function],
                            attempt: [Function],
                            bind: [Function],
                            PromiseInspection: [Function: PromiseInspection],
                            join: [Function],
                            Promise: [Circular],
                            version: '3.5.3',
                            map: [Function],
                            using: [Function],
                            delay: [Function],
                            coroutine: { [Function] addYieldHandler: [Function] },
                            spawn: [Function],
                            promisify: [Function],
                            promisifyAll: [Function],
                            props: [Function],
                            race: [Function],
                            reduce: [Function],
                            settle: [Function],
                            some: [Function],
                            _SomePromiseArray: [Function: SomePromiseArray],
                            filter: [Function],
                            each: [Function],
                            mapSeries: [Function: PromiseMapSeries],
                            any: [Function],
                            default: [Circular] },
                         _factory:
                          { create: [Function: create],
                            destroy: [Function: destroy],
                            validate: [Function: bound _validate] },
                         _draining: false,
                         _started: true,
                         _waitingClientsQueue:
                          PriorityQueue {
                            _size: 1,
                            _slots:
                             [ Queue {
                                 _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
                         _factoryCreateOperations: Set {},
                         _factoryDestroyOperations: Set {},
                         _availableObjects:
                          Deque {
                            _list:
                             DoublyLinkedList {
                               head:
                                { prev: null,
                                  next: null,
                                  data:
                                   PooledResource {
                                     creationTime: 1551536074757,
                                     lastReturnTime: 1551536078184,
                                     lastBorrowTime: 1551536078176,
                                     lastIdleTime: 1551536078184,
                                     obj:
                                      Connection {
                                        _events: [Object: null prototype] { error: [Function: errorHandler] },
                                        _eventsCount: 1,
                                        _maxListeners: undefined,
                                        config:
                                         ConnectionConfig {
                                           isServer: undefined,
                                           stream: undefined,
                                           host: 'localhost',
                                           port: 3306,
                                           localAddress: undefined,
                                           socketPath: undefined,
                                           user: 'root',
                                           password: 'password',
                                           passwordSha1: undefined,
                                           database: 'burger_db',
                                           connectTimeout: 10000,
                                           insecureAuth: false,
                                           supportBigNumbers: true,
                                           bigNumberStrings: false,
                                           decimalNumbers: false,
                                           dateStrings: false,
                                           debug: undefined,
                                           trace: true,
                                           stringifyObjects: false,
                                           timezone: '+00:00',
                                           queryFormat: undefined,
                                           pool: undefined,
                                           ssl: false,
                                           multipleStatements: false,
                                           rowsAsArray: false,
                                           namedPlaceholders: false,
                                           nestTables: undefined,
                                           typeCast: [Function: bound _typecast],
                                           maxPacketSize: 0,
                                           charsetNumber: 224,
                                           compress: false,
                                           authSwitchHandler: undefined,
                                           clientFlags: 8582093,
                                           connectAttributes: undefined,
                                           maxPreparedStatements: 16000 },
                                        stream:
                                         Socket {
                                           connecting: false,
                                           _hadError: false,
                                           _handle:
                                            TCP {
                                              reading: true,
                                              onread: [Function: onStreamRead],
                                              onconnection: null,
                                              [Symbol(owner)]: [Circular] },
                                           _parent: null,
                                           _host: 'localhost',
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: false,
                                              endEmitted: false,
                                              reading: true,
                                              sync: false,
                                              needReadable: true,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              emitClose: false,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: false,
                                              decoder: null,
                                              encoding: null },
                                           readable: true,
                                           _events:
                                            [Object: null prototype] {
                                              end: [Function: onReadableStreamEnd],
                                              error: [Function: bound _handleNetworkError],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 4,
                                           _maxListeners: undefined,
                                           _writableState:
                                            WritableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              finalCalled: false,
                                              needDrain: false,
                                              ending: false,
                                              ended: false,
                                              finished: false,
                                              destroyed: false,
                                              decodeStrings: false,
                                              defaultEncoding: 'utf8',
                                              length: 0,
                                              writing: false,
                                              corked: 0,
                                              sync: false,
                                              bufferProcessing: false,
                                              onwrite: [Function: bound onwrite],
                                              writecb: null,
                                              writelen: 0,
                                              bufferedRequest: null,
                                              lastBufferedRequest: null,
                                              pendingcb: 0,
                                              prefinished: false,
                                              errorEmitted: false,
                                              emitClose: false,
                                              bufferedRequestCount: 0,
                                              corkedRequestsFree:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] } },
                                           writable: true,
                                           allowHalfOpen: false,
                                           _sockname: null,
                                           _pendingData: null,
                                           _pendingEncoding: '',
                                           server: null,
                                           _server: null,
                                           [Symbol(asyncId)]: 29,
                                           [Symbol(lastWriteQueueSize)]: 0,
                                           [Symbol(timeout)]: null,
                                           [Symbol(kBytesRead)]: 0,
                                           [Symbol(kBytesWritten)]: 0 },
                                        _internalId: 1,
                                        _commands:
                                         Denque {
                                           _head: 0,
                                           _tail: 0,
                                           _capacityMask: 3,
                                           _list: [ <4 empty items> ] },
                                        _command: undefined,
                                        _paused: false,
                                        _paused_packets:
                                         Denque {
                                           _head: 0,
                                           _tail: 0,
                                           _capacityMask: 3,
                                           _list: [ <4 empty items> ] },
                                        _statements:
                                         LRUCache {
                                           [Symbol(max)]: 16000,
                                           [Symbol(lengthCalculator)]: [Function: naiveLength],
                                           [Symbol(allowStale)]: false,
                                           [Symbol(maxAge)]: 0,
                                           [Symbol(dispose)]: [Function: dispose],
                                           [Symbol(noDisposeOnSet)]: false,
                                           [Symbol(cache)]: Map {},
                                           [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                           [Symbol(length)]: 0 },
                                        serverCapabilityFlags: 2181036031,
                                        authorized: true,
                                        sequenceId: 12,
                                        compressedSequenceId: 0,
                                        threadId: 432,
                                        _handshakePacket:
                                         Handshake {
                                           protocolVersion: 10,
                                           serverVersion: '5.7.25',
                                           capabilityFlags: 2181036031,
                                           connectionId: 432,
                                           authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                           authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                           characterSet: 8,
                                           statusFlags: 2 },
                                        _fatalError: null,
                                        _protocolError: null,
                                        _outOfOrderPackets: [],
                                        clientEncoding: 'utf8',
                                        packetParser:
                                         PacketParser {
                                           buffer: [],
                                           bufferLength: 0,
                                           packetHeaderLength: 4,
                                           headerLen: 0,
                                           length: 5,
                                           largePacketParts: [],
                                           firstPacketSequenceId: 0,
                                           onPacket: [Function],
                                           execute: [Function: executeStart],
                                           _flushLargePacket: [Function: _flushLargePacket4] },
                                        serverEncoding: 'latin1',
                                        connectTimeout: null,
                                        connectionId: 432 },
                                     state: 'IDLE' } },
                               tail:
                                { prev: null,
                                  next: null,
                                  data:
                                   PooledResource {
                                     creationTime: 1551536074757,
                                     lastReturnTime: 1551536078184,
                                     lastBorrowTime: 1551536078176,
                                     lastIdleTime: 1551536078184,
                                     obj:
                                      Connection {
                                        _events: [Object: null prototype] { error: [Function: errorHandler] },
                                        _eventsCount: 1,
                                        _maxListeners: undefined,
                                        config:
                                         ConnectionConfig {
                                           isServer: undefined,
                                           stream: undefined,
                                           host: 'localhost',
                                           port: 3306,
                                           localAddress: undefined,
                                           socketPath: undefined,
                                           user: 'root',
                                           password: 'password',
                                           passwordSha1: undefined,
                                           database: 'burger_db',
                                           connectTimeout: 10000,
                                           insecureAuth: false,
                                           supportBigNumbers: true,
                                           bigNumberStrings: false,
                                           decimalNumbers: false,
                                           dateStrings: false,
                                           debug: undefined,
                                           trace: true,
                                           stringifyObjects: false,
                                           timezone: '+00:00',
                                           queryFormat: undefined,
                                           pool: undefined,
                                           ssl: false,
                                           multipleStatements: false,
                                           rowsAsArray: false,
                                           namedPlaceholders: false,
                                           nestTables: undefined,
                                           typeCast: [Function: bound _typecast],
                                           maxPacketSize: 0,
                                           charsetNumber: 224,
                                           compress: false,
                                           authSwitchHandler: undefined,
                                           clientFlags: 8582093,
                                           connectAttributes: undefined,
                                           maxPreparedStatements: 16000 },
                                        stream:
                                         Socket {
                                           connecting: false,
                                           _hadError: false,
                                           _handle:
                                            TCP {
                                              reading: true,
                                              onread: [Function: onStreamRead],
                                              onconnection: null,
                                              [Symbol(owner)]: [Circular] },
                                           _parent: null,
                                           _host: 'localhost',
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: false,
                                              endEmitted: false,
                                              reading: true,
                                              sync: false,
                                              needReadable: true,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              emitClose: false,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: false,
                                              decoder: null,
                                              encoding: null },
                                           readable: true,
                                           _events:
                                            [Object: null prototype] {
                                              end: [Function: onReadableStreamEnd],
                                              error: [Function: bound _handleNetworkError],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 4,
                                           _maxListeners: undefined,
                                           _writableState:
                                            WritableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              finalCalled: false,
                                              needDrain: false,
                                              ending: false,
                                              ended: false,
                                              finished: false,
                                              destroyed: false,
                                              decodeStrings: false,
                                              defaultEncoding: 'utf8',
                                              length: 0,
                                              writing: false,
                                              corked: 0,
                                              sync: false,
                                              bufferProcessing: false,
                                              onwrite: [Function: bound onwrite],
                                              writecb: null,
                                              writelen: 0,
                                              bufferedRequest: null,
                                              lastBufferedRequest: null,
                                              pendingcb: 0,
                                              prefinished: false,
                                              errorEmitted: false,
                                              emitClose: false,
                                              bufferedRequestCount: 0,
                                              corkedRequestsFree:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] } },
                                           writable: true,
                                           allowHalfOpen: false,
                                           _sockname: null,
                                           _pendingData: null,
                                           _pendingEncoding: '',
                                           server: null,
                                           _server: null,
                                           [Symbol(asyncId)]: 29,
                                           [Symbol(lastWriteQueueSize)]: 0,
                                           [Symbol(timeout)]: null,
                                           [Symbol(kBytesRead)]: 0,
                                           [Symbol(kBytesWritten)]: 0 },
                                        _internalId: 1,
                                        _commands:
                                         Denque {
                                           _head: 0,
                                           _tail: 0,
                                           _capacityMask: 3,
                                           _list: [ <4 empty items> ] },
                                        _command: undefined,
                                        _paused: false,
                                        _paused_packets:
                                         Denque {
                                           _head: 0,
                                           _tail: 0,
                                           _capacityMask: 3,
                                           _list: [ <4 empty items> ] },
                                        _statements:
                                         LRUCache {
                                           [Symbol(max)]: 16000,
                                           [Symbol(lengthCalculator)]: [Function: naiveLength],
                                           [Symbol(allowStale)]: false,
                                           [Symbol(maxAge)]: 0,
                                           [Symbol(dispose)]: [Function: dispose],
                                           [Symbol(noDisposeOnSet)]: false,
                                           [Symbol(cache)]: Map {},
                                           [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                           [Symbol(length)]: 0 },
                                        serverCapabilityFlags: 2181036031,
                                        authorized: true,
                                        sequenceId: 12,
                                        compressedSequenceId: 0,
                                        threadId: 432,
                                        _handshakePacket:
                                         Handshake {
                                           protocolVersion: 10,
                                           serverVersion: '5.7.25',
                                           capabilityFlags: 2181036031,
                                           connectionId: 432,
                                           authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                           authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                           characterSet: 8,
                                           statusFlags: 2 },
                                        _fatalError: null,
                                        _protocolError: null,
                                        _outOfOrderPackets: [],
                                        clientEncoding: 'utf8',
                                        packetParser:
                                         PacketParser {
                                           buffer: [],
                                           bufferLength: 0,
                                           packetHeaderLength: 4,
                                           headerLen: 0,
                                           length: 5,
                                           largePacketParts: [],
                                           firstPacketSequenceId: 0,
                                           onPacket: [Function],
                                           execute: [Function: executeStart],
                                           _flushLargePacket: [Function: _flushLargePacket4] },
                                        serverEncoding: 'latin1',
                                        connectTimeout: null,
                                        connectionId: 432 },
                                     state: 'IDLE' } },
                               length: 1 } },
                         _testOnBorrowResources: Set {},
                         _testOnReturnResources: Set {},
                         _validationOperations: Set {},
                         _allObjects:
                          Set {
                            PooledResource {
                              creationTime: 1551536074757,
                              lastReturnTime: 1551536078184,
                              lastBorrowTime: 1551536078176,
                              lastIdleTime: 1551536078184,
                              obj:
                               Connection {
                                 _events: [Object: null prototype] { error: [Function: errorHandler] },
                                 _eventsCount: 1,
                                 _maxListeners: undefined,
                                 config:
                                  ConnectionConfig {
                                    isServer: undefined,
                                    stream: undefined,
                                    host: 'localhost',
                                    port: 3306,
                                    localAddress: undefined,
                                    socketPath: undefined,
                                    user: 'root',
                                    password: 'password',
                                    passwordSha1: undefined,
                                    database: 'burger_db',
                                    connectTimeout: 10000,
                                    insecureAuth: false,
                                    supportBigNumbers: true,
                                    bigNumberStrings: false,
                                    decimalNumbers: false,
                                    dateStrings: false,
                                    debug: undefined,
                                    trace: true,
                                    stringifyObjects: false,
                                    timezone: '+00:00',
                                    queryFormat: undefined,
                                    pool: undefined,
                                    ssl: false,
                                    multipleStatements: false,
                                    rowsAsArray: false,
                                    namedPlaceholders: false,
                                    nestTables: undefined,
                                    typeCast: [Function: bound _typecast],
                                    maxPacketSize: 0,
                                    charsetNumber: 224,
                                    compress: false,
                                    authSwitchHandler: undefined,
                                    clientFlags: 8582093,
                                    connectAttributes: undefined,
                                    maxPreparedStatements: 16000 },
                                 stream:
                                  Socket {
                                    connecting: false,
                                    _hadError: false,
                                    _handle:
                                     TCP {
                                       reading: true,
                                       onread: [Function: onStreamRead],
                                       onconnection: null,
                                       [Symbol(owner)]: [Circular] },
                                    _parent: null,
                                    _host: 'localhost',
                                    _readableState:
                                     ReadableState {
                                       objectMode: false,
                                       highWaterMark: 16384,
                                       buffer: BufferList { head: null, tail: null, length: 0 },
                                       length: 0,
                                       pipes: null,
                                       pipesCount: 0,
                                       flowing: true,
                                       ended: false,
                                       endEmitted: false,
                                       reading: true,
                                       sync: false,
                                       needReadable: true,
                                       emittedReadable: false,
                                       readableListening: false,
                                       resumeScheduled: false,
                                       emitClose: false,
                                       destroyed: false,
                                       defaultEncoding: 'utf8',
                                       awaitDrain: 0,
                                       readingMore: false,
                                       decoder: null,
                                       encoding: null },
                                    readable: true,
                                    _events:
                                     [Object: null prototype] {
                                       end: [Function: onReadableStreamEnd],
                                       error: [Function: bound _handleNetworkError],
                                       data: [Function],
                                       close: [Function] },
                                    _eventsCount: 4,
                                    _maxListeners: undefined,
                                    _writableState:
                                     WritableState {
                                       objectMode: false,
                                       highWaterMark: 16384,
                                       finalCalled: false,
                                       needDrain: false,
                                       ending: false,
                                       ended: false,
                                       finished: false,
                                       destroyed: false,
                                       decodeStrings: false,
                                       defaultEncoding: 'utf8',
                                       length: 0,
                                       writing: false,
                                       corked: 0,
                                       sync: false,
                                       bufferProcessing: false,
                                       onwrite: [Function: bound onwrite],
                                       writecb: null,
                                       writelen: 0,
                                       bufferedRequest: null,
                                       lastBufferedRequest: null,
                                       pendingcb: 0,
                                       prefinished: false,
                                       errorEmitted: false,
                                       emitClose: false,
                                       bufferedRequestCount: 0,
                                       corkedRequestsFree:
                                        { next: null,
                                          entry: null,
                                          finish: [Function: bound onCorkedFinish] } },
                                    writable: true,
                                    allowHalfOpen: false,
                                    _sockname: null,
                                    _pendingData: null,
                                    _pendingEncoding: '',
                                    server: null,
                                    _server: null,
                                    [Symbol(asyncId)]: 29,
                                    [Symbol(lastWriteQueueSize)]: 0,
                                    [Symbol(timeout)]: null,
                                    [Symbol(kBytesRead)]: 0,
                                    [Symbol(kBytesWritten)]: 0 },
                                 _internalId: 1,
                                 _commands:
                                  Denque {
                                    _head: 0,
                                    _tail: 0,
                                    _capacityMask: 3,
                                    _list: [ <4 empty items> ] },
                                 _command: undefined,
                                 _paused: false,
                                 _paused_packets:
                                  Denque {
                                    _head: 0,
                                    _tail: 0,
                                    _capacityMask: 3,
                                    _list: [ <4 empty items> ] },
                                 _statements:
                                  LRUCache {
                                    [Symbol(max)]: 16000,
                                    [Symbol(lengthCalculator)]: [Function: naiveLength],
                                    [Symbol(allowStale)]: false,
                                    [Symbol(maxAge)]: 0,
                                    [Symbol(dispose)]: [Function: dispose],
                                    [Symbol(noDisposeOnSet)]: false,
                                    [Symbol(cache)]: Map {},
                                    [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                    [Symbol(length)]: 0 },
                                 serverCapabilityFlags: 2181036031,
                                 authorized: true,
                                 sequenceId: 12,
                                 compressedSequenceId: 0,
                                 threadId: 432,
                                 _handshakePacket:
                                  Handshake {
                                    protocolVersion: 10,
                                    serverVersion: '5.7.25',
                                    capabilityFlags: 2181036031,
                                    connectionId: 432,
                                    authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                    authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                    characterSet: 8,
                                    statusFlags: 2 },
                                 _fatalError: null,
                                 _protocolError: null,
                                 _outOfOrderPackets: [],
                                 clientEncoding: 'utf8',
                                 packetParser:
                                  PacketParser {
                                    buffer: [],
                                    bufferLength: 0,
                                    packetHeaderLength: 4,
                                    headerLen: 0,
                                    length: 5,
                                    largePacketParts: [],
                                    firstPacketSequenceId: 0,
                                    onPacket: [Function],
                                    execute: [Function: executeStart],
                                    _flushLargePacket: [Function: _flushLargePacket4] },
                                 serverEncoding: 'latin1',
                                 connectTimeout: null,
                                 connectionId: 432 },
                              state: 'IDLE' } },
                         _resourceLoans: Map {},
                         _evictionIterator:
                          DequeIterator {
                            _list:
                             DoublyLinkedList {
                               head:
                                { prev: null,
                                  next: null,
                                  data:
                                   PooledResource {
                                     creationTime: 1551536074757,
                                     lastReturnTime: 1551536078184,
                                     lastBorrowTime: 1551536078176,
                                     lastIdleTime: 1551536078184,
                                     obj:
                                      Connection {
                                        _events: [Object: null prototype] { error: [Function: errorHandler] },
                                        _eventsCount: 1,
                                        _maxListeners: undefined,
                                        config:
                                         ConnectionConfig {
                                           isServer: undefined,
                                           stream: undefined,
                                           host: 'localhost',
                                           port: 3306,
                                           localAddress: undefined,
                                           socketPath: undefined,
                                           user: 'root',
                                           password: 'password',
                                           passwordSha1: undefined,
                                           database: 'burger_db',
                                           connectTimeout: 10000,
                                           insecureAuth: false,
                                           supportBigNumbers: true,
                                           bigNumberStrings: false,
                                           decimalNumbers: false,
                                           dateStrings: false,
                                           debug: undefined,
                                           trace: true,
                                           stringifyObjects: false,
                                           timezone: '+00:00',
                                           queryFormat: undefined,
                                           pool: undefined,
                                           ssl: false,
                                           multipleStatements: false,
                                           rowsAsArray: false,
                                           namedPlaceholders: false,
                                           nestTables: undefined,
                                           typeCast: [Function: bound _typecast],
                                           maxPacketSize: 0,
                                           charsetNumber: 224,
                                           compress: false,
                                           authSwitchHandler: undefined,
                                           clientFlags: 8582093,
                                           connectAttributes: undefined,
                                           maxPreparedStatements: 16000 },
                                        stream:
                                         Socket {
                                           connecting: false,
                                           _hadError: false,
                                           _handle:
                                            TCP {
                                              reading: true,
                                              onread: [Function: onStreamRead],
                                              onconnection: null,
                                              [Symbol(owner)]: [Circular] },
                                           _parent: null,
                                           _host: 'localhost',
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: false,
                                              endEmitted: false,
                                              reading: true,
                                              sync: false,
                                              needReadable: true,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              emitClose: false,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: false,
                                              decoder: null,
                                              encoding: null },
                                           readable: true,
                                           _events:
                                            [Object: null prototype] {
                                              end: [Function: onReadableStreamEnd],
                                              error: [Function: bound _handleNetworkError],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 4,
                                           _maxListeners: undefined,
                                           _writableState:
                                            WritableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              finalCalled: false,
                                              needDrain: false,
                                              ending: false,
                                              ended: false,
                                              finished: false,
                                              destroyed: false,
                                              decodeStrings: false,
                                              defaultEncoding: 'utf8',
                                              length: 0,
                                              writing: false,
                                              corked: 0,
                                              sync: false,
                                              bufferProcessing: false,
                                              onwrite: [Function: bound onwrite],
                                              writecb: null,
                                              writelen: 0,
                                              bufferedRequest: null,
                                              lastBufferedRequest: null,
                                              pendingcb: 0,
                                              prefinished: false,
                                              errorEmitted: false,
                                              emitClose: false,
                                              bufferedRequestCount: 0,
                                              corkedRequestsFree:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] } },
                                           writable: true,
                                           allowHalfOpen: false,
                                           _sockname: null,
                                           _pendingData: null,
                                           _pendingEncoding: '',
                                           server: null,
                                           _server: null,
                                           [Symbol(asyncId)]: 29,
                                           [Symbol(lastWriteQueueSize)]: 0,
                                           [Symbol(timeout)]: null,
                                           [Symbol(kBytesRead)]: 0,
                                           [Symbol(kBytesWritten)]: 0 },
                                        _internalId: 1,
                                        _commands:
                                         Denque {
                                           _head: 0,
                                           _tail: 0,
                                           _capacityMask: 3,
                                           _list: [ <4 empty items> ] },
                                        _command: undefined,
                                        _paused: false,
                                        _paused_packets:
                                         Denque {
                                           _head: 0,
                                           _tail: 0,
                                           _capacityMask: 3,
                                           _list: [ <4 empty items> ] },
                                        _statements:
                                         LRUCache {
                                           [Symbol(max)]: 16000,
                                           [Symbol(lengthCalculator)]: [Function: naiveLength],
                                           [Symbol(allowStale)]: false,
                                           [Symbol(maxAge)]: 0,
                                           [Symbol(dispose)]: [Function: dispose],
                                           [Symbol(noDisposeOnSet)]: false,
                                           [Symbol(cache)]: Map {},
                                           [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                           [Symbol(length)]: 0 },
                                        serverCapabilityFlags: 2181036031,
                                        authorized: true,
                                        sequenceId: 12,
                                        compressedSequenceId: 0,
                                        threadId: 432,
                                        _handshakePacket:
                                         Handshake {
                                           protocolVersion: 10,
                                           serverVersion: '5.7.25',
                                           capabilityFlags: 2181036031,
                                           connectionId: 432,
                                           authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                           authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                           characterSet: 8,
                                           statusFlags: 2 },
                                        _fatalError: null,
                                        _protocolError: null,
                                        _outOfOrderPackets: [],
                                        clientEncoding: 'utf8',
                                        packetParser:
                                         PacketParser {
                                           buffer: [],
                                           bufferLength: 0,
                                           packetHeaderLength: 4,
                                           headerLen: 0,
                                           length: 5,
                                           largePacketParts: [],
                                           firstPacketSequenceId: 0,
                                           onPacket: [Function],
                                           execute: [Function: executeStart],
                                           _flushLargePacket: [Function: _flushLargePacket4] },
                                        serverEncoding: 'latin1',
                                        connectTimeout: null,
                                        connectionId: 432 },
                                     state: 'IDLE' } },
                               tail:
                                { prev: null,
                                  next: null,
                                  data:
                                   PooledResource {
                                     creationTime: 1551536074757,
                                     lastReturnTime: 1551536078184,
                                     lastBorrowTime: 1551536078176,
                                     lastIdleTime: 1551536078184,
                                     obj:
                                      Connection {
                                        _events: [Object: null prototype] { error: [Function: errorHandler] },
                                        _eventsCount: 1,
                                        _maxListeners: undefined,
                                        config:
                                         ConnectionConfig {
                                           isServer: undefined,
                                           stream: undefined,
                                           host: 'localhost',
                                           port: 3306,
                                           localAddress: undefined,
                                           socketPath: undefined,
                                           user: 'root',
                                           password: 'password',
                                           passwordSha1: undefined,
                                           database: 'burger_db',
                                           connectTimeout: 10000,
                                           insecureAuth: false,
                                           supportBigNumbers: true,
                                           bigNumberStrings: false,
                                           decimalNumbers: false,
                                           dateStrings: false,
                                           debug: undefined,
                                           trace: true,
                                           stringifyObjects: false,
                                           timezone: '+00:00',
                                           queryFormat: undefined,
                                           pool: undefined,
                                           ssl: false,
                                           multipleStatements: false,
                                           rowsAsArray: false,
                                           namedPlaceholders: false,
                                           nestTables: undefined,
                                           typeCast: [Function: bound _typecast],
                                           maxPacketSize: 0,
                                           charsetNumber: 224,
                                           compress: false,
                                           authSwitchHandler: undefined,
                                           clientFlags: 8582093,
                                           connectAttributes: undefined,
                                           maxPreparedStatements: 16000 },
                                        stream:
                                         Socket {
                                           connecting: false,
                                           _hadError: false,
                                           _handle:
                                            TCP {
                                              reading: true,
                                              onread: [Function: onStreamRead],
                                              onconnection: null,
                                              [Symbol(owner)]: [Circular] },
                                           _parent: null,
                                           _host: 'localhost',
                                           _readableState:
                                            ReadableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              buffer: BufferList { head: null, tail: null, length: 0 },
                                              length: 0,
                                              pipes: null,
                                              pipesCount: 0,
                                              flowing: true,
                                              ended: false,
                                              endEmitted: false,
                                              reading: true,
                                              sync: false,
                                              needReadable: true,
                                              emittedReadable: false,
                                              readableListening: false,
                                              resumeScheduled: false,
                                              emitClose: false,
                                              destroyed: false,
                                              defaultEncoding: 'utf8',
                                              awaitDrain: 0,
                                              readingMore: false,
                                              decoder: null,
                                              encoding: null },
                                           readable: true,
                                           _events:
                                            [Object: null prototype] {
                                              end: [Function: onReadableStreamEnd],
                                              error: [Function: bound _handleNetworkError],
                                              data: [Function],
                                              close: [Function] },
                                           _eventsCount: 4,
                                           _maxListeners: undefined,
                                           _writableState:
                                            WritableState {
                                              objectMode: false,
                                              highWaterMark: 16384,
                                              finalCalled: false,
                                              needDrain: false,
                                              ending: false,
                                              ended: false,
                                              finished: false,
                                              destroyed: false,
                                              decodeStrings: false,
                                              defaultEncoding: 'utf8',
                                              length: 0,
                                              writing: false,
                                              corked: 0,
                                              sync: false,
                                              bufferProcessing: false,
                                              onwrite: [Function: bound onwrite],
                                              writecb: null,
                                              writelen: 0,
                                              bufferedRequest: null,
                                              lastBufferedRequest: null,
                                              pendingcb: 0,
                                              prefinished: false,
                                              errorEmitted: false,
                                              emitClose: false,
                                              bufferedRequestCount: 0,
                                              corkedRequestsFree:
                                               { next: null,
                                                 entry: null,
                                                 finish: [Function: bound onCorkedFinish] } },
                                           writable: true,
                                           allowHalfOpen: false,
                                           _sockname: null,
                                           _pendingData: null,
                                           _pendingEncoding: '',
                                           server: null,
                                           _server: null,
                                           [Symbol(asyncId)]: 29,
                                           [Symbol(lastWriteQueueSize)]: 0,
                                           [Symbol(timeout)]: null,
                                           [Symbol(kBytesRead)]: 0,
                                           [Symbol(kBytesWritten)]: 0 },
                                        _internalId: 1,
                                        _commands:
                                         Denque {
                                           _head: 0,
                                           _tail: 0,
                                           _capacityMask: 3,
                                           _list: [ <4 empty items> ] },
                                        _command: undefined,
                                        _paused: false,
                                        _paused_packets:
                                         Denque {
                                           _head: 0,
                                           _tail: 0,
                                           _capacityMask: 3,
                                           _list: [ <4 empty items> ] },
                                        _statements:
                                         LRUCache {
                                           [Symbol(max)]: 16000,
                                           [Symbol(lengthCalculator)]: [Function: naiveLength],
                                           [Symbol(allowStale)]: false,
                                           [Symbol(maxAge)]: 0,
                                           [Symbol(dispose)]: [Function: dispose],
                                           [Symbol(noDisposeOnSet)]: false,
                                           [Symbol(cache)]: Map {},
                                           [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                           [Symbol(length)]: 0 },
                                        serverCapabilityFlags: 2181036031,
                                        authorized: true,
                                        sequenceId: 12,
                                        compressedSequenceId: 0,
                                        threadId: 432,
                                        _handshakePacket:
                                         Handshake {
                                           protocolVersion: 10,
                                           serverVersion: '5.7.25',
                                           capabilityFlags: 2181036031,
                                           connectionId: 432,
                                           authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                           authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                           characterSet: 8,
                                           statusFlags: 2 },
                                        _fatalError: null,
                                        _protocolError: null,
                                        _outOfOrderPackets: [],
                                        clientEncoding: 'utf8',
                                        packetParser:
                                         PacketParser {
                                           buffer: [],
                                           bufferLength: 0,
                                           packetHeaderLength: 4,
                                           headerLen: 0,
                                           length: 5,
                                           largePacketParts: [],
                                           firstPacketSequenceId: 0,
                                           onPacket: [Function],
                                           execute: [Function: executeStart],
                                           _flushLargePacket: [Function: _flushLargePacket4] },
                                        serverEncoding: 'latin1',
                                        connectTimeout: null,
                                        connectionId: 432 },
                                     state: 'IDLE' } },
                               length: 1 },
                            _direction: 'next',
                            _startPosition: 'head',
                            _started: false,
                            _cursor: null,
                            _done: false },
                         _evictor: DefaultEvictor {},
                         _scheduledEviction:
                          Timeout {
                            _idleTimeout: 10000,
                            _idlePrev: [TimersList],
                            _idleNext: [TimersList],
                            _idleStart: 493,
                            _onTimeout: [Function],
                            _timerArgs: undefined,
                            _repeat: null,
                            _destroyed: false,
                            [Symbol(refed)]: true,
                            [Symbol(asyncId)]: 27,
                            [Symbol(triggerId)]: 25 } },
                      lib:
                       { createConnection: [Function],
                         connect: [Function],
                         Connection: [Function: Connection],
                         createPool: [Function],
                         createPoolCluster: [Function],
                         createQuery: [Function: createQuery],
                         Pool: [Function: Pool],
                         createServer: [Function],
                         PoolConnection:
                          { [Function: PoolConnection] statementKey: [Function: statementKey] },
                         escape: [Function: escape],
                         escapeId: [Function: escapeId],
                         format: [Function: format],
                         raw: [Function: raw],
                         createConnectionPromise: [Getter],
                         createPoolPromise: [Getter],
                         createPoolClusterPromise: [Getter],
                         Types: [Getter],
                         Charsets: [Getter],
                         CharsetToEncoding: [Getter],
                         setMaxParserCache: [Function],
                         clearParserCache: [Function] } },
                   QueryGenerator:
                    { dialect: 'mysql',
                      OperatorMap:
                       { [Symbol(eq)]: '=',
                         [Symbol(ne)]: '!=',
                         [Symbol(gte)]: '>=',
                         [Symbol(gt)]: '>',
                         [Symbol(lte)]: '<=',
                         [Symbol(lt)]: '<',
                         [Symbol(not)]: 'IS NOT',
                         [Symbol(is)]: 'IS',
                         [Symbol(in)]: 'IN',
                         [Symbol(notIn)]: 'NOT IN',
                         [Symbol(like)]: 'LIKE',
                         [Symbol(notLike)]: 'NOT LIKE',
                         [Symbol(iLike)]: 'ILIKE',
                         [Symbol(notILike)]: 'NOT ILIKE',
                         [Symbol(regexp)]: 'REGEXP',
                         [Symbol(notRegexp)]: 'NOT REGEXP',
                         [Symbol(iRegexp)]: '~*',
                         [Symbol(notIRegexp)]: '!~*',
                         [Symbol(between)]: 'BETWEEN',
                         [Symbol(notBetween)]: 'NOT BETWEEN',
                         [Symbol(overlap)]: '&&',
                         [Symbol(contains)]: '@>',
                         [Symbol(contained)]: '<@',
                         [Symbol(adjacent)]: '-|-',
                         [Symbol(strictLeft)]: '<<',
                         [Symbol(strictRight)]: '>>',
                         [Symbol(noExtendRight)]: '&<',
                         [Symbol(noExtendLeft)]: '&>',
                         [Symbol(any)]: 'ANY',
                         [Symbol(all)]: 'ALL',
                         [Symbol(and)]: ' AND ',
                         [Symbol(or)]: ' OR ',
                         [Symbol(col)]: 'COL',
                         [Symbol(placeholder)]: '$$PLACEHOLDER$$',
                         [Symbol(raw)]: 'DEPRECATED' },
                      createSchema: [Function: createSchema],
                      showSchemasQuery: [Function: showSchemasQuery],
                      versionQuery: [Function: versionQuery],
                      createTableQuery: [Function: createTableQuery],
                      showTablesQuery: [Function: showTablesQuery],
                      addColumnQuery: [Function: addColumnQuery],
                      removeColumnQuery: [Function: removeColumnQuery],
                      changeColumnQuery: [Function: changeColumnQuery],
                      renameColumnQuery: [Function: renameColumnQuery],
                      handleSequelizeMethod: [Function: handleSequelizeMethod],
                      _toJSONValue: [Function: _toJSONValue],
                      upsertQuery: [Function: upsertQuery],
                      deleteQuery: [Function: deleteQuery],
                      showIndexesQuery: [Function: showIndexesQuery],
                      showConstraintsQuery: [Function: showConstraintsQuery],
                      removeIndexQuery: [Function: removeIndexQuery],
                      attributeToSQL: [Function: attributeToSQL],
                      attributesToSQL: [Function: attributesToSQL],
                      quoteIdentifier: [Function: quoteIdentifier],
                      _checkValidJsonStatement: [Function: _checkValidJsonStatement],
                      jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
                      _getForeignKeysQueryFields: [Function: _getForeignKeysQueryFields],
                      getForeignKeysQuery: [Function: getForeignKeysQuery],
                      getForeignKeyQuery: [Function: getForeignKeyQuery],
                      dropForeignKeyQuery: [Function: dropForeignKeyQuery],
                      _templateSettings:
                       { escape: /<%-([\s\S]+?)%>/g,
                         evaluate: /<%([\s\S]+?)%>/g,
                         interpolate: /<%=([\s\S]+?)%>/g,
                         variable: '',
                         imports:
                          { _:
                             { [Function: lodash]
                               templateSettings: [Circular],
                               after: [Function: after],
                               ary: [Function: ary],
                               assign: [Function],
                               assignIn: [Function],
                               assignInWith: [Function],
                               assignWith: [Function],
                               at: [Function],
                               before: [Function: before],
                               bind: { [Function] placeholder: [Circular] },
                               bindAll: [Function],
                               bindKey: { [Function] placeholder: [Circular] },
                               castArray: [Function: castArray],
                               chain: [Function: chain],
                               chunk: [Function: chunk],
                               compact: [Function: compact],
                               concat: [Function: concat],
                               cond: [Function: cond],
                               conforms: [Function: conforms],
                               constant: [Function: constant],
                               countBy: [Function],
                               create: [Function: create],
                               curry: { [Function: curry] placeholder: [Circular] },
                               curryRight: { [Function: curryRight] placeholder: [Circular] },
                               debounce: [Function: debounce],
                               defaults: [Function],
                               defaultsDeep: [Function],
                               defer: [Function],
                               delay: [Function],
                               difference: [Function],
                               differenceBy: [Function],
                               differenceWith: [Function],
                               drop: [Function: drop],
                               dropRight: [Function: dropRight],
                               dropRightWhile: [Function: dropRightWhile],
                               dropWhile: [Function: dropWhile],
                               fill: [Function: fill],
                               filter: [Function: filter],
                               flatMap: [Function: flatMap],
                               flatMapDeep: [Function: flatMapDeep],
                               flatMapDepth: [Function: flatMapDepth],
                               flatten: [Function: flatten],
                               flattenDeep: [Function: flattenDeep],
                               flattenDepth: [Function: flattenDepth],
                               flip: [Function: flip],
                               flow: [Function],
                               flowRight: [Function],
                               fromPairs: [Function: fromPairs],
                               functions: [Function: functions],
                               functionsIn: [Function: functionsIn],
                               groupBy: [Function],
                               initial: [Function: initial],
                               intersection: [Function],
                               intersectionBy: [Function],
                               intersectionWith: [Function],
                               invert: [Function],
                               invertBy: [Function],
                               invokeMap: [Function],
                               iteratee: [Function: iteratee],
                               keyBy: [Function],
                               keys: [Function: keys],
                               keysIn: [Function: keysIn],
                               map: [Function: map],
                               mapKeys: [Function: mapKeys],
                               mapValues: [Function: mapValues],
                               matches: [Function: matches],
                               matchesProperty: [Function: matchesProperty],
                               memoize: { [Function: memoize] Cache: [Function: MapCache] },
                               merge: [Function],
                               mergeWith: [Function],
                               method: [Function],
                               methodOf: [Function],
                               mixin: [Function: mixin],
                               negate: [Function: negate],
                               nthArg: [Function: nthArg],
                               omit: [Function],
                               omitBy: [Function: omitBy],
                               once: [Function: once],
                               orderBy: [Function: orderBy],
                               over: [Function],
                               overArgs: [Function],
                               overEvery: [Function],
                               overSome: [Function],
                               partial: { [Function] placeholder: [Circular] },
                               partialRight: { [Function] placeholder: [Circular] },
                               partition: [Function],
                               pick: [Function],
                               pickBy: [Function: pickBy],
                               property: [Function: property],
                               propertyOf: [Function: propertyOf],
                               pull: [Function],
                               pullAll: [Function: pullAll],
                               pullAllBy: [Function: pullAllBy],
                               pullAllWith: [Function: pullAllWith],
                               pullAt: [Function],
                               range: [Function],
                               rangeRight: [Function],
                               rearg: [Function],
                               reject: [Function: reject],
                               remove: [Function: remove],
                               rest: [Function: rest],
                               reverse: [Function: reverse],
                               sampleSize: [Function: sampleSize],
                               set: [Function: set],
                               setWith: [Function: setWith],
                               shuffle: [Function: shuffle],
                               slice: [Function: slice],
                               sortBy: [Function],
                               sortedUniq: [Function: sortedUniq],
                               sortedUniqBy: [Function: sortedUniqBy],
                               split: [Function: split],
                               spread: [Function: spread],
                               tail: [Function: tail],
                               take: [Function: take],
                               takeRight: [Function: takeRight],
                               takeRightWhile: [Function: takeRightWhile],
                               takeWhile: [Function: takeWhile],
                               tap: [Function: tap],
                               throttle: [Function: throttle],
                               thru: [Function: thru],
                               toArray: [Function: toArray],
                               toPairs: [Function],
                               toPairsIn: [Function],
                               toPath: [Function: toPath],
                               toPlainObject: [Function: toPlainObject],
                               transform: [Function: transform],
                               unary: [Function: unary],
                               union: [Function],
                               unionBy: [Function],
                               unionWith: [Function],
                               uniq: [Function: uniq],
                               uniqBy: [Function: uniqBy],
                               uniqWith: [Function: uniqWith],
                               unset: [Function: unset],
                               unzip: [Function: unzip],
                               unzipWith: [Function: unzipWith],
                               update: [Function: update],
                               updateWith: [Function: updateWith],
                               values: [Function: values],
                               valuesIn: [Function: valuesIn],
                               without: [Function],
                               words: [Function: words],
                               wrap: [Function: wrap],
                               xor: [Function],
                               xorBy: [Function],
                               xorWith: [Function],
                               zip: [Function],
                               zipObject: [Function: zipObject],
                               zipObjectDeep: [Function: zipObjectDeep],
                               zipWith: [Function],
                               entries: [Function],
                               entriesIn: [Function],
                               extend: [Function],
                               extendWith: [Function],
                               add: [Function],
                               attempt: [Function],
                               camelCase: [Function],
                               capitalize: [Function: capitalize],
                               ceil: [Function],
                               clamp: [Function: clamp],
                               clone: [Function: clone],
                               cloneDeep: [Function: cloneDeep],
                               cloneDeepWith: [Function: cloneDeepWith],
                               cloneWith: [Function: cloneWith],
                               conformsTo: [Function: conformsTo],
                               deburr: [Function: deburr],
                               defaultTo: [Function: defaultTo],
                               divide: [Function],
                               endsWith: [Function: endsWith],
                               eq: [Function: eq],
                               escape: [Function: escape],
                               escapeRegExp: [Function: escapeRegExp],
                               every: [Function: every],
                               find: [Function],
                               findIndex: [Function: findIndex],
                               findKey: [Function: findKey],
                               findLast: [Function],
                               findLastIndex: [Function: findLastIndex],
                               findLastKey: [Function: findLastKey],
                               floor: [Function],
                               forEach: [Function: forEach],
                               forEachRight: [Function: forEachRight],
                               forIn: [Function: forIn],
                               forInRight: [Function: forInRight],
                               forOwn: [Function: forOwn],
                               forOwnRight: [Function: forOwnRight],
                               get: [Function: get],
                               gt: [Function],
                               gte: [Function],
                               has: [Function: has],
                               hasIn: [Function: hasIn],
                               head: [Function: head],
                               identity: [Function: identity],
                               includes: [Function: includes],
                               indexOf: [Function: indexOf],
                               inRange: [Function: inRange],
                               invoke: [Function],
                               isArguments: [Function: baseIsArguments],
                               isArray: [Function: isArray],
                               isArrayBuffer: [Function],
                               isArrayLike: [Function: isArrayLike],
                               isArrayLikeObject: [Function: isArrayLikeObject],
                               isBoolean: [Function: isBoolean],
                               isBuffer: [Function: isBuffer],
                               isDate: [Function],
                               isElement: [Function: isElement],
                               isEmpty: [Function: isEmpty],
                               isEqual: [Function: isEqual],
                               isEqualWith: [Function: isEqualWith],
                               isError: [Function: isError],
                               isFinite: [Function: isFinite],
                               isFunction: [Function: isFunction],
                               isInteger: [Function: isInteger],
                               isLength: [Function: isLength],
                               isMap: [Function],
                               isMatch: [Function: isMatch],
                               isMatchWith: [Function: isMatchWith],
                               isNaN: [Function: isNaN],
                               isNative: [Function: isNative],
                               isNil: [Function: isNil],
                               isNull: [Function: isNull],
                               isNumber: [Function: isNumber],
                               isObject: [Function: isObject],
                               isObjectLike: [Function: isObjectLike],
                               isPlainObject: [Function: isPlainObject],
                               isRegExp: [Function],
                               isSafeInteger: [Function: isSafeInteger],
                               isSet: [Function],
                               isString: [Function: isString],
                               isSymbol: [Function: isSymbol],
                               isTypedArray: [Function],
                               isUndefined: [Function: isUndefined],
                               isWeakMap: [Function: isWeakMap],
                               isWeakSet: [Function: isWeakSet],
                               join: [Function: join],
                               kebabCase: [Function],
                               last: [Function: last],
                               lastIndexOf: [Function: lastIndexOf],
                               lowerCase: [Function],
                               lowerFirst: [Function],
                               lt: [Function],
                               lte: [Function],
                               max: [Function: max],
                               maxBy: [Function: maxBy],
                               mean: [Function: mean],
                               meanBy: [Function: meanBy],
                               min: [Function: min],
                               minBy: [Function: minBy],
                               stubArray: [Function: stubArray],
                               stubFalse: [Function: stubFalse],
                               stubObject: [Function: stubObject],
                               stubString: [Function: stubString],
                               stubTrue: [Function: stubTrue],
                               multiply: [Function],
                               nth: [Function: nth],
                               noConflict: [Function: noConflict],
                               noop: [Function: noop],
                               now: [Function],
                               pad: [Function: pad],
                               padEnd: [Function: padEnd],
                               padStart: [Function: padStart],
                               parseInt: [Function: parseInt],
                               random: [Function: random],
                               reduce: [Function: reduce],
                               reduceRight: [Function: reduceRight],
                               repeat: [Function: repeat],
                               replace: [Function: replace],
                               result: [Function: result],
                               round: [Function],
                               runInContext: [Function: runInContext],
                               sample: [Function: sample],
                               size: [Function: size],
                               snakeCase: [Function],
                               some: [Function: some],
                               sortedIndex: [Function: sortedIndex],
                               sortedIndexBy: [Function: sortedIndexBy],
                               sortedIndexOf: [Function: sortedIndexOf],
                               sortedLastIndex: [Function: sortedLastIndex],
                               sortedLastIndexBy: [Function: sortedLastIndexBy],
                               sortedLastIndexOf: [Function: sortedLastIndexOf],
                               startCase: [Function],
                               startsWith: [Function: startsWith],
                               subtract: [Function],
                               sum: [Function: sum],
                               sumBy: [Function: sumBy],
                               template: [Function: template],
                               times: [Function: times],
                               toFinite: [Function: toFinite],
                               toInteger: [Function: toInteger],
                               toLength: [Function: toLength],
                               toLower: [Function: toLower],
                               toNumber: [Function: toNumber],
                               toSafeInteger: [Function: toSafeInteger],
                               toString: [Function: toString],
                               toUpper: [Function: toUpper],
                               trim: [Function: trim],
                               trimEnd: [Function: trimEnd],
                               trimStart: [Function: trimStart],
                               truncate: [Function: truncate],
                               unescape: [Function: unescape],
                               uniqueId: [Function: uniqueId],
                               upperCase: [Function],
                               upperFirst: [Function],
                               each: [Function: forEach],
                               eachRight: [Function: forEachRight],
                               first: [Function: head],
                               VERSION: '4.17.11' } } },
                      options:
                       { dialect: 'mysql',
                         dialectModulePath: null,
                         host: 'localhost',
                         protocol: 'tcp',
                         define:
                          { underscored: false, freezeTableName: true, timestamps: true },
                         query: {},
                         sync: {},
                         timezone: '+00:00',
                         logging: false,
                         omitNull: false,
                         native: false,
                         replication: false,
                         ssl: undefined,
                         pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
                         quoteIdentifiers: true,
                         hooks: {},
                         retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
                         transactionType: 'DEFERRED',
                         isolationLevel: null,
                         databaseVersion: '5.7.25',
                         typeValidation: false,
                         benchmark: false,
                         operatorsAliases: false,
                         username: 'root',
                         password: 'password',
                         database: 'burger_db',
                         port: 3306 },
                      extractTableDetails: [Function: extractTableDetails],
                      addSchema: [Function: addSchema],
                      dropSchema: [Function: dropSchema],
                      describeTableQuery: [Function: describeTableQuery],
                      dropTableQuery: [Function: dropTableQuery],
                      renameTableQuery: [Function: renameTableQuery],
                      insertQuery: [Function: insertQuery],
                      bulkInsertQuery: [Function: bulkInsertQuery],
                      updateQuery: [Function: updateQuery],
                      arithmeticQuery: [Function: arithmeticQuery],
                      nameIndexes: [Function: nameIndexes],
                      addIndexQuery: [Function: addIndexQuery],
                      addConstraintQuery: [Function: addConstraintQuery],
                      getConstraintSnippet: [Function: getConstraintSnippet],
                      removeConstraintQuery: [Function: removeConstraintQuery],
                      quoteTable: [Function: quoteTable],
                      quote: [Function: quote],
                      quoteIdentifiers: [Function: quoteIdentifiers],
                      escape: [Function: escape],
                      selectQuery: [Function: selectQuery],
                      escapeAttributes: [Function: escapeAttributes],
                      generateInclude: [Function: generateInclude],
                      generateJoin: [Function: generateJoin],
                      generateThroughJoin: [Function: generateThroughJoin],
                      _generateSubQueryFilter: [Function: _generateSubQueryFilter],
                      _getRequiredClosure: [Function: _getRequiredClosure],
                      getQueryOrders: [Function: getQueryOrders],
                      selectFromTableFragment: [Function: selectFromTableFragment],
                      setAutocommitQuery: [Function: setAutocommitQuery],
                      setIsolationLevelQuery: [Function: setIsolationLevelQuery],
                      generateTransactionId: [Function: generateTransactionId],
                      startTransactionQuery: [Function: startTransactionQuery],
                      deferConstraintsQuery: [Function: deferConstraintsQuery],
                      setConstraintQuery: [Function: setConstraintQuery],
                      setDeferredQuery: [Function: setDeferredQuery],
                      setImmediateQuery: [Function: setImmediateQuery],
                      commitTransactionQuery: [Function: commitTransactionQuery],
                      rollbackTransactionQuery: [Function: rollbackTransactionQuery],
                      addLimitAndOffset: [Function: addLimitAndOffset],
                      whereQuery: [Function: whereQuery],
                      whereItemsQuery: [Function: whereItemsQuery],
                      OperatorsAliasMap: false,
                      setOperatorsAliases: [Function: setOperatorsAliases],
                      whereItemQuery: [Function: whereItemQuery],
                      _findField: [Function: _findField],
                      _replaceAliases: [Function: _replaceAliases],
                      _whereGroupBind: [Function: _whereGroupBind],
                      _whereBind: [Function: _whereBind],
                      _whereJSON: [Function: _whereJSON],
                      _traverseJSON: [Function: _traverseJSON],
                      _castKey: [Function: _castKey],
                      _getJsonCast: [Function: _getJsonCast],
                      _joinKeyValue: [Function: _joinKeyValue],
                      _getSafeKey: [Function: _getSafeKey],
                      _prefixKey: [Function: _prefixKey],
                      _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
                      getWhereConditions: [Function: getWhereConditions],
                      parseConditionObject: [Function: parseConditionObject],
                      isIdentifierQuoted: [Function: isIdentifierQuoted],
                      booleanValue: [Function: booleanValue],
                      _dialect: [Circular],
                      sequelize: [Circular],
                      typeValidation: undefined } },
                queryInterface:
                 QueryInterface {
                   sequelize: [Circular],
                   QueryGenerator:
                    { dialect: 'mysql',
                      OperatorMap:
                       { [Symbol(eq)]: '=',
                         [Symbol(ne)]: '!=',
                         [Symbol(gte)]: '>=',
                         [Symbol(gt)]: '>',
                         [Symbol(lte)]: '<=',
                         [Symbol(lt)]: '<',
                         [Symbol(not)]: 'IS NOT',
                         [Symbol(is)]: 'IS',
                         [Symbol(in)]: 'IN',
                         [Symbol(notIn)]: 'NOT IN',
                         [Symbol(like)]: 'LIKE',
                         [Symbol(notLike)]: 'NOT LIKE',
                         [Symbol(iLike)]: 'ILIKE',
                         [Symbol(notILike)]: 'NOT ILIKE',
                         [Symbol(regexp)]: 'REGEXP',
                         [Symbol(notRegexp)]: 'NOT REGEXP',
                         [Symbol(iRegexp)]: '~*',
                         [Symbol(notIRegexp)]: '!~*',
                         [Symbol(between)]: 'BETWEEN',
                         [Symbol(notBetween)]: 'NOT BETWEEN',
                         [Symbol(overlap)]: '&&',
                         [Symbol(contains)]: '@>',
                         [Symbol(contained)]: '<@',
                         [Symbol(adjacent)]: '-|-',
                         [Symbol(strictLeft)]: '<<',
                         [Symbol(strictRight)]: '>>',
                         [Symbol(noExtendRight)]: '&<',
                         [Symbol(noExtendLeft)]: '&>',
                         [Symbol(any)]: 'ANY',
                         [Symbol(all)]: 'ALL',
                         [Symbol(and)]: ' AND ',
                         [Symbol(or)]: ' OR ',
                         [Symbol(col)]: 'COL',
                         [Symbol(placeholder)]: '$$PLACEHOLDER$$',
                         [Symbol(raw)]: 'DEPRECATED' },
                      createSchema: [Function: createSchema],
                      showSchemasQuery: [Function: showSchemasQuery],
                      versionQuery: [Function: versionQuery],
                      createTableQuery: [Function: createTableQuery],
                      showTablesQuery: [Function: showTablesQuery],
                      addColumnQuery: [Function: addColumnQuery],
                      removeColumnQuery: [Function: removeColumnQuery],
                      changeColumnQuery: [Function: changeColumnQuery],
                      renameColumnQuery: [Function: renameColumnQuery],
                      handleSequelizeMethod: [Function: handleSequelizeMethod],
                      _toJSONValue: [Function: _toJSONValue],
                      upsertQuery: [Function: upsertQuery],
                      deleteQuery: [Function: deleteQuery],
                      showIndexesQuery: [Function: showIndexesQuery],
                      showConstraintsQuery: [Function: showConstraintsQuery],
                      removeIndexQuery: [Function: removeIndexQuery],
                      attributeToSQL: [Function: attributeToSQL],
                      attributesToSQL: [Function: attributesToSQL],
                      quoteIdentifier: [Function: quoteIdentifier],
                      _checkValidJsonStatement: [Function: _checkValidJsonStatement],
                      jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
                      _getForeignKeysQueryFields: [Function: _getForeignKeysQueryFields],
                      getForeignKeysQuery: [Function: getForeignKeysQuery],
                      getForeignKeyQuery: [Function: getForeignKeyQuery],
                      dropForeignKeyQuery: [Function: dropForeignKeyQuery],
                      _templateSettings:
                       { escape: /<%-([\s\S]+?)%>/g,
                         evaluate: /<%([\s\S]+?)%>/g,
                         interpolate: /<%=([\s\S]+?)%>/g,
                         variable: '',
                         imports:
                          { _:
                             { [Function: lodash]
                               templateSettings: [Circular],
                               after: [Function: after],
                               ary: [Function: ary],
                               assign: [Function],
                               assignIn: [Function],
                               assignInWith: [Function],
                               assignWith: [Function],
                               at: [Function],
                               before: [Function: before],
                               bind: { [Function] placeholder: [Circular] },
                               bindAll: [Function],
                               bindKey: { [Function] placeholder: [Circular] },
                               castArray: [Function: castArray],
                               chain: [Function: chain],
                               chunk: [Function: chunk],
                               compact: [Function: compact],
                               concat: [Function: concat],
                               cond: [Function: cond],
                               conforms: [Function: conforms],
                               constant: [Function: constant],
                               countBy: [Function],
                               create: [Function: create],
                               curry: { [Function: curry] placeholder: [Circular] },
                               curryRight: { [Function: curryRight] placeholder: [Circular] },
                               debounce: [Function: debounce],
                               defaults: [Function],
                               defaultsDeep: [Function],
                               defer: [Function],
                               delay: [Function],
                               difference: [Function],
                               differenceBy: [Function],
                               differenceWith: [Function],
                               drop: [Function: drop],
                               dropRight: [Function: dropRight],
                               dropRightWhile: [Function: dropRightWhile],
                               dropWhile: [Function: dropWhile],
                               fill: [Function: fill],
                               filter: [Function: filter],
                               flatMap: [Function: flatMap],
                               flatMapDeep: [Function: flatMapDeep],
                               flatMapDepth: [Function: flatMapDepth],
                               flatten: [Function: flatten],
                               flattenDeep: [Function: flattenDeep],
                               flattenDepth: [Function: flattenDepth],
                               flip: [Function: flip],
                               flow: [Function],
                               flowRight: [Function],
                               fromPairs: [Function: fromPairs],
                               functions: [Function: functions],
                               functionsIn: [Function: functionsIn],
                               groupBy: [Function],
                               initial: [Function: initial],
                               intersection: [Function],
                               intersectionBy: [Function],
                               intersectionWith: [Function],
                               invert: [Function],
                               invertBy: [Function],
                               invokeMap: [Function],
                               iteratee: [Function: iteratee],
                               keyBy: [Function],
                               keys: [Function: keys],
                               keysIn: [Function: keysIn],
                               map: [Function: map],
                               mapKeys: [Function: mapKeys],
                               mapValues: [Function: mapValues],
                               matches: [Function: matches],
                               matchesProperty: [Function: matchesProperty],
                               memoize: { [Function: memoize] Cache: [Function: MapCache] },
                               merge: [Function],
                               mergeWith: [Function],
                               method: [Function],
                               methodOf: [Function],
                               mixin: [Function: mixin],
                               negate: [Function: negate],
                               nthArg: [Function: nthArg],
                               omit: [Function],
                               omitBy: [Function: omitBy],
                               once: [Function: once],
                               orderBy: [Function: orderBy],
                               over: [Function],
                               overArgs: [Function],
                               overEvery: [Function],
                               overSome: [Function],
                               partial: { [Function] placeholder: [Circular] },
                               partialRight: { [Function] placeholder: [Circular] },
                               partition: [Function],
                               pick: [Function],
                               pickBy: [Function: pickBy],
                               property: [Function: property],
                               propertyOf: [Function: propertyOf],
                               pull: [Function],
                               pullAll: [Function: pullAll],
                               pullAllBy: [Function: pullAllBy],
                               pullAllWith: [Function: pullAllWith],
                               pullAt: [Function],
                               range: [Function],
                               rangeRight: [Function],
                               rearg: [Function],
                               reject: [Function: reject],
                               remove: [Function: remove],
                               rest: [Function: rest],
                               reverse: [Function: reverse],
                               sampleSize: [Function: sampleSize],
                               set: [Function: set],
                               setWith: [Function: setWith],
                               shuffle: [Function: shuffle],
                               slice: [Function: slice],
                               sortBy: [Function],
                               sortedUniq: [Function: sortedUniq],
                               sortedUniqBy: [Function: sortedUniqBy],
                               split: [Function: split],
                               spread: [Function: spread],
                               tail: [Function: tail],
                               take: [Function: take],
                               takeRight: [Function: takeRight],
                               takeRightWhile: [Function: takeRightWhile],
                               takeWhile: [Function: takeWhile],
                               tap: [Function: tap],
                               throttle: [Function: throttle],
                               thru: [Function: thru],
                               toArray: [Function: toArray],
                               toPairs: [Function],
                               toPairsIn: [Function],
                               toPath: [Function: toPath],
                               toPlainObject: [Function: toPlainObject],
                               transform: [Function: transform],
                               unary: [Function: unary],
                               union: [Function],
                               unionBy: [Function],
                               unionWith: [Function],
                               uniq: [Function: uniq],
                               uniqBy: [Function: uniqBy],
                               uniqWith: [Function: uniqWith],
                               unset: [Function: unset],
                               unzip: [Function: unzip],
                               unzipWith: [Function: unzipWith],
                               update: [Function: update],
                               updateWith: [Function: updateWith],
                               values: [Function: values],
                               valuesIn: [Function: valuesIn],
                               without: [Function],
                               words: [Function: words],
                               wrap: [Function: wrap],
                               xor: [Function],
                               xorBy: [Function],
                               xorWith: [Function],
                               zip: [Function],
                               zipObject: [Function: zipObject],
                               zipObjectDeep: [Function: zipObjectDeep],
                               zipWith: [Function],
                               entries: [Function],
                               entriesIn: [Function],
                               extend: [Function],
                               extendWith: [Function],
                               add: [Function],
                               attempt: [Function],
                               camelCase: [Function],
                               capitalize: [Function: capitalize],
                               ceil: [Function],
                               clamp: [Function: clamp],
                               clone: [Function: clone],
                               cloneDeep: [Function: cloneDeep],
                               cloneDeepWith: [Function: cloneDeepWith],
                               cloneWith: [Function: cloneWith],
                               conformsTo: [Function: conformsTo],
                               deburr: [Function: deburr],
                               defaultTo: [Function: defaultTo],
                               divide: [Function],
                               endsWith: [Function: endsWith],
                               eq: [Function: eq],
                               escape: [Function: escape],
                               escapeRegExp: [Function: escapeRegExp],
                               every: [Function: every],
                               find: [Function],
                               findIndex: [Function: findIndex],
                               findKey: [Function: findKey],
                               findLast: [Function],
                               findLastIndex: [Function: findLastIndex],
                               findLastKey: [Function: findLastKey],
                               floor: [Function],
                               forEach: [Function: forEach],
                               forEachRight: [Function: forEachRight],
                               forIn: [Function: forIn],
                               forInRight: [Function: forInRight],
                               forOwn: [Function: forOwn],
                               forOwnRight: [Function: forOwnRight],
                               get: [Function: get],
                               gt: [Function],
                               gte: [Function],
                               has: [Function: has],
                               hasIn: [Function: hasIn],
                               head: [Function: head],
                               identity: [Function: identity],
                               includes: [Function: includes],
                               indexOf: [Function: indexOf],
                               inRange: [Function: inRange],
                               invoke: [Function],
                               isArguments: [Function: baseIsArguments],
                               isArray: [Function: isArray],
                               isArrayBuffer: [Function],
                               isArrayLike: [Function: isArrayLike],
                               isArrayLikeObject: [Function: isArrayLikeObject],
                               isBoolean: [Function: isBoolean],
                               isBuffer: [Function: isBuffer],
                               isDate: [Function],
                               isElement: [Function: isElement],
                               isEmpty: [Function: isEmpty],
                               isEqual: [Function: isEqual],
                               isEqualWith: [Function: isEqualWith],
                               isError: [Function: isError],
                               isFinite: [Function: isFinite],
                               isFunction: [Function: isFunction],
                               isInteger: [Function: isInteger],
                               isLength: [Function: isLength],
                               isMap: [Function],
                               isMatch: [Function: isMatch],
                               isMatchWith: [Function: isMatchWith],
                               isNaN: [Function: isNaN],
                               isNative: [Function: isNative],
                               isNil: [Function: isNil],
                               isNull: [Function: isNull],
                               isNumber: [Function: isNumber],
                               isObject: [Function: isObject],
                               isObjectLike: [Function: isObjectLike],
                               isPlainObject: [Function: isPlainObject],
                               isRegExp: [Function],
                               isSafeInteger: [Function: isSafeInteger],
                               isSet: [Function],
                               isString: [Function: isString],
                               isSymbol: [Function: isSymbol],
                               isTypedArray: [Function],
                               isUndefined: [Function: isUndefined],
                               isWeakMap: [Function: isWeakMap],
                               isWeakSet: [Function: isWeakSet],
                               join: [Function: join],
                               kebabCase: [Function],
                               last: [Function: last],
                               lastIndexOf: [Function: lastIndexOf],
                               lowerCase: [Function],
                               lowerFirst: [Function],
                               lt: [Function],
                               lte: [Function],
                               max: [Function: max],
                               maxBy: [Function: maxBy],
                               mean: [Function: mean],
                               meanBy: [Function: meanBy],
                               min: [Function: min],
                               minBy: [Function: minBy],
                               stubArray: [Function: stubArray],
                               stubFalse: [Function: stubFalse],
                               stubObject: [Function: stubObject],
                               stubString: [Function: stubString],
                               stubTrue: [Function: stubTrue],
                               multiply: [Function],
                               nth: [Function: nth],
                               noConflict: [Function: noConflict],
                               noop: [Function: noop],
                               now: [Function],
                               pad: [Function: pad],
                               padEnd: [Function: padEnd],
                               padStart: [Function: padStart],
                               parseInt: [Function: parseInt],
                               random: [Function: random],
                               reduce: [Function: reduce],
                               reduceRight: [Function: reduceRight],
                               repeat: [Function: repeat],
                               replace: [Function: replace],
                               result: [Function: result],
                               round: [Function],
                               runInContext: [Function: runInContext],
                               sample: [Function: sample],
                               size: [Function: size],
                               snakeCase: [Function],
                               some: [Function: some],
                               sortedIndex: [Function: sortedIndex],
                               sortedIndexBy: [Function: sortedIndexBy],
                               sortedIndexOf: [Function: sortedIndexOf],
                               sortedLastIndex: [Function: sortedLastIndex],
                               sortedLastIndexBy: [Function: sortedLastIndexBy],
                               sortedLastIndexOf: [Function: sortedLastIndexOf],
                               startCase: [Function],
                               startsWith: [Function: startsWith],
                               subtract: [Function],
                               sum: [Function: sum],
                               sumBy: [Function: sumBy],
                               template: [Function: template],
                               times: [Function: times],
                               toFinite: [Function: toFinite],
                               toInteger: [Function: toInteger],
                               toLength: [Function: toLength],
                               toLower: [Function: toLower],
                               toNumber: [Function: toNumber],
                               toSafeInteger: [Function: toSafeInteger],
                               toString: [Function: toString],
                               toUpper: [Function: toUpper],
                               trim: [Function: trim],
                               trimEnd: [Function: trimEnd],
                               trimStart: [Function: trimStart],
                               truncate: [Function: truncate],
                               unescape: [Function: unescape],
                               uniqueId: [Function: uniqueId],
                               upperCase: [Function],
                               upperFirst: [Function],
                               each: [Function: forEach],
                               eachRight: [Function: forEachRight],
                               first: [Function: head],
                               VERSION: '4.17.11' } } },
                      options:
                       { dialect: 'mysql',
                         dialectModulePath: null,
                         host: 'localhost',
                         protocol: 'tcp',
                         define:
                          { underscored: false, freezeTableName: true, timestamps: true },
                         query: {},
                         sync: {},
                         timezone: '+00:00',
                         logging: false,
                         omitNull: false,
                         native: false,
                         replication: false,
                         ssl: undefined,
                         pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
                         quoteIdentifiers: true,
                         hooks: {},
                         retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
                         transactionType: 'DEFERRED',
                         isolationLevel: null,
                         databaseVersion: '5.7.25',
                         typeValidation: false,
                         benchmark: false,
                         operatorsAliases: false,
                         username: 'root',
                         password: 'password',
                         database: 'burger_db',
                         port: 3306 },
                      extractTableDetails: [Function: extractTableDetails],
                      addSchema: [Function: addSchema],
                      dropSchema: [Function: dropSchema],
                      describeTableQuery: [Function: describeTableQuery],
                      dropTableQuery: [Function: dropTableQuery],
                      renameTableQuery: [Function: renameTableQuery],
                      insertQuery: [Function: insertQuery],
                      bulkInsertQuery: [Function: bulkInsertQuery],
                      updateQuery: [Function: updateQuery],
                      arithmeticQuery: [Function: arithmeticQuery],
                      nameIndexes: [Function: nameIndexes],
                      addIndexQuery: [Function: addIndexQuery],
                      addConstraintQuery: [Function: addConstraintQuery],
                      getConstraintSnippet: [Function: getConstraintSnippet],
                      removeConstraintQuery: [Function: removeConstraintQuery],
                      quoteTable: [Function: quoteTable],
                      quote: [Function: quote],
                      quoteIdentifiers: [Function: quoteIdentifiers],
                      escape: [Function: escape],
                      selectQuery: [Function: selectQuery],
                      escapeAttributes: [Function: escapeAttributes],
                      generateInclude: [Function: generateInclude],
                      generateJoin: [Function: generateJoin],
                      generateThroughJoin: [Function: generateThroughJoin],
                      _generateSubQueryFilter: [Function: _generateSubQueryFilter],
                      _getRequiredClosure: [Function: _getRequiredClosure],
                      getQueryOrders: [Function: getQueryOrders],
                      selectFromTableFragment: [Function: selectFromTableFragment],
                      setAutocommitQuery: [Function: setAutocommitQuery],
                      setIsolationLevelQuery: [Function: setIsolationLevelQuery],
                      generateTransactionId: [Function: generateTransactionId],
                      startTransactionQuery: [Function: startTransactionQuery],
                      deferConstraintsQuery: [Function: deferConstraintsQuery],
                      setConstraintQuery: [Function: setConstraintQuery],
                      setDeferredQuery: [Function: setDeferredQuery],
                      setImmediateQuery: [Function: setImmediateQuery],
                      commitTransactionQuery: [Function: commitTransactionQuery],
                      rollbackTransactionQuery: [Function: rollbackTransactionQuery],
                      addLimitAndOffset: [Function: addLimitAndOffset],
                      whereQuery: [Function: whereQuery],
                      whereItemsQuery: [Function: whereItemsQuery],
                      OperatorsAliasMap: false,
                      setOperatorsAliases: [Function: setOperatorsAliases],
                      whereItemQuery: [Function: whereItemQuery],
                      _findField: [Function: _findField],
                      _replaceAliases: [Function: _replaceAliases],
                      _whereGroupBind: [Function: _whereGroupBind],
                      _whereBind: [Function: _whereBind],
                      _whereJSON: [Function: _whereJSON],
                      _traverseJSON: [Function: _traverseJSON],
                      _castKey: [Function: _castKey],
                      _getJsonCast: [Function: _getJsonCast],
                      _joinKeyValue: [Function: _joinKeyValue],
                      _getSafeKey: [Function: _getSafeKey],
                      _prefixKey: [Function: _prefixKey],
                      _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
                      getWhereConditions: [Function: getWhereConditions],
                      parseConditionObject: [Function: parseConditionObject],
                      isIdentifierQuoted: [Function: isIdentifierQuoted],
                      booleanValue: [Function: booleanValue],
                      _dialect:
                       MysqlDialect {
                         sequelize: [Circular],
                         connectionManager:
                          ConnectionManager {
                            sequelize: [Circular],
                            config:
                             { database: 'burger_db',
                               username: 'root',
                               password: 'password',
                               host: 'localhost',
                               port: 3306,
                               pool:
                                { max: 5,
                                  min: 0,
                                  acquire: 30000,
                                  idle: 10000,
                                  evict: 10000,
                                  handleDisconnects: true,
                                  validate: [Function: bound _validate],
                                  Promise:
                                   { [Function: Promise]
                                     TypeError: [Function: TypeError],
                                     RangeError: [Function: RangeError],
                                     CancellationError: [Function: SubError],
                                     TimeoutError: [Function: SubError],
                                     OperationalError: [Function: OperationalError],
                                     RejectionError: [Function: OperationalError],
                                     AggregateError: [Function: SubError],
                                     _peekContext: [Function],
                                     onPossiblyUnhandledRejection: [Function],
                                     onUnhandledRejectionHandled: [Function],
                                     longStackTraces: [Function],
                                     hasLongStackTraces: [Function],
                                     config: [Function],
                                     getNewLibraryCopy: [Function],
                                     is: [Function],
                                     fromCallback: [Function],
                                     fromNode: [Function],
                                     all: [Function],
                                     cast: [Function],
                                     fulfilled: [Function],
                                     resolve: [Function],
                                     rejected: [Function],
                                     reject: [Function],
                                     setScheduler: [Function],
                                     pending: [Function],
                                     defer: [Function],
                                     method: [Function],
                                     try: [Function],
                                     attempt: [Function],
                                     bind: [Function],
                                     PromiseInspection: [Function: PromiseInspection],
                                     join: [Function],
                                     Promise: [Circular],
                                     version: '3.5.3',
                                     map: [Function],
                                     using: [Function],
                                     delay: [Function],
                                     coroutine: { [Function] addYieldHandler: [Function] },
                                     spawn: [Function],
                                     promisify: [Function],
                                     promisifyAll: [Function],
                                     props: [Function],
                                     race: [Function],
                                     reduce: [Function],
                                     settle: [Function],
                                     some: [Function],
                                     _SomePromiseArray: [Function: SomePromiseArray],
                                     filter: [Function],
                                     each: [Function],
                                     mapSeries: [Function: PromiseMapSeries],
                                     any: [Function],
                                     default: [Circular] } },
                               protocol: 'tcp',
                               native: false,
                               ssl: undefined,
                               replication: false,
                               dialectModulePath: null,
                               keepDefaultTimezone: undefined,
                               dialectOptions: undefined },
                            dialect: [Circular],
                            versionPromise: null,
                            dialectName: 'mysql',
                            pool:
                             Pool {
                               _events: [Object: null prototype] {},
                               _eventsCount: 0,
                               _maxListeners: undefined,
                               _config:
                                PoolOptions {
                                  fifo: true,
                                  priorityRange: 1,
                                  testOnBorrow: true,
                                  testOnReturn: false,
                                  autostart: false,
                                  acquireTimeoutMillis: 30000,
                                  max: 5,
                                  min: 0,
                                  evictionRunIntervalMillis: 10000,
                                  numTestsPerEvictionRun: 3,
                                  softIdleTimeoutMillis: -1,
                                  idleTimeoutMillis: 10000,
                                  Promise:
                                   { [Function: Promise]
                                     TypeError: [Function: TypeError],
                                     RangeError: [Function: RangeError],
                                     CancellationError: [Function: SubError],
                                     TimeoutError: [Function: SubError],
                                     OperationalError: [Function: OperationalError],
                                     RejectionError: [Function: OperationalError],
                                     AggregateError: [Function: SubError],
                                     _peekContext: [Function],
                                     onPossiblyUnhandledRejection: [Function],
                                     onUnhandledRejectionHandled: [Function],
                                     longStackTraces: [Function],
                                     hasLongStackTraces: [Function],
                                     config: [Function],
                                     getNewLibraryCopy: [Function],
                                     is: [Function],
                                     fromCallback: [Function],
                                     fromNode: [Function],
                                     all: [Function],
                                     cast: [Function],
                                     fulfilled: [Function],
                                     resolve: [Function],
                                     rejected: [Function],
                                     reject: [Function],
                                     setScheduler: [Function],
                                     pending: [Function],
                                     defer: [Function],
                                     method: [Function],
                                     try: [Function],
                                     attempt: [Function],
                                     bind: [Function],
                                     PromiseInspection: [Function: PromiseInspection],
                                     join: [Function],
                                     Promise: [Circular],
                                     version: '3.5.3',
                                     map: [Function],
                                     using: [Function],
                                     delay: [Function],
                                     coroutine: { [Function] addYieldHandler: [Function] },
                                     spawn: [Function],
                                     promisify: [Function],
                                     promisifyAll: [Function],
                                     props: [Function],
                                     race: [Function],
                                     reduce: [Function],
                                     settle: [Function],
                                     some: [Function],
                                     _SomePromiseArray: [Function: SomePromiseArray],
                                     filter: [Function],
                                     each: [Function],
                                     mapSeries: [Function: PromiseMapSeries],
                                     any: [Function],
                                     default: [Circular] } },
                               _Promise:
                                { [Function: Promise]
                                  TypeError: [Function: TypeError],
                                  RangeError: [Function: RangeError],
                                  CancellationError: [Function: SubError],
                                  TimeoutError: [Function: SubError],
                                  OperationalError: [Function: OperationalError],
                                  RejectionError: [Function: OperationalError],
                                  AggregateError: [Function: SubError],
                                  _peekContext: [Function],
                                  onPossiblyUnhandledRejection: [Function],
                                  onUnhandledRejectionHandled: [Function],
                                  longStackTraces: [Function],
                                  hasLongStackTraces: [Function],
                                  config: [Function],
                                  getNewLibraryCopy: [Function],
                                  is: [Function],
                                  fromCallback: [Function],
                                  fromNode: [Function],
                                  all: [Function],
                                  cast: [Function],
                                  fulfilled: [Function],
                                  resolve: [Function],
                                  rejected: [Function],
                                  reject: [Function],
                                  setScheduler: [Function],
                                  pending: [Function],
                                  defer: [Function],
                                  method: [Function],
                                  try: [Function],
                                  attempt: [Function],
                                  bind: [Function],
                                  PromiseInspection: [Function: PromiseInspection],
                                  join: [Function],
                                  Promise: [Circular],
                                  version: '3.5.3',
                                  map: [Function],
                                  using: [Function],
                                  delay: [Function],
                                  coroutine: { [Function] addYieldHandler: [Function] },
                                  spawn: [Function],
                                  promisify: [Function],
                                  promisifyAll: [Function],
                                  props: [Function],
                                  race: [Function],
                                  reduce: [Function],
                                  settle: [Function],
                                  some: [Function],
                                  _SomePromiseArray: [Function: SomePromiseArray],
                                  filter: [Function],
                                  each: [Function],
                                  mapSeries: [Function: PromiseMapSeries],
                                  any: [Function],
                                  default: [Circular] },
                               _factory:
                                { create: [Function: create],
                                  destroy: [Function: destroy],
                                  validate: [Function: bound _validate] },
                               _draining: false,
                               _started: true,
                               _waitingClientsQueue:
                                PriorityQueue {
                                  _size: 1,
                                  _slots:
                                   [ Queue {
                                       _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
                               _factoryCreateOperations: Set {},
                               _factoryDestroyOperations: Set {},
                               _availableObjects:
                                Deque {
                                  _list:
                                   DoublyLinkedList {
                                     head:
                                      { prev: null,
                                        next: null,
                                        data:
                                         PooledResource {
                                           creationTime: 1551536074757,
                                           lastReturnTime: 1551536078184,
                                           lastBorrowTime: 1551536078176,
                                           lastIdleTime: 1551536078184,
                                           obj:
                                            Connection {
                                              _events: [Object: null prototype] { error: [Function: errorHandler] },
                                              _eventsCount: 1,
                                              _maxListeners: undefined,
                                              config:
                                               ConnectionConfig {
                                                 isServer: undefined,
                                                 stream: undefined,
                                                 host: 'localhost',
                                                 port: 3306,
                                                 localAddress: undefined,
                                                 socketPath: undefined,
                                                 user: 'root',
                                                 password: 'password',
                                                 passwordSha1: undefined,
                                                 database: 'burger_db',
                                                 connectTimeout: 10000,
                                                 insecureAuth: false,
                                                 supportBigNumbers: true,
                                                 bigNumberStrings: false,
                                                 decimalNumbers: false,
                                                 dateStrings: false,
                                                 debug: undefined,
                                                 trace: true,
                                                 stringifyObjects: false,
                                                 timezone: '+00:00',
                                                 queryFormat: undefined,
                                                 pool: undefined,
                                                 ssl: false,
                                                 multipleStatements: false,
                                                 rowsAsArray: false,
                                                 namedPlaceholders: false,
                                                 nestTables: undefined,
                                                 typeCast: [Function: bound _typecast],
                                                 maxPacketSize: 0,
                                                 charsetNumber: 224,
                                                 compress: false,
                                                 authSwitchHandler: undefined,
                                                 clientFlags: 8582093,
                                                 connectAttributes: undefined,
                                                 maxPreparedStatements: 16000 },
                                              stream:
                                               Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    error: [Function: bound _handleNetworkError],
                                                    data: [Function],
                                                    close: [Function] },
                                                 _eventsCount: 4,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: false,
                                                    needDrain: false,
                                                    ending: false,
                                                    ended: false,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 0,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next: null,
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: true,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 [Symbol(asyncId)]: 29,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 },
                                              _internalId: 1,
                                              _commands:
                                               Denque {
                                                 _head: 0,
                                                 _tail: 0,
                                                 _capacityMask: 3,
                                                 _list: [ <4 empty items> ] },
                                              _command: undefined,
                                              _paused: false,
                                              _paused_packets:
                                               Denque {
                                                 _head: 0,
                                                 _tail: 0,
                                                 _capacityMask: 3,
                                                 _list: [ <4 empty items> ] },
                                              _statements:
                                               LRUCache {
                                                 [Symbol(max)]: 16000,
                                                 [Symbol(lengthCalculator)]: [Function: naiveLength],
                                                 [Symbol(allowStale)]: false,
                                                 [Symbol(maxAge)]: 0,
                                                 [Symbol(dispose)]: [Function: dispose],
                                                 [Symbol(noDisposeOnSet)]: false,
                                                 [Symbol(cache)]: Map {},
                                                 [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                                 [Symbol(length)]: 0 },
                                              serverCapabilityFlags: 2181036031,
                                              authorized: true,
                                              sequenceId: 12,
                                              compressedSequenceId: 0,
                                              threadId: 432,
                                              _handshakePacket:
                                               Handshake {
                                                 protocolVersion: 10,
                                                 serverVersion: '5.7.25',
                                                 capabilityFlags: 2181036031,
                                                 connectionId: 432,
                                                 authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                                 authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                                 characterSet: 8,
                                                 statusFlags: 2 },
                                              _fatalError: null,
                                              _protocolError: null,
                                              _outOfOrderPackets: [],
                                              clientEncoding: 'utf8',
                                              packetParser:
                                               PacketParser {
                                                 buffer: [],
                                                 bufferLength: 0,
                                                 packetHeaderLength: 4,
                                                 headerLen: 0,
                                                 length: 5,
                                                 largePacketParts: [],
                                                 firstPacketSequenceId: 0,
                                                 onPacket: [Function],
                                                 execute: [Function: executeStart],
                                                 _flushLargePacket: [Function: _flushLargePacket4] },
                                              serverEncoding: 'latin1',
                                              connectTimeout: null,
                                              connectionId: 432 },
                                           state: 'IDLE' } },
                                     tail:
                                      { prev: null,
                                        next: null,
                                        data:
                                         PooledResource {
                                           creationTime: 1551536074757,
                                           lastReturnTime: 1551536078184,
                                           lastBorrowTime: 1551536078176,
                                           lastIdleTime: 1551536078184,
                                           obj:
                                            Connection {
                                              _events: [Object: null prototype] { error: [Function: errorHandler] },
                                              _eventsCount: 1,
                                              _maxListeners: undefined,
                                              config:
                                               ConnectionConfig {
                                                 isServer: undefined,
                                                 stream: undefined,
                                                 host: 'localhost',
                                                 port: 3306,
                                                 localAddress: undefined,
                                                 socketPath: undefined,
                                                 user: 'root',
                                                 password: 'password',
                                                 passwordSha1: undefined,
                                                 database: 'burger_db',
                                                 connectTimeout: 10000,
                                                 insecureAuth: false,
                                                 supportBigNumbers: true,
                                                 bigNumberStrings: false,
                                                 decimalNumbers: false,
                                                 dateStrings: false,
                                                 debug: undefined,
                                                 trace: true,
                                                 stringifyObjects: false,
                                                 timezone: '+00:00',
                                                 queryFormat: undefined,
                                                 pool: undefined,
                                                 ssl: false,
                                                 multipleStatements: false,
                                                 rowsAsArray: false,
                                                 namedPlaceholders: false,
                                                 nestTables: undefined,
                                                 typeCast: [Function: bound _typecast],
                                                 maxPacketSize: 0,
                                                 charsetNumber: 224,
                                                 compress: false,
                                                 authSwitchHandler: undefined,
                                                 clientFlags: 8582093,
                                                 connectAttributes: undefined,
                                                 maxPreparedStatements: 16000 },
                                              stream:
                                               Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    error: [Function: bound _handleNetworkError],
                                                    data: [Function],
                                                    close: [Function] },
                                                 _eventsCount: 4,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: false,
                                                    needDrain: false,
                                                    ending: false,
                                                    ended: false,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 0,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next: null,
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: true,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 [Symbol(asyncId)]: 29,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 },
                                              _internalId: 1,
                                              _commands:
                                               Denque {
                                                 _head: 0,
                                                 _tail: 0,
                                                 _capacityMask: 3,
                                                 _list: [ <4 empty items> ] },
                                              _command: undefined,
                                              _paused: false,
                                              _paused_packets:
                                               Denque {
                                                 _head: 0,
                                                 _tail: 0,
                                                 _capacityMask: 3,
                                                 _list: [ <4 empty items> ] },
                                              _statements:
                                               LRUCache {
                                                 [Symbol(max)]: 16000,
                                                 [Symbol(lengthCalculator)]: [Function: naiveLength],
                                                 [Symbol(allowStale)]: false,
                                                 [Symbol(maxAge)]: 0,
                                                 [Symbol(dispose)]: [Function: dispose],
                                                 [Symbol(noDisposeOnSet)]: false,
                                                 [Symbol(cache)]: Map {},
                                                 [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                                 [Symbol(length)]: 0 },
                                              serverCapabilityFlags: 2181036031,
                                              authorized: true,
                                              sequenceId: 12,
                                              compressedSequenceId: 0,
                                              threadId: 432,
                                              _handshakePacket:
                                               Handshake {
                                                 protocolVersion: 10,
                                                 serverVersion: '5.7.25',
                                                 capabilityFlags: 2181036031,
                                                 connectionId: 432,
                                                 authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                                 authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                                 characterSet: 8,
                                                 statusFlags: 2 },
                                              _fatalError: null,
                                              _protocolError: null,
                                              _outOfOrderPackets: [],
                                              clientEncoding: 'utf8',
                                              packetParser:
                                               PacketParser {
                                                 buffer: [],
                                                 bufferLength: 0,
                                                 packetHeaderLength: 4,
                                                 headerLen: 0,
                                                 length: 5,
                                                 largePacketParts: [],
                                                 firstPacketSequenceId: 0,
                                                 onPacket: [Function],
                                                 execute: [Function: executeStart],
                                                 _flushLargePacket: [Function: _flushLargePacket4] },
                                              serverEncoding: 'latin1',
                                              connectTimeout: null,
                                              connectionId: 432 },
                                           state: 'IDLE' } },
                                     length: 1 } },
                               _testOnBorrowResources: Set {},
                               _testOnReturnResources: Set {},
                               _validationOperations: Set {},
                               _allObjects:
                                Set {
                                  PooledResource {
                                    creationTime: 1551536074757,
                                    lastReturnTime: 1551536078184,
                                    lastBorrowTime: 1551536078176,
                                    lastIdleTime: 1551536078184,
                                    obj:
                                     Connection {
                                       _events: [Object: null prototype] { error: [Function: errorHandler] },
                                       _eventsCount: 1,
                                       _maxListeners: undefined,
                                       config:
                                        ConnectionConfig {
                                          isServer: undefined,
                                          stream: undefined,
                                          host: 'localhost',
                                          port: 3306,
                                          localAddress: undefined,
                                          socketPath: undefined,
                                          user: 'root',
                                          password: 'password',
                                          passwordSha1: undefined,
                                          database: 'burger_db',
                                          connectTimeout: 10000,
                                          insecureAuth: false,
                                          supportBigNumbers: true,
                                          bigNumberStrings: false,
                                          decimalNumbers: false,
                                          dateStrings: false,
                                          debug: undefined,
                                          trace: true,
                                          stringifyObjects: false,
                                          timezone: '+00:00',
                                          queryFormat: undefined,
                                          pool: undefined,
                                          ssl: false,
                                          multipleStatements: false,
                                          rowsAsArray: false,
                                          namedPlaceholders: false,
                                          nestTables: undefined,
                                          typeCast: [Function: bound _typecast],
                                          maxPacketSize: 0,
                                          charsetNumber: 224,
                                          compress: false,
                                          authSwitchHandler: undefined,
                                          clientFlags: 8582093,
                                          connectAttributes: undefined,
                                          maxPreparedStatements: 16000 },
                                       stream:
                                        Socket {
                                          connecting: false,
                                          _hadError: false,
                                          _handle:
                                           TCP {
                                             reading: true,
                                             onread: [Function: onStreamRead],
                                             onconnection: null,
                                             [Symbol(owner)]: [Circular] },
                                          _parent: null,
                                          _host: 'localhost',
                                          _readableState:
                                           ReadableState {
                                             objectMode: false,
                                             highWaterMark: 16384,
                                             buffer: BufferList { head: null, tail: null, length: 0 },
                                             length: 0,
                                             pipes: null,
                                             pipesCount: 0,
                                             flowing: true,
                                             ended: false,
                                             endEmitted: false,
                                             reading: true,
                                             sync: false,
                                             needReadable: true,
                                             emittedReadable: false,
                                             readableListening: false,
                                             resumeScheduled: false,
                                             emitClose: false,
                                             destroyed: false,
                                             defaultEncoding: 'utf8',
                                             awaitDrain: 0,
                                             readingMore: false,
                                             decoder: null,
                                             encoding: null },
                                          readable: true,
                                          _events:
                                           [Object: null prototype] {
                                             end: [Function: onReadableStreamEnd],
                                             error: [Function: bound _handleNetworkError],
                                             data: [Function],
                                             close: [Function] },
                                          _eventsCount: 4,
                                          _maxListeners: undefined,
                                          _writableState:
                                           WritableState {
                                             objectMode: false,
                                             highWaterMark: 16384,
                                             finalCalled: false,
                                             needDrain: false,
                                             ending: false,
                                             ended: false,
                                             finished: false,
                                             destroyed: false,
                                             decodeStrings: false,
                                             defaultEncoding: 'utf8',
                                             length: 0,
                                             writing: false,
                                             corked: 0,
                                             sync: false,
                                             bufferProcessing: false,
                                             onwrite: [Function: bound onwrite],
                                             writecb: null,
                                             writelen: 0,
                                             bufferedRequest: null,
                                             lastBufferedRequest: null,
                                             pendingcb: 0,
                                             prefinished: false,
                                             errorEmitted: false,
                                             emitClose: false,
                                             bufferedRequestCount: 0,
                                             corkedRequestsFree:
                                              { next: null,
                                                entry: null,
                                                finish: [Function: bound onCorkedFinish] } },
                                          writable: true,
                                          allowHalfOpen: false,
                                          _sockname: null,
                                          _pendingData: null,
                                          _pendingEncoding: '',
                                          server: null,
                                          _server: null,
                                          [Symbol(asyncId)]: 29,
                                          [Symbol(lastWriteQueueSize)]: 0,
                                          [Symbol(timeout)]: null,
                                          [Symbol(kBytesRead)]: 0,
                                          [Symbol(kBytesWritten)]: 0 },
                                       _internalId: 1,
                                       _commands:
                                        Denque {
                                          _head: 0,
                                          _tail: 0,
                                          _capacityMask: 3,
                                          _list: [ <4 empty items> ] },
                                       _command: undefined,
                                       _paused: false,
                                       _paused_packets:
                                        Denque {
                                          _head: 0,
                                          _tail: 0,
                                          _capacityMask: 3,
                                          _list: [ <4 empty items> ] },
                                       _statements:
                                        LRUCache {
                                          [Symbol(max)]: 16000,
                                          [Symbol(lengthCalculator)]: [Function: naiveLength],
                                          [Symbol(allowStale)]: false,
                                          [Symbol(maxAge)]: 0,
                                          [Symbol(dispose)]: [Function: dispose],
                                          [Symbol(noDisposeOnSet)]: false,
                                          [Symbol(cache)]: Map {},
                                          [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                          [Symbol(length)]: 0 },
                                       serverCapabilityFlags: 2181036031,
                                       authorized: true,
                                       sequenceId: 12,
                                       compressedSequenceId: 0,
                                       threadId: 432,
                                       _handshakePacket:
                                        Handshake {
                                          protocolVersion: 10,
                                          serverVersion: '5.7.25',
                                          capabilityFlags: 2181036031,
                                          connectionId: 432,
                                          authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                          authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                          characterSet: 8,
                                          statusFlags: 2 },
                                       _fatalError: null,
                                       _protocolError: null,
                                       _outOfOrderPackets: [],
                                       clientEncoding: 'utf8',
                                       packetParser:
                                        PacketParser {
                                          buffer: [],
                                          bufferLength: 0,
                                          packetHeaderLength: 4,
                                          headerLen: 0,
                                          length: 5,
                                          largePacketParts: [],
                                          firstPacketSequenceId: 0,
                                          onPacket: [Function],
                                          execute: [Function: executeStart],
                                          _flushLargePacket: [Function: _flushLargePacket4] },
                                       serverEncoding: 'latin1',
                                       connectTimeout: null,
                                       connectionId: 432 },
                                    state: 'IDLE' } },
                               _resourceLoans: Map {},
                               _evictionIterator:
                                DequeIterator {
                                  _list:
                                   DoublyLinkedList {
                                     head:
                                      { prev: null,
                                        next: null,
                                        data:
                                         PooledResource {
                                           creationTime: 1551536074757,
                                           lastReturnTime: 1551536078184,
                                           lastBorrowTime: 1551536078176,
                                           lastIdleTime: 1551536078184,
                                           obj:
                                            Connection {
                                              _events: [Object: null prototype] { error: [Function: errorHandler] },
                                              _eventsCount: 1,
                                              _maxListeners: undefined,
                                              config:
                                               ConnectionConfig {
                                                 isServer: undefined,
                                                 stream: undefined,
                                                 host: 'localhost',
                                                 port: 3306,
                                                 localAddress: undefined,
                                                 socketPath: undefined,
                                                 user: 'root',
                                                 password: 'password',
                                                 passwordSha1: undefined,
                                                 database: 'burger_db',
                                                 connectTimeout: 10000,
                                                 insecureAuth: false,
                                                 supportBigNumbers: true,
                                                 bigNumberStrings: false,
                                                 decimalNumbers: false,
                                                 dateStrings: false,
                                                 debug: undefined,
                                                 trace: true,
                                                 stringifyObjects: false,
                                                 timezone: '+00:00',
                                                 queryFormat: undefined,
                                                 pool: undefined,
                                                 ssl: false,
                                                 multipleStatements: false,
                                                 rowsAsArray: false,
                                                 namedPlaceholders: false,
                                                 nestTables: undefined,
                                                 typeCast: [Function: bound _typecast],
                                                 maxPacketSize: 0,
                                                 charsetNumber: 224,
                                                 compress: false,
                                                 authSwitchHandler: undefined,
                                                 clientFlags: 8582093,
                                                 connectAttributes: undefined,
                                                 maxPreparedStatements: 16000 },
                                              stream:
                                               Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    error: [Function: bound _handleNetworkError],
                                                    data: [Function],
                                                    close: [Function] },
                                                 _eventsCount: 4,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: false,
                                                    needDrain: false,
                                                    ending: false,
                                                    ended: false,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 0,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next: null,
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: true,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 [Symbol(asyncId)]: 29,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 },
                                              _internalId: 1,
                                              _commands:
                                               Denque {
                                                 _head: 0,
                                                 _tail: 0,
                                                 _capacityMask: 3,
                                                 _list: [ <4 empty items> ] },
                                              _command: undefined,
                                              _paused: false,
                                              _paused_packets:
                                               Denque {
                                                 _head: 0,
                                                 _tail: 0,
                                                 _capacityMask: 3,
                                                 _list: [ <4 empty items> ] },
                                              _statements:
                                               LRUCache {
                                                 [Symbol(max)]: 16000,
                                                 [Symbol(lengthCalculator)]: [Function: naiveLength],
                                                 [Symbol(allowStale)]: false,
                                                 [Symbol(maxAge)]: 0,
                                                 [Symbol(dispose)]: [Function: dispose],
                                                 [Symbol(noDisposeOnSet)]: false,
                                                 [Symbol(cache)]: Map {},
                                                 [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                                 [Symbol(length)]: 0 },
                                              serverCapabilityFlags: 2181036031,
                                              authorized: true,
                                              sequenceId: 12,
                                              compressedSequenceId: 0,
                                              threadId: 432,
                                              _handshakePacket:
                                               Handshake {
                                                 protocolVersion: 10,
                                                 serverVersion: '5.7.25',
                                                 capabilityFlags: 2181036031,
                                                 connectionId: 432,
                                                 authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                                 authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                                 characterSet: 8,
                                                 statusFlags: 2 },
                                              _fatalError: null,
                                              _protocolError: null,
                                              _outOfOrderPackets: [],
                                              clientEncoding: 'utf8',
                                              packetParser:
                                               PacketParser {
                                                 buffer: [],
                                                 bufferLength: 0,
                                                 packetHeaderLength: 4,
                                                 headerLen: 0,
                                                 length: 5,
                                                 largePacketParts: [],
                                                 firstPacketSequenceId: 0,
                                                 onPacket: [Function],
                                                 execute: [Function: executeStart],
                                                 _flushLargePacket: [Function: _flushLargePacket4] },
                                              serverEncoding: 'latin1',
                                              connectTimeout: null,
                                              connectionId: 432 },
                                           state: 'IDLE' } },
                                     tail:
                                      { prev: null,
                                        next: null,
                                        data:
                                         PooledResource {
                                           creationTime: 1551536074757,
                                           lastReturnTime: 1551536078184,
                                           lastBorrowTime: 1551536078176,
                                           lastIdleTime: 1551536078184,
                                           obj:
                                            Connection {
                                              _events: [Object: null prototype] { error: [Function: errorHandler] },
                                              _eventsCount: 1,
                                              _maxListeners: undefined,
                                              config:
                                               ConnectionConfig {
                                                 isServer: undefined,
                                                 stream: undefined,
                                                 host: 'localhost',
                                                 port: 3306,
                                                 localAddress: undefined,
                                                 socketPath: undefined,
                                                 user: 'root',
                                                 password: 'password',
                                                 passwordSha1: undefined,
                                                 database: 'burger_db',
                                                 connectTimeout: 10000,
                                                 insecureAuth: false,
                                                 supportBigNumbers: true,
                                                 bigNumberStrings: false,
                                                 decimalNumbers: false,
                                                 dateStrings: false,
                                                 debug: undefined,
                                                 trace: true,
                                                 stringifyObjects: false,
                                                 timezone: '+00:00',
                                                 queryFormat: undefined,
                                                 pool: undefined,
                                                 ssl: false,
                                                 multipleStatements: false,
                                                 rowsAsArray: false,
                                                 namedPlaceholders: false,
                                                 nestTables: undefined,
                                                 typeCast: [Function: bound _typecast],
                                                 maxPacketSize: 0,
                                                 charsetNumber: 224,
                                                 compress: false,
                                                 authSwitchHandler: undefined,
                                                 clientFlags: 8582093,
                                                 connectAttributes: undefined,
                                                 maxPreparedStatements: 16000 },
                                              stream:
                                               Socket {
                                                 connecting: false,
                                                 _hadError: false,
                                                 _handle:
                                                  TCP {
                                                    reading: true,
                                                    onread: [Function: onStreamRead],
                                                    onconnection: null,
                                                    [Symbol(owner)]: [Circular] },
                                                 _parent: null,
                                                 _host: 'localhost',
                                                 _readableState:
                                                  ReadableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                                    length: 0,
                                                    pipes: null,
                                                    pipesCount: 0,
                                                    flowing: true,
                                                    ended: false,
                                                    endEmitted: false,
                                                    reading: true,
                                                    sync: false,
                                                    needReadable: true,
                                                    emittedReadable: false,
                                                    readableListening: false,
                                                    resumeScheduled: false,
                                                    emitClose: false,
                                                    destroyed: false,
                                                    defaultEncoding: 'utf8',
                                                    awaitDrain: 0,
                                                    readingMore: false,
                                                    decoder: null,
                                                    encoding: null },
                                                 readable: true,
                                                 _events:
                                                  [Object: null prototype] {
                                                    end: [Function: onReadableStreamEnd],
                                                    error: [Function: bound _handleNetworkError],
                                                    data: [Function],
                                                    close: [Function] },
                                                 _eventsCount: 4,
                                                 _maxListeners: undefined,
                                                 _writableState:
                                                  WritableState {
                                                    objectMode: false,
                                                    highWaterMark: 16384,
                                                    finalCalled: false,
                                                    needDrain: false,
                                                    ending: false,
                                                    ended: false,
                                                    finished: false,
                                                    destroyed: false,
                                                    decodeStrings: false,
                                                    defaultEncoding: 'utf8',
                                                    length: 0,
                                                    writing: false,
                                                    corked: 0,
                                                    sync: false,
                                                    bufferProcessing: false,
                                                    onwrite: [Function: bound onwrite],
                                                    writecb: null,
                                                    writelen: 0,
                                                    bufferedRequest: null,
                                                    lastBufferedRequest: null,
                                                    pendingcb: 0,
                                                    prefinished: false,
                                                    errorEmitted: false,
                                                    emitClose: false,
                                                    bufferedRequestCount: 0,
                                                    corkedRequestsFree:
                                                     { next: null,
                                                       entry: null,
                                                       finish: [Function: bound onCorkedFinish] } },
                                                 writable: true,
                                                 allowHalfOpen: false,
                                                 _sockname: null,
                                                 _pendingData: null,
                                                 _pendingEncoding: '',
                                                 server: null,
                                                 _server: null,
                                                 [Symbol(asyncId)]: 29,
                                                 [Symbol(lastWriteQueueSize)]: 0,
                                                 [Symbol(timeout)]: null,
                                                 [Symbol(kBytesRead)]: 0,
                                                 [Symbol(kBytesWritten)]: 0 },
                                              _internalId: 1,
                                              _commands:
                                               Denque {
                                                 _head: 0,
                                                 _tail: 0,
                                                 _capacityMask: 3,
                                                 _list: [ <4 empty items> ] },
                                              _command: undefined,
                                              _paused: false,
                                              _paused_packets:
                                               Denque {
                                                 _head: 0,
                                                 _tail: 0,
                                                 _capacityMask: 3,
                                                 _list: [ <4 empty items> ] },
                                              _statements:
                                               LRUCache {
                                                 [Symbol(max)]: 16000,
                                                 [Symbol(lengthCalculator)]: [Function: naiveLength],
                                                 [Symbol(allowStale)]: false,
                                                 [Symbol(maxAge)]: 0,
                                                 [Symbol(dispose)]: [Function: dispose],
                                                 [Symbol(noDisposeOnSet)]: false,
                                                 [Symbol(cache)]: Map {},
                                                 [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                                 [Symbol(length)]: 0 },
                                              serverCapabilityFlags: 2181036031,
                                              authorized: true,
                                              sequenceId: 12,
                                              compressedSequenceId: 0,
                                              threadId: 432,
                                              _handshakePacket:
                                               Handshake {
                                                 protocolVersion: 10,
                                                 serverVersion: '5.7.25',
                                                 capabilityFlags: 2181036031,
                                                 connectionId: 432,
                                                 authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                                 authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                                 characterSet: 8,
                                                 statusFlags: 2 },
                                              _fatalError: null,
                                              _protocolError: null,
                                              _outOfOrderPackets: [],
                                              clientEncoding: 'utf8',
                                              packetParser:
                                               PacketParser {
                                                 buffer: [],
                                                 bufferLength: 0,
                                                 packetHeaderLength: 4,
                                                 headerLen: 0,
                                                 length: 5,
                                                 largePacketParts: [],
                                                 firstPacketSequenceId: 0,
                                                 onPacket: [Function],
                                                 execute: [Function: executeStart],
                                                 _flushLargePacket: [Function: _flushLargePacket4] },
                                              serverEncoding: 'latin1',
                                              connectTimeout: null,
                                              connectionId: 432 },
                                           state: 'IDLE' } },
                                     length: 1 },
                                  _direction: 'next',
                                  _startPosition: 'head',
                                  _started: false,
                                  _cursor: null,
                                  _done: false },
                               _evictor: DefaultEvictor {},
                               _scheduledEviction:
                                Timeout {
                                  _idleTimeout: 10000,
                                  _idlePrev: [TimersList],
                                  _idleNext: [TimersList],
                                  _idleStart: 493,
                                  _onTimeout: [Function],
                                  _timerArgs: undefined,
                                  _repeat: null,
                                  _destroyed: false,
                                  [Symbol(refed)]: true,
                                  [Symbol(asyncId)]: 27,
                                  [Symbol(triggerId)]: 25 } },
                            lib:
                             { createConnection: [Function],
                               connect: [Function],
                               Connection: [Function: Connection],
                               createPool: [Function],
                               createPoolCluster: [Function],
                               createQuery: [Function: createQuery],
                               Pool: [Function: Pool],
                               createServer: [Function],
                               PoolConnection:
                                { [Function: PoolConnection] statementKey: [Function: statementKey] },
                               escape: [Function: escape],
                               escapeId: [Function: escapeId],
                               format: [Function: format],
                               raw: [Function: raw],
                               createConnectionPromise: [Getter],
                               createPoolPromise: [Getter],
                               createPoolClusterPromise: [Getter],
                               Types: [Getter],
                               Charsets: [Getter],
                               CharsetToEncoding: [Getter],
                               setMaxParserCache: [Function],
                               clearParserCache: [Function] } },
                         QueryGenerator: [Circular] },
                      sequelize: [Circular],
                      typeValidation: undefined } },
                models:
                 { burgers:
                    { [Function: burgers]
                      sequelize: [Circular],
                      options: [Circular],
                      associations: {},
                      underscored: undefined,
                      tableName: 'burgers',
                      _schema: null,
                      _schemaDelimiter: '',
                      rawAttributes:
                       { id:
                          { type:
                             INTEGER {
                               options: { length: undefined },
                               _length: undefined,
                               _zerofill: undefined,
                               _decimals: undefined,
                               _precision: undefined,
                               _scale: undefined,
                               _unsigned: undefined },
                            allowNull: false,
                            primaryKey: true,
                            autoIncrement: true,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'id',
                            _modelAttribute: true,
                            field: 'id' },
                         name:
                          { type:
                             STRING {
                               options: { length: undefined, binary: undefined },
                               _binary: undefined,
                               _length: 255 },
                            allowNull: false,
                            validate: { len: [ 1, 140 ] },
                            Model: [Circular],
                            fieldName: 'name',
                            _modelAttribute: true,
                            field: 'name' },
                         isDevoured:
                          { type: BOOLEAN {},
                            allowNull: false,
                            defaultValue: false,
                            Model: [Circular],
                            fieldName: 'isDevoured',
                            _modelAttribute: true,
                            field: 'isDevoured' },
                         createdAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'createdAt',
                            _modelAttribute: true,
                            field: 'createdAt' },
                         updatedAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'updatedAt',
                            _modelAttribute: true,
                            field: 'updatedAt' } },
                      primaryKeys:
                       { id:
                          { type:
                             INTEGER {
                               options: { length: undefined },
                               _length: undefined,
                               _zerofill: undefined,
                               _decimals: undefined,
                               _precision: undefined,
                               _scale: undefined,
                               _unsigned: undefined },
                            allowNull: false,
                            primaryKey: true,
                            autoIncrement: true,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'id',
                            _modelAttribute: true,
                            field: 'id' } },
                      _timestampAttributes: { createdAt: 'createdAt', updatedAt: 'updatedAt' },
                      _readOnlyAttributes: [ 'createdAt', 'updatedAt' ],
                      _hasReadOnlyAttributes: 2,
                      _isReadOnlyAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _dataTypeChanges:
                       { createdAt: [Function: _isChanged],
                         updatedAt: [Function: _isChanged] },
                      _dataTypeSanitizers:
                       { isDevoured: [Function: _sanitize],
                         createdAt: [Function: _sanitize],
                         updatedAt: [Function: _sanitize] },
                      _booleanAttributes: [ 'isDevoured' ],
                      _dateAttributes: [ 'createdAt', 'updatedAt' ],
                      _hstoreAttributes: [],
                      _rangeAttributes: [],
                      _jsonAttributes: [],
                      _geometryAttributes: [],
                      _virtualAttributes: [],
                      _defaultValues: { isDevoured: [Function: wrapper] },
                      fieldRawAttributesMap:
                       { id:
                          { type:
                             INTEGER {
                               options: { length: undefined },
                               _length: undefined,
                               _zerofill: undefined,
                               _decimals: undefined,
                               _precision: undefined,
                               _scale: undefined,
                               _unsigned: undefined },
                            allowNull: false,
                            primaryKey: true,
                            autoIncrement: true,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'id',
                            _modelAttribute: true,
                            field: 'id' },
                         name:
                          { type:
                             STRING {
                               options: { length: undefined, binary: undefined },
                               _binary: undefined,
                               _length: 255 },
                            allowNull: false,
                            validate: { len: [ 1, 140 ] },
                            Model: [Circular],
                            fieldName: 'name',
                            _modelAttribute: true,
                            field: 'name' },
                         isDevoured:
                          { type: BOOLEAN {},
                            allowNull: false,
                            defaultValue: false,
                            Model: [Circular],
                            fieldName: 'isDevoured',
                            _modelAttribute: true,
                            field: 'isDevoured' },
                         createdAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'createdAt',
                            _modelAttribute: true,
                            field: 'createdAt' },
                         updatedAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'updatedAt',
                            _modelAttribute: true,
                            field: 'updatedAt' } },
                      fieldAttributeMap: {},
                      uniqueKeys: {},
                      _hasBooleanAttributes: true,
                      _isBooleanAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasDateAttributes: true,
                      _isDateAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasHstoreAttributes: false,
                      _isHstoreAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasRangeAttributes: false,
                      _isRangeAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasJsonAttributes: false,
                      _isJsonAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasVirtualAttributes: false,
                      _isVirtualAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasGeometryAttributes: false,
                      _isGeometryAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasDefaultValues: true,
                      attributes:
                       { id:
                          { type:
                             INTEGER {
                               options: { length: undefined },
                               _length: undefined,
                               _zerofill: undefined,
                               _decimals: undefined,
                               _precision: undefined,
                               _scale: undefined,
                               _unsigned: undefined },
                            allowNull: false,
                            primaryKey: true,
                            autoIncrement: true,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'id',
                            _modelAttribute: true,
                            field: 'id' },
                         name:
                          { type:
                             STRING {
                               options: { length: undefined, binary: undefined },
                               _binary: undefined,
                               _length: 255 },
                            allowNull: false,
                            validate: { len: [ 1, 140 ] },
                            Model: [Circular],
                            fieldName: 'name',
                            _modelAttribute: true,
                            field: 'name' },
                         isDevoured:
                          { type: BOOLEAN {},
                            allowNull: false,
                            defaultValue: false,
                            Model: [Circular],
                            fieldName: 'isDevoured',
                            _modelAttribute: true,
                            field: 'isDevoured' },
                         createdAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'createdAt',
                            _modelAttribute: true,
                            field: 'createdAt' },
                         updatedAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'updatedAt',
                            _modelAttribute: true,
                            field: 'updatedAt' } },
                      tableAttributes:
                       { id:
                          { type:
                             INTEGER {
                               options: { length: undefined },
                               _length: undefined,
                               _zerofill: undefined,
                               _decimals: undefined,
                               _precision: undefined,
                               _scale: undefined,
                               _unsigned: undefined },
                            allowNull: false,
                            primaryKey: true,
                            autoIncrement: true,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'id',
                            _modelAttribute: true,
                            field: 'id' },
                         name:
                          { type:
                             STRING {
                               options: { length: undefined, binary: undefined },
                               _binary: undefined,
                               _length: 255 },
                            allowNull: false,
                            validate: { len: [ 1, 140 ] },
                            Model: [Circular],
                            fieldName: 'name',
                            _modelAttribute: true,
                            field: 'name' },
                         isDevoured:
                          { type: BOOLEAN {},
                            allowNull: false,
                            defaultValue: false,
                            Model: [Circular],
                            fieldName: 'isDevoured',
                            _modelAttribute: true,
                            field: 'isDevoured' },
                         createdAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'createdAt',
                            _modelAttribute: true,
                            field: 'createdAt' },
                         updatedAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'updatedAt',
                            _modelAttribute: true,
                            field: 'updatedAt' } },
                      primaryKeyAttributes: [ 'id' ],
                      primaryKeyAttribute: 'id',
                      primaryKeyField: 'id',
                      _hasPrimaryKeys: true,
                      _isPrimaryKey:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      autoIncrementAttribute: 'id',
                      _scope: {},
                      _scopeNames: [ 'defaultScope' ] } },
                modelManager:
                 ModelManager {
                   models:
                    [ { [Function: burgers]
                        sequelize: [Circular],
                        options: [Circular],
                        associations: {},
                        underscored: undefined,
                        tableName: 'burgers',
                        _schema: null,
                        _schemaDelimiter: '',
                        rawAttributes:
                         { id:
                            { type:
                               INTEGER {
                                 options: { length: undefined },
                                 _length: undefined,
                                 _zerofill: undefined,
                                 _decimals: undefined,
                                 _precision: undefined,
                                 _scale: undefined,
                                 _unsigned: undefined },
                              allowNull: false,
                              primaryKey: true,
                              autoIncrement: true,
                              _autoGenerated: true,
                              Model: [Circular],
                              fieldName: 'id',
                              _modelAttribute: true,
                              field: 'id' },
                           name:
                            { type:
                               STRING {
                                 options: { length: undefined, binary: undefined },
                                 _binary: undefined,
                                 _length: 255 },
                              allowNull: false,
                              validate: { len: [ 1, 140 ] },
                              Model: [Circular],
                              fieldName: 'name',
                              _modelAttribute: true,
                              field: 'name' },
                           isDevoured:
                            { type: BOOLEAN {},
                              allowNull: false,
                              defaultValue: false,
                              Model: [Circular],
                              fieldName: 'isDevoured',
                              _modelAttribute: true,
                              field: 'isDevoured' },
                           createdAt:
                            { type: DATE { options: { length: undefined }, _length: '' },
                              allowNull: false,
                              _autoGenerated: true,
                              Model: [Circular],
                              fieldName: 'createdAt',
                              _modelAttribute: true,
                              field: 'createdAt' },
                           updatedAt:
                            { type: DATE { options: { length: undefined }, _length: '' },
                              allowNull: false,
                              _autoGenerated: true,
                              Model: [Circular],
                              fieldName: 'updatedAt',
                              _modelAttribute: true,
                              field: 'updatedAt' } },
                        primaryKeys:
                         { id:
                            { type:
                               INTEGER {
                                 options: { length: undefined },
                                 _length: undefined,
                                 _zerofill: undefined,
                                 _decimals: undefined,
                                 _precision: undefined,
                                 _scale: undefined,
                                 _unsigned: undefined },
                              allowNull: false,
                              primaryKey: true,
                              autoIncrement: true,
                              _autoGenerated: true,
                              Model: [Circular],
                              fieldName: 'id',
                              _modelAttribute: true,
                              field: 'id' } },
                        _timestampAttributes: { createdAt: 'createdAt', updatedAt: 'updatedAt' },
                        _readOnlyAttributes: [ 'createdAt', 'updatedAt' ],
                        _hasReadOnlyAttributes: 2,
                        _isReadOnlyAttribute:
                         { [Function: memoized]
                           cache:
                            MapCache {
                              size: 0,
                              __data__:
                               { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                                 map: Map {},
                                 string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                        _dataTypeChanges:
                         { createdAt: [Function: _isChanged],
                           updatedAt: [Function: _isChanged] },
                        _dataTypeSanitizers:
                         { isDevoured: [Function: _sanitize],
                           createdAt: [Function: _sanitize],
                           updatedAt: [Function: _sanitize] },
                        _booleanAttributes: [ 'isDevoured' ],
                        _dateAttributes: [ 'createdAt', 'updatedAt' ],
                        _hstoreAttributes: [],
                        _rangeAttributes: [],
                        _jsonAttributes: [],
                        _geometryAttributes: [],
                        _virtualAttributes: [],
                        _defaultValues: { isDevoured: [Function: wrapper] },
                        fieldRawAttributesMap:
                         { id:
                            { type:
                               INTEGER {
                                 options: { length: undefined },
                                 _length: undefined,
                                 _zerofill: undefined,
                                 _decimals: undefined,
                                 _precision: undefined,
                                 _scale: undefined,
                                 _unsigned: undefined },
                              allowNull: false,
                              primaryKey: true,
                              autoIncrement: true,
                              _autoGenerated: true,
                              Model: [Circular],
                              fieldName: 'id',
                              _modelAttribute: true,
                              field: 'id' },
                           name:
                            { type:
                               STRING {
                                 options: { length: undefined, binary: undefined },
                                 _binary: undefined,
                                 _length: 255 },
                              allowNull: false,
                              validate: { len: [ 1, 140 ] },
                              Model: [Circular],
                              fieldName: 'name',
                              _modelAttribute: true,
                              field: 'name' },
                           isDevoured:
                            { type: BOOLEAN {},
                              allowNull: false,
                              defaultValue: false,
                              Model: [Circular],
                              fieldName: 'isDevoured',
                              _modelAttribute: true,
                              field: 'isDevoured' },
                           createdAt:
                            { type: DATE { options: { length: undefined }, _length: '' },
                              allowNull: false,
                              _autoGenerated: true,
                              Model: [Circular],
                              fieldName: 'createdAt',
                              _modelAttribute: true,
                              field: 'createdAt' },
                           updatedAt:
                            { type: DATE { options: { length: undefined }, _length: '' },
                              allowNull: false,
                              _autoGenerated: true,
                              Model: [Circular],
                              fieldName: 'updatedAt',
                              _modelAttribute: true,
                              field: 'updatedAt' } },
                        fieldAttributeMap: {},
                        uniqueKeys: {},
                        _hasBooleanAttributes: true,
                        _isBooleanAttribute:
                         { [Function: memoized]
                           cache:
                            MapCache {
                              size: 0,
                              __data__:
                               { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                                 map: Map {},
                                 string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                        _hasDateAttributes: true,
                        _isDateAttribute:
                         { [Function: memoized]
                           cache:
                            MapCache {
                              size: 0,
                              __data__:
                               { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                                 map: Map {},
                                 string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                        _hasHstoreAttributes: false,
                        _isHstoreAttribute:
                         { [Function: memoized]
                           cache:
                            MapCache {
                              size: 0,
                              __data__:
                               { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                                 map: Map {},
                                 string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                        _hasRangeAttributes: false,
                        _isRangeAttribute:
                         { [Function: memoized]
                           cache:
                            MapCache {
                              size: 0,
                              __data__:
                               { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                                 map: Map {},
                                 string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                        _hasJsonAttributes: false,
                        _isJsonAttribute:
                         { [Function: memoized]
                           cache:
                            MapCache {
                              size: 0,
                              __data__:
                               { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                                 map: Map {},
                                 string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                        _hasVirtualAttributes: false,
                        _isVirtualAttribute:
                         { [Function: memoized]
                           cache:
                            MapCache {
                              size: 0,
                              __data__:
                               { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                                 map: Map {},
                                 string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                        _hasGeometryAttributes: false,
                        _isGeometryAttribute:
                         { [Function: memoized]
                           cache:
                            MapCache {
                              size: 0,
                              __data__:
                               { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                                 map: Map {},
                                 string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                        _hasDefaultValues: true,
                        attributes:
                         { id:
                            { type:
                               INTEGER {
                                 options: { length: undefined },
                                 _length: undefined,
                                 _zerofill: undefined,
                                 _decimals: undefined,
                                 _precision: undefined,
                                 _scale: undefined,
                                 _unsigned: undefined },
                              allowNull: false,
                              primaryKey: true,
                              autoIncrement: true,
                              _autoGenerated: true,
                              Model: [Circular],
                              fieldName: 'id',
                              _modelAttribute: true,
                              field: 'id' },
                           name:
                            { type:
                               STRING {
                                 options: { length: undefined, binary: undefined },
                                 _binary: undefined,
                                 _length: 255 },
                              allowNull: false,
                              validate: { len: [ 1, 140 ] },
                              Model: [Circular],
                              fieldName: 'name',
                              _modelAttribute: true,
                              field: 'name' },
                           isDevoured:
                            { type: BOOLEAN {},
                              allowNull: false,
                              defaultValue: false,
                              Model: [Circular],
                              fieldName: 'isDevoured',
                              _modelAttribute: true,
                              field: 'isDevoured' },
                           createdAt:
                            { type: DATE { options: { length: undefined }, _length: '' },
                              allowNull: false,
                              _autoGenerated: true,
                              Model: [Circular],
                              fieldName: 'createdAt',
                              _modelAttribute: true,
                              field: 'createdAt' },
                           updatedAt:
                            { type: DATE { options: { length: undefined }, _length: '' },
                              allowNull: false,
                              _autoGenerated: true,
                              Model: [Circular],
                              fieldName: 'updatedAt',
                              _modelAttribute: true,
                              field: 'updatedAt' } },
                        tableAttributes:
                         { id:
                            { type:
                               INTEGER {
                                 options: { length: undefined },
                                 _length: undefined,
                                 _zerofill: undefined,
                                 _decimals: undefined,
                                 _precision: undefined,
                                 _scale: undefined,
                                 _unsigned: undefined },
                              allowNull: false,
                              primaryKey: true,
                              autoIncrement: true,
                              _autoGenerated: true,
                              Model: [Circular],
                              fieldName: 'id',
                              _modelAttribute: true,
                              field: 'id' },
                           name:
                            { type:
                               STRING {
                                 options: { length: undefined, binary: undefined },
                                 _binary: undefined,
                                 _length: 255 },
                              allowNull: false,
                              validate: { len: [ 1, 140 ] },
                              Model: [Circular],
                              fieldName: 'name',
                              _modelAttribute: true,
                              field: 'name' },
                           isDevoured:
                            { type: BOOLEAN {},
                              allowNull: false,
                              defaultValue: false,
                              Model: [Circular],
                              fieldName: 'isDevoured',
                              _modelAttribute: true,
                              field: 'isDevoured' },
                           createdAt:
                            { type: DATE { options: { length: undefined }, _length: '' },
                              allowNull: false,
                              _autoGenerated: true,
                              Model: [Circular],
                              fieldName: 'createdAt',
                              _modelAttribute: true,
                              field: 'createdAt' },
                           updatedAt:
                            { type: DATE { options: { length: undefined }, _length: '' },
                              allowNull: false,
                              _autoGenerated: true,
                              Model: [Circular],
                              fieldName: 'updatedAt',
                              _modelAttribute: true,
                              field: 'updatedAt' } },
                        primaryKeyAttributes: [ 'id' ],
                        primaryKeyAttribute: 'id',
                        primaryKeyField: 'id',
                        _hasPrimaryKeys: true,
                        _isPrimaryKey:
                         { [Function: memoized]
                           cache:
                            MapCache {
                              size: 0,
                              __data__:
                               { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                                 map: Map {},
                                 string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                        autoIncrementAttribute: 'id',
                        _scope: {},
                        _scopeNames: [ 'defaultScope' ] } ],
                   sequelize: [Circular] },
                connectionManager:
                 ConnectionManager {
                   sequelize: [Circular],
                   config:
                    { database: 'burger_db',
                      username: 'root',
                      password: 'password',
                      host: 'localhost',
                      port: 3306,
                      pool:
                       { max: 5,
                         min: 0,
                         acquire: 30000,
                         idle: 10000,
                         evict: 10000,
                         handleDisconnects: true,
                         validate: [Function: bound _validate],
                         Promise:
                          { [Function: Promise]
                            TypeError: [Function: TypeError],
                            RangeError: [Function: RangeError],
                            CancellationError: [Function: SubError],
                            TimeoutError: [Function: SubError],
                            OperationalError: [Function: OperationalError],
                            RejectionError: [Function: OperationalError],
                            AggregateError: [Function: SubError],
                            _peekContext: [Function],
                            onPossiblyUnhandledRejection: [Function],
                            onUnhandledRejectionHandled: [Function],
                            longStackTraces: [Function],
                            hasLongStackTraces: [Function],
                            config: [Function],
                            getNewLibraryCopy: [Function],
                            is: [Function],
                            fromCallback: [Function],
                            fromNode: [Function],
                            all: [Function],
                            cast: [Function],
                            fulfilled: [Function],
                            resolve: [Function],
                            rejected: [Function],
                            reject: [Function],
                            setScheduler: [Function],
                            pending: [Function],
                            defer: [Function],
                            method: [Function],
                            try: [Function],
                            attempt: [Function],
                            bind: [Function],
                            PromiseInspection: [Function: PromiseInspection],
                            join: [Function],
                            Promise: [Circular],
                            version: '3.5.3',
                            map: [Function],
                            using: [Function],
                            delay: [Function],
                            coroutine: { [Function] addYieldHandler: [Function] },
                            spawn: [Function],
                            promisify: [Function],
                            promisifyAll: [Function],
                            props: [Function],
                            race: [Function],
                            reduce: [Function],
                            settle: [Function],
                            some: [Function],
                            _SomePromiseArray: [Function: SomePromiseArray],
                            filter: [Function],
                            each: [Function],
                            mapSeries: [Function: PromiseMapSeries],
                            any: [Function],
                            default: [Circular] } },
                      protocol: 'tcp',
                      native: false,
                      ssl: undefined,
                      replication: false,
                      dialectModulePath: null,
                      keepDefaultTimezone: undefined,
                      dialectOptions: undefined },
                   dialect:
                    MysqlDialect {
                      sequelize: [Circular],
                      connectionManager: [Circular],
                      QueryGenerator:
                       { dialect: 'mysql',
                         OperatorMap:
                          { [Symbol(eq)]: '=',
                            [Symbol(ne)]: '!=',
                            [Symbol(gte)]: '>=',
                            [Symbol(gt)]: '>',
                            [Symbol(lte)]: '<=',
                            [Symbol(lt)]: '<',
                            [Symbol(not)]: 'IS NOT',
                            [Symbol(is)]: 'IS',
                            [Symbol(in)]: 'IN',
                            [Symbol(notIn)]: 'NOT IN',
                            [Symbol(like)]: 'LIKE',
                            [Symbol(notLike)]: 'NOT LIKE',
                            [Symbol(iLike)]: 'ILIKE',
                            [Symbol(notILike)]: 'NOT ILIKE',
                            [Symbol(regexp)]: 'REGEXP',
                            [Symbol(notRegexp)]: 'NOT REGEXP',
                            [Symbol(iRegexp)]: '~*',
                            [Symbol(notIRegexp)]: '!~*',
                            [Symbol(between)]: 'BETWEEN',
                            [Symbol(notBetween)]: 'NOT BETWEEN',
                            [Symbol(overlap)]: '&&',
                            [Symbol(contains)]: '@>',
                            [Symbol(contained)]: '<@',
                            [Symbol(adjacent)]: '-|-',
                            [Symbol(strictLeft)]: '<<',
                            [Symbol(strictRight)]: '>>',
                            [Symbol(noExtendRight)]: '&<',
                            [Symbol(noExtendLeft)]: '&>',
                            [Symbol(any)]: 'ANY',
                            [Symbol(all)]: 'ALL',
                            [Symbol(and)]: ' AND ',
                            [Symbol(or)]: ' OR ',
                            [Symbol(col)]: 'COL',
                            [Symbol(placeholder)]: '$$PLACEHOLDER$$',
                            [Symbol(raw)]: 'DEPRECATED' },
                         createSchema: [Function: createSchema],
                         showSchemasQuery: [Function: showSchemasQuery],
                         versionQuery: [Function: versionQuery],
                         createTableQuery: [Function: createTableQuery],
                         showTablesQuery: [Function: showTablesQuery],
                         addColumnQuery: [Function: addColumnQuery],
                         removeColumnQuery: [Function: removeColumnQuery],
                         changeColumnQuery: [Function: changeColumnQuery],
                         renameColumnQuery: [Function: renameColumnQuery],
                         handleSequelizeMethod: [Function: handleSequelizeMethod],
                         _toJSONValue: [Function: _toJSONValue],
                         upsertQuery: [Function: upsertQuery],
                         deleteQuery: [Function: deleteQuery],
                         showIndexesQuery: [Function: showIndexesQuery],
                         showConstraintsQuery: [Function: showConstraintsQuery],
                         removeIndexQuery: [Function: removeIndexQuery],
                         attributeToSQL: [Function: attributeToSQL],
                         attributesToSQL: [Function: attributesToSQL],
                         quoteIdentifier: [Function: quoteIdentifier],
                         _checkValidJsonStatement: [Function: _checkValidJsonStatement],
                         jsonPathExtractionQuery: [Function: jsonPathExtractionQuery],
                         _getForeignKeysQueryFields: [Function: _getForeignKeysQueryFields],
                         getForeignKeysQuery: [Function: getForeignKeysQuery],
                         getForeignKeyQuery: [Function: getForeignKeyQuery],
                         dropForeignKeyQuery: [Function: dropForeignKeyQuery],
                         _templateSettings:
                          { escape: /<%-([\s\S]+?)%>/g,
                            evaluate: /<%([\s\S]+?)%>/g,
                            interpolate: /<%=([\s\S]+?)%>/g,
                            variable: '',
                            imports:
                             { _:
                                { [Function: lodash]
                                  templateSettings: [Circular],
                                  after: [Function: after],
                                  ary: [Function: ary],
                                  assign: [Function],
                                  assignIn: [Function],
                                  assignInWith: [Function],
                                  assignWith: [Function],
                                  at: [Function],
                                  before: [Function: before],
                                  bind: { [Function] placeholder: [Circular] },
                                  bindAll: [Function],
                                  bindKey: { [Function] placeholder: [Circular] },
                                  castArray: [Function: castArray],
                                  chain: [Function: chain],
                                  chunk: [Function: chunk],
                                  compact: [Function: compact],
                                  concat: [Function: concat],
                                  cond: [Function: cond],
                                  conforms: [Function: conforms],
                                  constant: [Function: constant],
                                  countBy: [Function],
                                  create: [Function: create],
                                  curry: { [Function: curry] placeholder: [Circular] },
                                  curryRight: { [Function: curryRight] placeholder: [Circular] },
                                  debounce: [Function: debounce],
                                  defaults: [Function],
                                  defaultsDeep: [Function],
                                  defer: [Function],
                                  delay: [Function],
                                  difference: [Function],
                                  differenceBy: [Function],
                                  differenceWith: [Function],
                                  drop: [Function: drop],
                                  dropRight: [Function: dropRight],
                                  dropRightWhile: [Function: dropRightWhile],
                                  dropWhile: [Function: dropWhile],
                                  fill: [Function: fill],
                                  filter: [Function: filter],
                                  flatMap: [Function: flatMap],
                                  flatMapDeep: [Function: flatMapDeep],
                                  flatMapDepth: [Function: flatMapDepth],
                                  flatten: [Function: flatten],
                                  flattenDeep: [Function: flattenDeep],
                                  flattenDepth: [Function: flattenDepth],
                                  flip: [Function: flip],
                                  flow: [Function],
                                  flowRight: [Function],
                                  fromPairs: [Function: fromPairs],
                                  functions: [Function: functions],
                                  functionsIn: [Function: functionsIn],
                                  groupBy: [Function],
                                  initial: [Function: initial],
                                  intersection: [Function],
                                  intersectionBy: [Function],
                                  intersectionWith: [Function],
                                  invert: [Function],
                                  invertBy: [Function],
                                  invokeMap: [Function],
                                  iteratee: [Function: iteratee],
                                  keyBy: [Function],
                                  keys: [Function: keys],
                                  keysIn: [Function: keysIn],
                                  map: [Function: map],
                                  mapKeys: [Function: mapKeys],
                                  mapValues: [Function: mapValues],
                                  matches: [Function: matches],
                                  matchesProperty: [Function: matchesProperty],
                                  memoize: { [Function: memoize] Cache: [Function: MapCache] },
                                  merge: [Function],
                                  mergeWith: [Function],
                                  method: [Function],
                                  methodOf: [Function],
                                  mixin: [Function: mixin],
                                  negate: [Function: negate],
                                  nthArg: [Function: nthArg],
                                  omit: [Function],
                                  omitBy: [Function: omitBy],
                                  once: [Function: once],
                                  orderBy: [Function: orderBy],
                                  over: [Function],
                                  overArgs: [Function],
                                  overEvery: [Function],
                                  overSome: [Function],
                                  partial: { [Function] placeholder: [Circular] },
                                  partialRight: { [Function] placeholder: [Circular] },
                                  partition: [Function],
                                  pick: [Function],
                                  pickBy: [Function: pickBy],
                                  property: [Function: property],
                                  propertyOf: [Function: propertyOf],
                                  pull: [Function],
                                  pullAll: [Function: pullAll],
                                  pullAllBy: [Function: pullAllBy],
                                  pullAllWith: [Function: pullAllWith],
                                  pullAt: [Function],
                                  range: [Function],
                                  rangeRight: [Function],
                                  rearg: [Function],
                                  reject: [Function: reject],
                                  remove: [Function: remove],
                                  rest: [Function: rest],
                                  reverse: [Function: reverse],
                                  sampleSize: [Function: sampleSize],
                                  set: [Function: set],
                                  setWith: [Function: setWith],
                                  shuffle: [Function: shuffle],
                                  slice: [Function: slice],
                                  sortBy: [Function],
                                  sortedUniq: [Function: sortedUniq],
                                  sortedUniqBy: [Function: sortedUniqBy],
                                  split: [Function: split],
                                  spread: [Function: spread],
                                  tail: [Function: tail],
                                  take: [Function: take],
                                  takeRight: [Function: takeRight],
                                  takeRightWhile: [Function: takeRightWhile],
                                  takeWhile: [Function: takeWhile],
                                  tap: [Function: tap],
                                  throttle: [Function: throttle],
                                  thru: [Function: thru],
                                  toArray: [Function: toArray],
                                  toPairs: [Function],
                                  toPairsIn: [Function],
                                  toPath: [Function: toPath],
                                  toPlainObject: [Function: toPlainObject],
                                  transform: [Function: transform],
                                  unary: [Function: unary],
                                  union: [Function],
                                  unionBy: [Function],
                                  unionWith: [Function],
                                  uniq: [Function: uniq],
                                  uniqBy: [Function: uniqBy],
                                  uniqWith: [Function: uniqWith],
                                  unset: [Function: unset],
                                  unzip: [Function: unzip],
                                  unzipWith: [Function: unzipWith],
                                  update: [Function: update],
                                  updateWith: [Function: updateWith],
                                  values: [Function: values],
                                  valuesIn: [Function: valuesIn],
                                  without: [Function],
                                  words: [Function: words],
                                  wrap: [Function: wrap],
                                  xor: [Function],
                                  xorBy: [Function],
                                  xorWith: [Function],
                                  zip: [Function],
                                  zipObject: [Function: zipObject],
                                  zipObjectDeep: [Function: zipObjectDeep],
                                  zipWith: [Function],
                                  entries: [Function],
                                  entriesIn: [Function],
                                  extend: [Function],
                                  extendWith: [Function],
                                  add: [Function],
                                  attempt: [Function],
                                  camelCase: [Function],
                                  capitalize: [Function: capitalize],
                                  ceil: [Function],
                                  clamp: [Function: clamp],
                                  clone: [Function: clone],
                                  cloneDeep: [Function: cloneDeep],
                                  cloneDeepWith: [Function: cloneDeepWith],
                                  cloneWith: [Function: cloneWith],
                                  conformsTo: [Function: conformsTo],
                                  deburr: [Function: deburr],
                                  defaultTo: [Function: defaultTo],
                                  divide: [Function],
                                  endsWith: [Function: endsWith],
                                  eq: [Function: eq],
                                  escape: [Function: escape],
                                  escapeRegExp: [Function: escapeRegExp],
                                  every: [Function: every],
                                  find: [Function],
                                  findIndex: [Function: findIndex],
                                  findKey: [Function: findKey],
                                  findLast: [Function],
                                  findLastIndex: [Function: findLastIndex],
                                  findLastKey: [Function: findLastKey],
                                  floor: [Function],
                                  forEach: [Function: forEach],
                                  forEachRight: [Function: forEachRight],
                                  forIn: [Function: forIn],
                                  forInRight: [Function: forInRight],
                                  forOwn: [Function: forOwn],
                                  forOwnRight: [Function: forOwnRight],
                                  get: [Function: get],
                                  gt: [Function],
                                  gte: [Function],
                                  has: [Function: has],
                                  hasIn: [Function: hasIn],
                                  head: [Function: head],
                                  identity: [Function: identity],
                                  includes: [Function: includes],
                                  indexOf: [Function: indexOf],
                                  inRange: [Function: inRange],
                                  invoke: [Function],
                                  isArguments: [Function: baseIsArguments],
                                  isArray: [Function: isArray],
                                  isArrayBuffer: [Function],
                                  isArrayLike: [Function: isArrayLike],
                                  isArrayLikeObject: [Function: isArrayLikeObject],
                                  isBoolean: [Function: isBoolean],
                                  isBuffer: [Function: isBuffer],
                                  isDate: [Function],
                                  isElement: [Function: isElement],
                                  isEmpty: [Function: isEmpty],
                                  isEqual: [Function: isEqual],
                                  isEqualWith: [Function: isEqualWith],
                                  isError: [Function: isError],
                                  isFinite: [Function: isFinite],
                                  isFunction: [Function: isFunction],
                                  isInteger: [Function: isInteger],
                                  isLength: [Function: isLength],
                                  isMap: [Function],
                                  isMatch: [Function: isMatch],
                                  isMatchWith: [Function: isMatchWith],
                                  isNaN: [Function: isNaN],
                                  isNative: [Function: isNative],
                                  isNil: [Function: isNil],
                                  isNull: [Function: isNull],
                                  isNumber: [Function: isNumber],
                                  isObject: [Function: isObject],
                                  isObjectLike: [Function: isObjectLike],
                                  isPlainObject: [Function: isPlainObject],
                                  isRegExp: [Function],
                                  isSafeInteger: [Function: isSafeInteger],
                                  isSet: [Function],
                                  isString: [Function: isString],
                                  isSymbol: [Function: isSymbol],
                                  isTypedArray: [Function],
                                  isUndefined: [Function: isUndefined],
                                  isWeakMap: [Function: isWeakMap],
                                  isWeakSet: [Function: isWeakSet],
                                  join: [Function: join],
                                  kebabCase: [Function],
                                  last: [Function: last],
                                  lastIndexOf: [Function: lastIndexOf],
                                  lowerCase: [Function],
                                  lowerFirst: [Function],
                                  lt: [Function],
                                  lte: [Function],
                                  max: [Function: max],
                                  maxBy: [Function: maxBy],
                                  mean: [Function: mean],
                                  meanBy: [Function: meanBy],
                                  min: [Function: min],
                                  minBy: [Function: minBy],
                                  stubArray: [Function: stubArray],
                                  stubFalse: [Function: stubFalse],
                                  stubObject: [Function: stubObject],
                                  stubString: [Function: stubString],
                                  stubTrue: [Function: stubTrue],
                                  multiply: [Function],
                                  nth: [Function: nth],
                                  noConflict: [Function: noConflict],
                                  noop: [Function: noop],
                                  now: [Function],
                                  pad: [Function: pad],
                                  padEnd: [Function: padEnd],
                                  padStart: [Function: padStart],
                                  parseInt: [Function: parseInt],
                                  random: [Function: random],
                                  reduce: [Function: reduce],
                                  reduceRight: [Function: reduceRight],
                                  repeat: [Function: repeat],
                                  replace: [Function: replace],
                                  result: [Function: result],
                                  round: [Function],
                                  runInContext: [Function: runInContext],
                                  sample: [Function: sample],
                                  size: [Function: size],
                                  snakeCase: [Function],
                                  some: [Function: some],
                                  sortedIndex: [Function: sortedIndex],
                                  sortedIndexBy: [Function: sortedIndexBy],
                                  sortedIndexOf: [Function: sortedIndexOf],
                                  sortedLastIndex: [Function: sortedLastIndex],
                                  sortedLastIndexBy: [Function: sortedLastIndexBy],
                                  sortedLastIndexOf: [Function: sortedLastIndexOf],
                                  startCase: [Function],
                                  startsWith: [Function: startsWith],
                                  subtract: [Function],
                                  sum: [Function: sum],
                                  sumBy: [Function: sumBy],
                                  template: [Function: template],
                                  times: [Function: times],
                                  toFinite: [Function: toFinite],
                                  toInteger: [Function: toInteger],
                                  toLength: [Function: toLength],
                                  toLower: [Function: toLower],
                                  toNumber: [Function: toNumber],
                                  toSafeInteger: [Function: toSafeInteger],
                                  toString: [Function: toString],
                                  toUpper: [Function: toUpper],
                                  trim: [Function: trim],
                                  trimEnd: [Function: trimEnd],
                                  trimStart: [Function: trimStart],
                                  truncate: [Function: truncate],
                                  unescape: [Function: unescape],
                                  uniqueId: [Function: uniqueId],
                                  upperCase: [Function],
                                  upperFirst: [Function],
                                  each: [Function: forEach],
                                  eachRight: [Function: forEachRight],
                                  first: [Function: head],
                                  VERSION: '4.17.11' } } },
                         options:
                          { dialect: 'mysql',
                            dialectModulePath: null,
                            host: 'localhost',
                            protocol: 'tcp',
                            define:
                             { underscored: false, freezeTableName: true, timestamps: true },
                            query: {},
                            sync: {},
                            timezone: '+00:00',
                            logging: false,
                            omitNull: false,
                            native: false,
                            replication: false,
                            ssl: undefined,
                            pool: { max: 5, min: 0, acquire: 30000, idle: 10000 },
                            quoteIdentifiers: true,
                            hooks: {},
                            retry: { max: 5, match: [ 'SQLITE_BUSY: database is locked' ] },
                            transactionType: 'DEFERRED',
                            isolationLevel: null,
                            databaseVersion: '5.7.25',
                            typeValidation: false,
                            benchmark: false,
                            operatorsAliases: false,
                            username: 'root',
                            password: 'password',
                            database: 'burger_db',
                            port: 3306 },
                         extractTableDetails: [Function: extractTableDetails],
                         addSchema: [Function: addSchema],
                         dropSchema: [Function: dropSchema],
                         describeTableQuery: [Function: describeTableQuery],
                         dropTableQuery: [Function: dropTableQuery],
                         renameTableQuery: [Function: renameTableQuery],
                         insertQuery: [Function: insertQuery],
                         bulkInsertQuery: [Function: bulkInsertQuery],
                         updateQuery: [Function: updateQuery],
                         arithmeticQuery: [Function: arithmeticQuery],
                         nameIndexes: [Function: nameIndexes],
                         addIndexQuery: [Function: addIndexQuery],
                         addConstraintQuery: [Function: addConstraintQuery],
                         getConstraintSnippet: [Function: getConstraintSnippet],
                         removeConstraintQuery: [Function: removeConstraintQuery],
                         quoteTable: [Function: quoteTable],
                         quote: [Function: quote],
                         quoteIdentifiers: [Function: quoteIdentifiers],
                         escape: [Function: escape],
                         selectQuery: [Function: selectQuery],
                         escapeAttributes: [Function: escapeAttributes],
                         generateInclude: [Function: generateInclude],
                         generateJoin: [Function: generateJoin],
                         generateThroughJoin: [Function: generateThroughJoin],
                         _generateSubQueryFilter: [Function: _generateSubQueryFilter],
                         _getRequiredClosure: [Function: _getRequiredClosure],
                         getQueryOrders: [Function: getQueryOrders],
                         selectFromTableFragment: [Function: selectFromTableFragment],
                         setAutocommitQuery: [Function: setAutocommitQuery],
                         setIsolationLevelQuery: [Function: setIsolationLevelQuery],
                         generateTransactionId: [Function: generateTransactionId],
                         startTransactionQuery: [Function: startTransactionQuery],
                         deferConstraintsQuery: [Function: deferConstraintsQuery],
                         setConstraintQuery: [Function: setConstraintQuery],
                         setDeferredQuery: [Function: setDeferredQuery],
                         setImmediateQuery: [Function: setImmediateQuery],
                         commitTransactionQuery: [Function: commitTransactionQuery],
                         rollbackTransactionQuery: [Function: rollbackTransactionQuery],
                         addLimitAndOffset: [Function: addLimitAndOffset],
                         whereQuery: [Function: whereQuery],
                         whereItemsQuery: [Function: whereItemsQuery],
                         OperatorsAliasMap: false,
                         setOperatorsAliases: [Function: setOperatorsAliases],
                         whereItemQuery: [Function: whereItemQuery],
                         _findField: [Function: _findField],
                         _replaceAliases: [Function: _replaceAliases],
                         _whereGroupBind: [Function: _whereGroupBind],
                         _whereBind: [Function: _whereBind],
                         _whereJSON: [Function: _whereJSON],
                         _traverseJSON: [Function: _traverseJSON],
                         _castKey: [Function: _castKey],
                         _getJsonCast: [Function: _getJsonCast],
                         _joinKeyValue: [Function: _joinKeyValue],
                         _getSafeKey: [Function: _getSafeKey],
                         _prefixKey: [Function: _prefixKey],
                         _whereParseSingleValueObject: [Function: _whereParseSingleValueObject],
                         getWhereConditions: [Function: getWhereConditions],
                         parseConditionObject: [Function: parseConditionObject],
                         isIdentifierQuoted: [Function: isIdentifierQuoted],
                         booleanValue: [Function: booleanValue],
                         _dialect: [Circular],
                         sequelize: [Circular],
                         typeValidation: undefined } },
                   versionPromise: null,
                   dialectName: 'mysql',
                   pool:
                    Pool {
                      _events: [Object: null prototype] {},
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      _config:
                       PoolOptions {
                         fifo: true,
                         priorityRange: 1,
                         testOnBorrow: true,
                         testOnReturn: false,
                         autostart: false,
                         acquireTimeoutMillis: 30000,
                         max: 5,
                         min: 0,
                         evictionRunIntervalMillis: 10000,
                         numTestsPerEvictionRun: 3,
                         softIdleTimeoutMillis: -1,
                         idleTimeoutMillis: 10000,
                         Promise:
                          { [Function: Promise]
                            TypeError: [Function: TypeError],
                            RangeError: [Function: RangeError],
                            CancellationError: [Function: SubError],
                            TimeoutError: [Function: SubError],
                            OperationalError: [Function: OperationalError],
                            RejectionError: [Function: OperationalError],
                            AggregateError: [Function: SubError],
                            _peekContext: [Function],
                            onPossiblyUnhandledRejection: [Function],
                            onUnhandledRejectionHandled: [Function],
                            longStackTraces: [Function],
                            hasLongStackTraces: [Function],
                            config: [Function],
                            getNewLibraryCopy: [Function],
                            is: [Function],
                            fromCallback: [Function],
                            fromNode: [Function],
                            all: [Function],
                            cast: [Function],
                            fulfilled: [Function],
                            resolve: [Function],
                            rejected: [Function],
                            reject: [Function],
                            setScheduler: [Function],
                            pending: [Function],
                            defer: [Function],
                            method: [Function],
                            try: [Function],
                            attempt: [Function],
                            bind: [Function],
                            PromiseInspection: [Function: PromiseInspection],
                            join: [Function],
                            Promise: [Circular],
                            version: '3.5.3',
                            map: [Function],
                            using: [Function],
                            delay: [Function],
                            coroutine: { [Function] addYieldHandler: [Function] },
                            spawn: [Function],
                            promisify: [Function],
                            promisifyAll: [Function],
                            props: [Function],
                            race: [Function],
                            reduce: [Function],
                            settle: [Function],
                            some: [Function],
                            _SomePromiseArray: [Function: SomePromiseArray],
                            filter: [Function],
                            each: [Function],
                            mapSeries: [Function: PromiseMapSeries],
                            any: [Function],
                            default: [Circular] } },
                      _Promise:
                       { [Function: Promise]
                         TypeError: [Function: TypeError],
                         RangeError: [Function: RangeError],
                         CancellationError: [Function: SubError],
                         TimeoutError: [Function: SubError],
                         OperationalError: [Function: OperationalError],
                         RejectionError: [Function: OperationalError],
                         AggregateError: [Function: SubError],
                         _peekContext: [Function],
                         onPossiblyUnhandledRejection: [Function],
                         onUnhandledRejectionHandled: [Function],
                         longStackTraces: [Function],
                         hasLongStackTraces: [Function],
                         config: [Function],
                         getNewLibraryCopy: [Function],
                         is: [Function],
                         fromCallback: [Function],
                         fromNode: [Function],
                         all: [Function],
                         cast: [Function],
                         fulfilled: [Function],
                         resolve: [Function],
                         rejected: [Function],
                         reject: [Function],
                         setScheduler: [Function],
                         pending: [Function],
                         defer: [Function],
                         method: [Function],
                         try: [Function],
                         attempt: [Function],
                         bind: [Function],
                         PromiseInspection: [Function: PromiseInspection],
                         join: [Function],
                         Promise: [Circular],
                         version: '3.5.3',
                         map: [Function],
                         using: [Function],
                         delay: [Function],
                         coroutine: { [Function] addYieldHandler: [Function] },
                         spawn: [Function],
                         promisify: [Function],
                         promisifyAll: [Function],
                         props: [Function],
                         race: [Function],
                         reduce: [Function],
                         settle: [Function],
                         some: [Function],
                         _SomePromiseArray: [Function: SomePromiseArray],
                         filter: [Function],
                         each: [Function],
                         mapSeries: [Function: PromiseMapSeries],
                         any: [Function],
                         default: [Circular] },
                      _factory:
                       { create: [Function: create],
                         destroy: [Function: destroy],
                         validate: [Function: bound _validate] },
                      _draining: false,
                      _started: true,
                      _waitingClientsQueue:
                       PriorityQueue {
                         _size: 1,
                         _slots:
                          [ Queue {
                              _list: DoublyLinkedList { head: null, tail: null, length: 0 } } ] },
                      _factoryCreateOperations: Set {},
                      _factoryDestroyOperations: Set {},
                      _availableObjects:
                       Deque {
                         _list:
                          DoublyLinkedList {
                            head:
                             { prev: null,
                               next: null,
                               data:
                                PooledResource {
                                  creationTime: 1551536074757,
                                  lastReturnTime: 1551536078184,
                                  lastBorrowTime: 1551536078176,
                                  lastIdleTime: 1551536078184,
                                  obj:
                                   Connection {
                                     _events: [Object: null prototype] { error: [Function: errorHandler] },
                                     _eventsCount: 1,
                                     _maxListeners: undefined,
                                     config:
                                      ConnectionConfig {
                                        isServer: undefined,
                                        stream: undefined,
                                        host: 'localhost',
                                        port: 3306,
                                        localAddress: undefined,
                                        socketPath: undefined,
                                        user: 'root',
                                        password: 'password',
                                        passwordSha1: undefined,
                                        database: 'burger_db',
                                        connectTimeout: 10000,
                                        insecureAuth: false,
                                        supportBigNumbers: true,
                                        bigNumberStrings: false,
                                        decimalNumbers: false,
                                        dateStrings: false,
                                        debug: undefined,
                                        trace: true,
                                        stringifyObjects: false,
                                        timezone: '+00:00',
                                        queryFormat: undefined,
                                        pool: undefined,
                                        ssl: false,
                                        multipleStatements: false,
                                        rowsAsArray: false,
                                        namedPlaceholders: false,
                                        nestTables: undefined,
                                        typeCast: [Function: bound _typecast],
                                        maxPacketSize: 0,
                                        charsetNumber: 224,
                                        compress: false,
                                        authSwitchHandler: undefined,
                                        clientFlags: 8582093,
                                        connectAttributes: undefined,
                                        maxPreparedStatements: 16000 },
                                     stream:
                                      Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           error: [Function: bound _handleNetworkError],
                                           data: [Function],
                                           close: [Function] },
                                        _eventsCount: 4,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: false,
                                           needDrain: false,
                                           ending: false,
                                           ended: false,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 0,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: true,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        [Symbol(asyncId)]: 29,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 },
                                     _internalId: 1,
                                     _commands:
                                      Denque {
                                        _head: 0,
                                        _tail: 0,
                                        _capacityMask: 3,
                                        _list: [ <4 empty items> ] },
                                     _command: undefined,
                                     _paused: false,
                                     _paused_packets:
                                      Denque {
                                        _head: 0,
                                        _tail: 0,
                                        _capacityMask: 3,
                                        _list: [ <4 empty items> ] },
                                     _statements:
                                      LRUCache {
                                        [Symbol(max)]: 16000,
                                        [Symbol(lengthCalculator)]: [Function: naiveLength],
                                        [Symbol(allowStale)]: false,
                                        [Symbol(maxAge)]: 0,
                                        [Symbol(dispose)]: [Function: dispose],
                                        [Symbol(noDisposeOnSet)]: false,
                                        [Symbol(cache)]: Map {},
                                        [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                        [Symbol(length)]: 0 },
                                     serverCapabilityFlags: 2181036031,
                                     authorized: true,
                                     sequenceId: 12,
                                     compressedSequenceId: 0,
                                     threadId: 432,
                                     _handshakePacket:
                                      Handshake {
                                        protocolVersion: 10,
                                        serverVersion: '5.7.25',
                                        capabilityFlags: 2181036031,
                                        connectionId: 432,
                                        authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                        authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                        characterSet: 8,
                                        statusFlags: 2 },
                                     _fatalError: null,
                                     _protocolError: null,
                                     _outOfOrderPackets: [],
                                     clientEncoding: 'utf8',
                                     packetParser:
                                      PacketParser {
                                        buffer: [],
                                        bufferLength: 0,
                                        packetHeaderLength: 4,
                                        headerLen: 0,
                                        length: 5,
                                        largePacketParts: [],
                                        firstPacketSequenceId: 0,
                                        onPacket: [Function],
                                        execute: [Function: executeStart],
                                        _flushLargePacket: [Function: _flushLargePacket4] },
                                     serverEncoding: 'latin1',
                                     connectTimeout: null,
                                     connectionId: 432 },
                                  state: 'IDLE' } },
                            tail:
                             { prev: null,
                               next: null,
                               data:
                                PooledResource {
                                  creationTime: 1551536074757,
                                  lastReturnTime: 1551536078184,
                                  lastBorrowTime: 1551536078176,
                                  lastIdleTime: 1551536078184,
                                  obj:
                                   Connection {
                                     _events: [Object: null prototype] { error: [Function: errorHandler] },
                                     _eventsCount: 1,
                                     _maxListeners: undefined,
                                     config:
                                      ConnectionConfig {
                                        isServer: undefined,
                                        stream: undefined,
                                        host: 'localhost',
                                        port: 3306,
                                        localAddress: undefined,
                                        socketPath: undefined,
                                        user: 'root',
                                        password: 'password',
                                        passwordSha1: undefined,
                                        database: 'burger_db',
                                        connectTimeout: 10000,
                                        insecureAuth: false,
                                        supportBigNumbers: true,
                                        bigNumberStrings: false,
                                        decimalNumbers: false,
                                        dateStrings: false,
                                        debug: undefined,
                                        trace: true,
                                        stringifyObjects: false,
                                        timezone: '+00:00',
                                        queryFormat: undefined,
                                        pool: undefined,
                                        ssl: false,
                                        multipleStatements: false,
                                        rowsAsArray: false,
                                        namedPlaceholders: false,
                                        nestTables: undefined,
                                        typeCast: [Function: bound _typecast],
                                        maxPacketSize: 0,
                                        charsetNumber: 224,
                                        compress: false,
                                        authSwitchHandler: undefined,
                                        clientFlags: 8582093,
                                        connectAttributes: undefined,
                                        maxPreparedStatements: 16000 },
                                     stream:
                                      Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           error: [Function: bound _handleNetworkError],
                                           data: [Function],
                                           close: [Function] },
                                        _eventsCount: 4,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: false,
                                           needDrain: false,
                                           ending: false,
                                           ended: false,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 0,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: true,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        [Symbol(asyncId)]: 29,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 },
                                     _internalId: 1,
                                     _commands:
                                      Denque {
                                        _head: 0,
                                        _tail: 0,
                                        _capacityMask: 3,
                                        _list: [ <4 empty items> ] },
                                     _command: undefined,
                                     _paused: false,
                                     _paused_packets:
                                      Denque {
                                        _head: 0,
                                        _tail: 0,
                                        _capacityMask: 3,
                                        _list: [ <4 empty items> ] },
                                     _statements:
                                      LRUCache {
                                        [Symbol(max)]: 16000,
                                        [Symbol(lengthCalculator)]: [Function: naiveLength],
                                        [Symbol(allowStale)]: false,
                                        [Symbol(maxAge)]: 0,
                                        [Symbol(dispose)]: [Function: dispose],
                                        [Symbol(noDisposeOnSet)]: false,
                                        [Symbol(cache)]: Map {},
                                        [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                        [Symbol(length)]: 0 },
                                     serverCapabilityFlags: 2181036031,
                                     authorized: true,
                                     sequenceId: 12,
                                     compressedSequenceId: 0,
                                     threadId: 432,
                                     _handshakePacket:
                                      Handshake {
                                        protocolVersion: 10,
                                        serverVersion: '5.7.25',
                                        capabilityFlags: 2181036031,
                                        connectionId: 432,
                                        authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                        authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                        characterSet: 8,
                                        statusFlags: 2 },
                                     _fatalError: null,
                                     _protocolError: null,
                                     _outOfOrderPackets: [],
                                     clientEncoding: 'utf8',
                                     packetParser:
                                      PacketParser {
                                        buffer: [],
                                        bufferLength: 0,
                                        packetHeaderLength: 4,
                                        headerLen: 0,
                                        length: 5,
                                        largePacketParts: [],
                                        firstPacketSequenceId: 0,
                                        onPacket: [Function],
                                        execute: [Function: executeStart],
                                        _flushLargePacket: [Function: _flushLargePacket4] },
                                     serverEncoding: 'latin1',
                                     connectTimeout: null,
                                     connectionId: 432 },
                                  state: 'IDLE' } },
                            length: 1 } },
                      _testOnBorrowResources: Set {},
                      _testOnReturnResources: Set {},
                      _validationOperations: Set {},
                      _allObjects:
                       Set {
                         PooledResource {
                           creationTime: 1551536074757,
                           lastReturnTime: 1551536078184,
                           lastBorrowTime: 1551536078176,
                           lastIdleTime: 1551536078184,
                           obj:
                            Connection {
                              _events: [Object: null prototype] { error: [Function: errorHandler] },
                              _eventsCount: 1,
                              _maxListeners: undefined,
                              config:
                               ConnectionConfig {
                                 isServer: undefined,
                                 stream: undefined,
                                 host: 'localhost',
                                 port: 3306,
                                 localAddress: undefined,
                                 socketPath: undefined,
                                 user: 'root',
                                 password: 'password',
                                 passwordSha1: undefined,
                                 database: 'burger_db',
                                 connectTimeout: 10000,
                                 insecureAuth: false,
                                 supportBigNumbers: true,
                                 bigNumberStrings: false,
                                 decimalNumbers: false,
                                 dateStrings: false,
                                 debug: undefined,
                                 trace: true,
                                 stringifyObjects: false,
                                 timezone: '+00:00',
                                 queryFormat: undefined,
                                 pool: undefined,
                                 ssl: false,
                                 multipleStatements: false,
                                 rowsAsArray: false,
                                 namedPlaceholders: false,
                                 nestTables: undefined,
                                 typeCast: [Function: bound _typecast],
                                 maxPacketSize: 0,
                                 charsetNumber: 224,
                                 compress: false,
                                 authSwitchHandler: undefined,
                                 clientFlags: 8582093,
                                 connectAttributes: undefined,
                                 maxPreparedStatements: 16000 },
                              stream:
                               Socket {
                                 connecting: false,
                                 _hadError: false,
                                 _handle:
                                  TCP {
                                    reading: true,
                                    onread: [Function: onStreamRead],
                                    onconnection: null,
                                    [Symbol(owner)]: [Circular] },
                                 _parent: null,
                                 _host: 'localhost',
                                 _readableState:
                                  ReadableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    buffer: BufferList { head: null, tail: null, length: 0 },
                                    length: 0,
                                    pipes: null,
                                    pipesCount: 0,
                                    flowing: true,
                                    ended: false,
                                    endEmitted: false,
                                    reading: true,
                                    sync: false,
                                    needReadable: true,
                                    emittedReadable: false,
                                    readableListening: false,
                                    resumeScheduled: false,
                                    emitClose: false,
                                    destroyed: false,
                                    defaultEncoding: 'utf8',
                                    awaitDrain: 0,
                                    readingMore: false,
                                    decoder: null,
                                    encoding: null },
                                 readable: true,
                                 _events:
                                  [Object: null prototype] {
                                    end: [Function: onReadableStreamEnd],
                                    error: [Function: bound _handleNetworkError],
                                    data: [Function],
                                    close: [Function] },
                                 _eventsCount: 4,
                                 _maxListeners: undefined,
                                 _writableState:
                                  WritableState {
                                    objectMode: false,
                                    highWaterMark: 16384,
                                    finalCalled: false,
                                    needDrain: false,
                                    ending: false,
                                    ended: false,
                                    finished: false,
                                    destroyed: false,
                                    decodeStrings: false,
                                    defaultEncoding: 'utf8',
                                    length: 0,
                                    writing: false,
                                    corked: 0,
                                    sync: false,
                                    bufferProcessing: false,
                                    onwrite: [Function: bound onwrite],
                                    writecb: null,
                                    writelen: 0,
                                    bufferedRequest: null,
                                    lastBufferedRequest: null,
                                    pendingcb: 0,
                                    prefinished: false,
                                    errorEmitted: false,
                                    emitClose: false,
                                    bufferedRequestCount: 0,
                                    corkedRequestsFree:
                                     { next: null,
                                       entry: null,
                                       finish: [Function: bound onCorkedFinish] } },
                                 writable: true,
                                 allowHalfOpen: false,
                                 _sockname: null,
                                 _pendingData: null,
                                 _pendingEncoding: '',
                                 server: null,
                                 _server: null,
                                 [Symbol(asyncId)]: 29,
                                 [Symbol(lastWriteQueueSize)]: 0,
                                 [Symbol(timeout)]: null,
                                 [Symbol(kBytesRead)]: 0,
                                 [Symbol(kBytesWritten)]: 0 },
                              _internalId: 1,
                              _commands:
                               Denque {
                                 _head: 0,
                                 _tail: 0,
                                 _capacityMask: 3,
                                 _list: [ <4 empty items> ] },
                              _command: undefined,
                              _paused: false,
                              _paused_packets:
                               Denque {
                                 _head: 0,
                                 _tail: 0,
                                 _capacityMask: 3,
                                 _list: [ <4 empty items> ] },
                              _statements:
                               LRUCache {
                                 [Symbol(max)]: 16000,
                                 [Symbol(lengthCalculator)]: [Function: naiveLength],
                                 [Symbol(allowStale)]: false,
                                 [Symbol(maxAge)]: 0,
                                 [Symbol(dispose)]: [Function: dispose],
                                 [Symbol(noDisposeOnSet)]: false,
                                 [Symbol(cache)]: Map {},
                                 [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                 [Symbol(length)]: 0 },
                              serverCapabilityFlags: 2181036031,
                              authorized: true,
                              sequenceId: 12,
                              compressedSequenceId: 0,
                              threadId: 432,
                              _handshakePacket:
                               Handshake {
                                 protocolVersion: 10,
                                 serverVersion: '5.7.25',
                                 capabilityFlags: 2181036031,
                                 connectionId: 432,
                                 authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                 authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                 characterSet: 8,
                                 statusFlags: 2 },
                              _fatalError: null,
                              _protocolError: null,
                              _outOfOrderPackets: [],
                              clientEncoding: 'utf8',
                              packetParser:
                               PacketParser {
                                 buffer: [],
                                 bufferLength: 0,
                                 packetHeaderLength: 4,
                                 headerLen: 0,
                                 length: 5,
                                 largePacketParts: [],
                                 firstPacketSequenceId: 0,
                                 onPacket: [Function],
                                 execute: [Function: executeStart],
                                 _flushLargePacket: [Function: _flushLargePacket4] },
                              serverEncoding: 'latin1',
                              connectTimeout: null,
                              connectionId: 432 },
                           state: 'IDLE' } },
                      _resourceLoans: Map {},
                      _evictionIterator:
                       DequeIterator {
                         _list:
                          DoublyLinkedList {
                            head:
                             { prev: null,
                               next: null,
                               data:
                                PooledResource {
                                  creationTime: 1551536074757,
                                  lastReturnTime: 1551536078184,
                                  lastBorrowTime: 1551536078176,
                                  lastIdleTime: 1551536078184,
                                  obj:
                                   Connection {
                                     _events: [Object: null prototype] { error: [Function: errorHandler] },
                                     _eventsCount: 1,
                                     _maxListeners: undefined,
                                     config:
                                      ConnectionConfig {
                                        isServer: undefined,
                                        stream: undefined,
                                        host: 'localhost',
                                        port: 3306,
                                        localAddress: undefined,
                                        socketPath: undefined,
                                        user: 'root',
                                        password: 'password',
                                        passwordSha1: undefined,
                                        database: 'burger_db',
                                        connectTimeout: 10000,
                                        insecureAuth: false,
                                        supportBigNumbers: true,
                                        bigNumberStrings: false,
                                        decimalNumbers: false,
                                        dateStrings: false,
                                        debug: undefined,
                                        trace: true,
                                        stringifyObjects: false,
                                        timezone: '+00:00',
                                        queryFormat: undefined,
                                        pool: undefined,
                                        ssl: false,
                                        multipleStatements: false,
                                        rowsAsArray: false,
                                        namedPlaceholders: false,
                                        nestTables: undefined,
                                        typeCast: [Function: bound _typecast],
                                        maxPacketSize: 0,
                                        charsetNumber: 224,
                                        compress: false,
                                        authSwitchHandler: undefined,
                                        clientFlags: 8582093,
                                        connectAttributes: undefined,
                                        maxPreparedStatements: 16000 },
                                     stream:
                                      Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           error: [Function: bound _handleNetworkError],
                                           data: [Function],
                                           close: [Function] },
                                        _eventsCount: 4,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: false,
                                           needDrain: false,
                                           ending: false,
                                           ended: false,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 0,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: true,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        [Symbol(asyncId)]: 29,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 },
                                     _internalId: 1,
                                     _commands:
                                      Denque {
                                        _head: 0,
                                        _tail: 0,
                                        _capacityMask: 3,
                                        _list: [ <4 empty items> ] },
                                     _command: undefined,
                                     _paused: false,
                                     _paused_packets:
                                      Denque {
                                        _head: 0,
                                        _tail: 0,
                                        _capacityMask: 3,
                                        _list: [ <4 empty items> ] },
                                     _statements:
                                      LRUCache {
                                        [Symbol(max)]: 16000,
                                        [Symbol(lengthCalculator)]: [Function: naiveLength],
                                        [Symbol(allowStale)]: false,
                                        [Symbol(maxAge)]: 0,
                                        [Symbol(dispose)]: [Function: dispose],
                                        [Symbol(noDisposeOnSet)]: false,
                                        [Symbol(cache)]: Map {},
                                        [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                        [Symbol(length)]: 0 },
                                     serverCapabilityFlags: 2181036031,
                                     authorized: true,
                                     sequenceId: 12,
                                     compressedSequenceId: 0,
                                     threadId: 432,
                                     _handshakePacket:
                                      Handshake {
                                        protocolVersion: 10,
                                        serverVersion: '5.7.25',
                                        capabilityFlags: 2181036031,
                                        connectionId: 432,
                                        authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                        authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                        characterSet: 8,
                                        statusFlags: 2 },
                                     _fatalError: null,
                                     _protocolError: null,
                                     _outOfOrderPackets: [],
                                     clientEncoding: 'utf8',
                                     packetParser:
                                      PacketParser {
                                        buffer: [],
                                        bufferLength: 0,
                                        packetHeaderLength: 4,
                                        headerLen: 0,
                                        length: 5,
                                        largePacketParts: [],
                                        firstPacketSequenceId: 0,
                                        onPacket: [Function],
                                        execute: [Function: executeStart],
                                        _flushLargePacket: [Function: _flushLargePacket4] },
                                     serverEncoding: 'latin1',
                                     connectTimeout: null,
                                     connectionId: 432 },
                                  state: 'IDLE' } },
                            tail:
                             { prev: null,
                               next: null,
                               data:
                                PooledResource {
                                  creationTime: 1551536074757,
                                  lastReturnTime: 1551536078184,
                                  lastBorrowTime: 1551536078176,
                                  lastIdleTime: 1551536078184,
                                  obj:
                                   Connection {
                                     _events: [Object: null prototype] { error: [Function: errorHandler] },
                                     _eventsCount: 1,
                                     _maxListeners: undefined,
                                     config:
                                      ConnectionConfig {
                                        isServer: undefined,
                                        stream: undefined,
                                        host: 'localhost',
                                        port: 3306,
                                        localAddress: undefined,
                                        socketPath: undefined,
                                        user: 'root',
                                        password: 'password',
                                        passwordSha1: undefined,
                                        database: 'burger_db',
                                        connectTimeout: 10000,
                                        insecureAuth: false,
                                        supportBigNumbers: true,
                                        bigNumberStrings: false,
                                        decimalNumbers: false,
                                        dateStrings: false,
                                        debug: undefined,
                                        trace: true,
                                        stringifyObjects: false,
                                        timezone: '+00:00',
                                        queryFormat: undefined,
                                        pool: undefined,
                                        ssl: false,
                                        multipleStatements: false,
                                        rowsAsArray: false,
                                        namedPlaceholders: false,
                                        nestTables: undefined,
                                        typeCast: [Function: bound _typecast],
                                        maxPacketSize: 0,
                                        charsetNumber: 224,
                                        compress: false,
                                        authSwitchHandler: undefined,
                                        clientFlags: 8582093,
                                        connectAttributes: undefined,
                                        maxPreparedStatements: 16000 },
                                     stream:
                                      Socket {
                                        connecting: false,
                                        _hadError: false,
                                        _handle:
                                         TCP {
                                           reading: true,
                                           onread: [Function: onStreamRead],
                                           onconnection: null,
                                           [Symbol(owner)]: [Circular] },
                                        _parent: null,
                                        _host: 'localhost',
                                        _readableState:
                                         ReadableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           buffer: BufferList { head: null, tail: null, length: 0 },
                                           length: 0,
                                           pipes: null,
                                           pipesCount: 0,
                                           flowing: true,
                                           ended: false,
                                           endEmitted: false,
                                           reading: true,
                                           sync: false,
                                           needReadable: true,
                                           emittedReadable: false,
                                           readableListening: false,
                                           resumeScheduled: false,
                                           emitClose: false,
                                           destroyed: false,
                                           defaultEncoding: 'utf8',
                                           awaitDrain: 0,
                                           readingMore: false,
                                           decoder: null,
                                           encoding: null },
                                        readable: true,
                                        _events:
                                         [Object: null prototype] {
                                           end: [Function: onReadableStreamEnd],
                                           error: [Function: bound _handleNetworkError],
                                           data: [Function],
                                           close: [Function] },
                                        _eventsCount: 4,
                                        _maxListeners: undefined,
                                        _writableState:
                                         WritableState {
                                           objectMode: false,
                                           highWaterMark: 16384,
                                           finalCalled: false,
                                           needDrain: false,
                                           ending: false,
                                           ended: false,
                                           finished: false,
                                           destroyed: false,
                                           decodeStrings: false,
                                           defaultEncoding: 'utf8',
                                           length: 0,
                                           writing: false,
                                           corked: 0,
                                           sync: false,
                                           bufferProcessing: false,
                                           onwrite: [Function: bound onwrite],
                                           writecb: null,
                                           writelen: 0,
                                           bufferedRequest: null,
                                           lastBufferedRequest: null,
                                           pendingcb: 0,
                                           prefinished: false,
                                           errorEmitted: false,
                                           emitClose: false,
                                           bufferedRequestCount: 0,
                                           corkedRequestsFree:
                                            { next: null,
                                              entry: null,
                                              finish: [Function: bound onCorkedFinish] } },
                                        writable: true,
                                        allowHalfOpen: false,
                                        _sockname: null,
                                        _pendingData: null,
                                        _pendingEncoding: '',
                                        server: null,
                                        _server: null,
                                        [Symbol(asyncId)]: 29,
                                        [Symbol(lastWriteQueueSize)]: 0,
                                        [Symbol(timeout)]: null,
                                        [Symbol(kBytesRead)]: 0,
                                        [Symbol(kBytesWritten)]: 0 },
                                     _internalId: 1,
                                     _commands:
                                      Denque {
                                        _head: 0,
                                        _tail: 0,
                                        _capacityMask: 3,
                                        _list: [ <4 empty items> ] },
                                     _command: undefined,
                                     _paused: false,
                                     _paused_packets:
                                      Denque {
                                        _head: 0,
                                        _tail: 0,
                                        _capacityMask: 3,
                                        _list: [ <4 empty items> ] },
                                     _statements:
                                      LRUCache {
                                        [Symbol(max)]: 16000,
                                        [Symbol(lengthCalculator)]: [Function: naiveLength],
                                        [Symbol(allowStale)]: false,
                                        [Symbol(maxAge)]: 0,
                                        [Symbol(dispose)]: [Function: dispose],
                                        [Symbol(noDisposeOnSet)]: false,
                                        [Symbol(cache)]: Map {},
                                        [Symbol(lruList)]: Yallist { tail: null, head: null, length: 0 },
                                        [Symbol(length)]: 0 },
                                     serverCapabilityFlags: 2181036031,
                                     authorized: true,
                                     sequenceId: 12,
                                     compressedSequenceId: 0,
                                     threadId: 432,
                                     _handshakePacket:
                                      Handshake {
                                        protocolVersion: 10,
                                        serverVersion: '5.7.25',
                                        capabilityFlags: 2181036031,
                                        connectionId: 432,
                                        authPluginData1: <Buffer 0a 45 0b 31 44 74 1b 0a>,
                                        authPluginData2: <Buffer 5c 49 0d 76 1e 18 7b 5f 75 7d 28 2e>,
                                        characterSet: 8,
                                        statusFlags: 2 },
                                     _fatalError: null,
                                     _protocolError: null,
                                     _outOfOrderPackets: [],
                                     clientEncoding: 'utf8',
                                     packetParser:
                                      PacketParser {
                                        buffer: [],
                                        bufferLength: 0,
                                        packetHeaderLength: 4,
                                        headerLen: 0,
                                        length: 5,
                                        largePacketParts: [],
                                        firstPacketSequenceId: 0,
                                        onPacket: [Function],
                                        execute: [Function: executeStart],
                                        _flushLargePacket: [Function: _flushLargePacket4] },
                                     serverEncoding: 'latin1',
                                     connectTimeout: null,
                                     connectionId: 432 },
                                  state: 'IDLE' } },
                            length: 1 },
                         _direction: 'next',
                         _startPosition: 'head',
                         _started: false,
                         _cursor: null,
                         _done: false },
                      _evictor: DefaultEvictor {},
                      _scheduledEviction:
                       Timeout {
                         _idleTimeout: 10000,
                         _idlePrev: [TimersList],
                         _idleNext: [TimersList],
                         _idleStart: 493,
                         _onTimeout: [Function],
                         _timerArgs: undefined,
                         _repeat: null,
                         _destroyed: false,
                         [Symbol(refed)]: true,
                         [Symbol(asyncId)]: 27,
                         [Symbol(triggerId)]: 25 } },
                   lib:
                    { createConnection: [Function],
                      connect: [Function],
                      Connection: [Function: Connection],
                      createPool: [Function],
                      createPoolCluster: [Function],
                      createQuery: [Function: createQuery],
                      Pool: [Function: Pool],
                      createServer: [Function],
                      PoolConnection:
                       { [Function: PoolConnection] statementKey: [Function: statementKey] },
                      escape: [Function: escape],
                      escapeId: [Function: escapeId],
                      format: [Function: format],
                      raw: [Function: raw],
                      createConnectionPromise: [Getter],
                      createPoolPromise: [Getter],
                      createPoolClusterPromise: [Getter],
                      Types: [Getter],
                      Charsets: [Getter],
                      CharsetToEncoding: [Getter],
                      setMaxParserCache: [Function],
                      clearParserCache: [Function] } },
                importCache:
                 { '/Users/paullinck/GitHub/GTPE/BurgerLogSequel/models/burger.js':
                    { [Function: burgers]
                      sequelize: [Circular],
                      options: [Circular],
                      associations: {},
                      underscored: undefined,
                      tableName: 'burgers',
                      _schema: null,
                      _schemaDelimiter: '',
                      rawAttributes:
                       { id:
                          { type:
                             INTEGER {
                               options: { length: undefined },
                               _length: undefined,
                               _zerofill: undefined,
                               _decimals: undefined,
                               _precision: undefined,
                               _scale: undefined,
                               _unsigned: undefined },
                            allowNull: false,
                            primaryKey: true,
                            autoIncrement: true,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'id',
                            _modelAttribute: true,
                            field: 'id' },
                         name:
                          { type:
                             STRING {
                               options: { length: undefined, binary: undefined },
                               _binary: undefined,
                               _length: 255 },
                            allowNull: false,
                            validate: { len: [ 1, 140 ] },
                            Model: [Circular],
                            fieldName: 'name',
                            _modelAttribute: true,
                            field: 'name' },
                         isDevoured:
                          { type: BOOLEAN {},
                            allowNull: false,
                            defaultValue: false,
                            Model: [Circular],
                            fieldName: 'isDevoured',
                            _modelAttribute: true,
                            field: 'isDevoured' },
                         createdAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'createdAt',
                            _modelAttribute: true,
                            field: 'createdAt' },
                         updatedAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'updatedAt',
                            _modelAttribute: true,
                            field: 'updatedAt' } },
                      primaryKeys:
                       { id:
                          { type:
                             INTEGER {
                               options: { length: undefined },
                               _length: undefined,
                               _zerofill: undefined,
                               _decimals: undefined,
                               _precision: undefined,
                               _scale: undefined,
                               _unsigned: undefined },
                            allowNull: false,
                            primaryKey: true,
                            autoIncrement: true,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'id',
                            _modelAttribute: true,
                            field: 'id' } },
                      _timestampAttributes: { createdAt: 'createdAt', updatedAt: 'updatedAt' },
                      _readOnlyAttributes: [ 'createdAt', 'updatedAt' ],
                      _hasReadOnlyAttributes: 2,
                      _isReadOnlyAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _dataTypeChanges:
                       { createdAt: [Function: _isChanged],
                         updatedAt: [Function: _isChanged] },
                      _dataTypeSanitizers:
                       { isDevoured: [Function: _sanitize],
                         createdAt: [Function: _sanitize],
                         updatedAt: [Function: _sanitize] },
                      _booleanAttributes: [ 'isDevoured' ],
                      _dateAttributes: [ 'createdAt', 'updatedAt' ],
                      _hstoreAttributes: [],
                      _rangeAttributes: [],
                      _jsonAttributes: [],
                      _geometryAttributes: [],
                      _virtualAttributes: [],
                      _defaultValues: { isDevoured: [Function: wrapper] },
                      fieldRawAttributesMap:
                       { id:
                          { type:
                             INTEGER {
                               options: { length: undefined },
                               _length: undefined,
                               _zerofill: undefined,
                               _decimals: undefined,
                               _precision: undefined,
                               _scale: undefined,
                               _unsigned: undefined },
                            allowNull: false,
                            primaryKey: true,
                            autoIncrement: true,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'id',
                            _modelAttribute: true,
                            field: 'id' },
                         name:
                          { type:
                             STRING {
                               options: { length: undefined, binary: undefined },
                               _binary: undefined,
                               _length: 255 },
                            allowNull: false,
                            validate: { len: [ 1, 140 ] },
                            Model: [Circular],
                            fieldName: 'name',
                            _modelAttribute: true,
                            field: 'name' },
                         isDevoured:
                          { type: BOOLEAN {},
                            allowNull: false,
                            defaultValue: false,
                            Model: [Circular],
                            fieldName: 'isDevoured',
                            _modelAttribute: true,
                            field: 'isDevoured' },
                         createdAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'createdAt',
                            _modelAttribute: true,
                            field: 'createdAt' },
                         updatedAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'updatedAt',
                            _modelAttribute: true,
                            field: 'updatedAt' } },
                      fieldAttributeMap: {},
                      uniqueKeys: {},
                      _hasBooleanAttributes: true,
                      _isBooleanAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasDateAttributes: true,
                      _isDateAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasHstoreAttributes: false,
                      _isHstoreAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasRangeAttributes: false,
                      _isRangeAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasJsonAttributes: false,
                      _isJsonAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasVirtualAttributes: false,
                      _isVirtualAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasGeometryAttributes: false,
                      _isGeometryAttribute:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      _hasDefaultValues: true,
                      attributes:
                       { id:
                          { type:
                             INTEGER {
                               options: { length: undefined },
                               _length: undefined,
                               _zerofill: undefined,
                               _decimals: undefined,
                               _precision: undefined,
                               _scale: undefined,
                               _unsigned: undefined },
                            allowNull: false,
                            primaryKey: true,
                            autoIncrement: true,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'id',
                            _modelAttribute: true,
                            field: 'id' },
                         name:
                          { type:
                             STRING {
                               options: { length: undefined, binary: undefined },
                               _binary: undefined,
                               _length: 255 },
                            allowNull: false,
                            validate: { len: [ 1, 140 ] },
                            Model: [Circular],
                            fieldName: 'name',
                            _modelAttribute: true,
                            field: 'name' },
                         isDevoured:
                          { type: BOOLEAN {},
                            allowNull: false,
                            defaultValue: false,
                            Model: [Circular],
                            fieldName: 'isDevoured',
                            _modelAttribute: true,
                            field: 'isDevoured' },
                         createdAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'createdAt',
                            _modelAttribute: true,
                            field: 'createdAt' },
                         updatedAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'updatedAt',
                            _modelAttribute: true,
                            field: 'updatedAt' } },
                      tableAttributes:
                       { id:
                          { type:
                             INTEGER {
                               options: { length: undefined },
                               _length: undefined,
                               _zerofill: undefined,
                               _decimals: undefined,
                               _precision: undefined,
                               _scale: undefined,
                               _unsigned: undefined },
                            allowNull: false,
                            primaryKey: true,
                            autoIncrement: true,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'id',
                            _modelAttribute: true,
                            field: 'id' },
                         name:
                          { type:
                             STRING {
                               options: { length: undefined, binary: undefined },
                               _binary: undefined,
                               _length: 255 },
                            allowNull: false,
                            validate: { len: [ 1, 140 ] },
                            Model: [Circular],
                            fieldName: 'name',
                            _modelAttribute: true,
                            field: 'name' },
                         isDevoured:
                          { type: BOOLEAN {},
                            allowNull: false,
                            defaultValue: false,
                            Model: [Circular],
                            fieldName: 'isDevoured',
                            _modelAttribute: true,
                            field: 'isDevoured' },
                         createdAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'createdAt',
                            _modelAttribute: true,
                            field: 'createdAt' },
                         updatedAt:
                          { type: DATE { options: { length: undefined }, _length: '' },
                            allowNull: false,
                            _autoGenerated: true,
                            Model: [Circular],
                            fieldName: 'updatedAt',
                            _modelAttribute: true,
                            field: 'updatedAt' } },
                      primaryKeyAttributes: [ 'id' ],
                      primaryKeyAttribute: 'id',
                      primaryKeyField: 'id',
                      _hasPrimaryKeys: true,
                      _isPrimaryKey:
                       { [Function: memoized]
                         cache:
                          MapCache {
                            size: 0,
                            __data__:
                             { hash: Hash { __data__: [Object: null prototype] {}, size: 0 },
                               map: Map {},
                               string: Hash { __data__: [Object: null prototype] {}, size: 0 } } } },
                      autoIncrementAttribute: 'id',
                      _scope: {},
                      _scopeNames: [ 'defaultScope' ] } },
                test:
                 { _trackRunningQueries: false,
                   _runningQueries: 0,
                   trackRunningQueries: [Function: trackRunningQueries],
                   verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
             hooks: {},
             uniqueKeys: {} },
          _options: { isNewRecord: true, _schema: null, _schemaDelimiter: '' },
          __eagerlyLoadedAssociations: [],
          isNewRecord: true },
       validatorKey: 'is_null',
       validatorName: null,
       validatorArgs: [] } ] }
